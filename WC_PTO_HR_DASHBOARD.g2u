Program.Sub.ScreenSU.Start
Gui.frmApproved..Create
Gui.frmApproved..Caption("Approved PTO")
Gui.frmApproved..Size(20895,12435)
Gui.frmApproved..MinX(0)
Gui.frmApproved..MinY(0)
Gui.frmApproved..Position(0,0)
Gui.frmApproved..BackColor(-2147483633)
Gui.frmApproved..MousePointer(0)
Gui.frmApproved..Event(UnLoad,frmApproved_UnLoad)
Gui.frmApproved.gsgcApproved.Create(GsGridControl)
Gui.frmApproved.gsgcApproved.Size(20325,8970)
Gui.frmApproved.gsgcApproved.Position(150,2235)
Gui.frmApproved.gsgcApproved.Anchor(15)
Gui.frmApproved.cmdSave.Create(Button)
Gui.frmApproved.cmdSave.Size(2205,375)
Gui.frmApproved.cmdSave.Position(18270,11340)
Gui.frmApproved.cmdSave.Caption("Save Changes")
Gui.frmApproved.cmdSave.Event(Click,cmdSave_Click)
Gui.frmApproved.cmdSave.FontStyle(True,False,False,False,False)
Gui.frmApproved.cmdSave.Anchor(9)
Gui.frmApproved.cmdSuper.Create(Button)
Gui.frmApproved.cmdSuper.Size(2205,375)
Gui.frmApproved.cmdSuper.Position(2610,1605)
Gui.frmApproved.cmdSuper.Anchor(9)
Gui.frmApproved.cmdSuper.Caption("Add/Remove SF Supers")
Gui.frmApproved.cmdSuper.Event(Click,cmdSuper_Click)
Gui.frmApproved.cmdPassword.Create(Button)
Gui.frmApproved.cmdPassword.Size(2205,375)
Gui.frmApproved.cmdPassword.Position(240,1590)
Gui.frmApproved.cmdPassword.Anchor(9)
Gui.frmApproved.cmdPassword.Caption("Reset Password")
Gui.frmApproved.cmdPassword.Event(Click,cmdPassword_Click)
Gui.frmApproved.frameView.Create(Frame)
Gui.frmApproved.frameView.Size(9750,1230)
Gui.frmApproved.frameView.Position(150,165)
Gui.frmApproved.frameView.Caption("View")
Gui.frmApproved.cmdFill40.Create(Button)
Gui.frmApproved.cmdFill40.Size(2205,375)
Gui.frmApproved.cmdFill40.Position(90,300)
Gui.frmApproved.cmdFill40.Caption("View Fill to 40")
Gui.frmApproved.cmdFill40.Event(Click,cmdFill40_Click)
Gui.frmApproved.cmdFill40.Anchor(9)
Gui.frmApproved.cmdFill40.Parent("frameView")
Gui.frmApproved.cmdViewDenied.Create(Button)
Gui.frmApproved.cmdViewDenied.Size(2205,375)
Gui.frmApproved.cmdViewDenied.Position(4830,300)
Gui.frmApproved.cmdViewDenied.Caption("View Denied Requests")
Gui.frmApproved.cmdViewDenied.Event(Click,cmdViewDenied_Click)
Gui.frmApproved.cmdViewDenied.Anchor(9)
Gui.frmApproved.cmdViewDenied.Parent("frameView")
Gui.frmApproved.cmdSchedule.Create(Button)
Gui.frmApproved.cmdSchedule.Size(2205,375)
Gui.frmApproved.cmdSchedule.Position(2460,300)
Gui.frmApproved.cmdSchedule.Anchor(9)
Gui.frmApproved.cmdSchedule.Caption("View Schedule")
Gui.frmApproved.cmdSchedule.Event(Click,cmdSchedule_Click)
Gui.frmApproved.cmdSchedule.Parent("frameView")
Gui.frmApproved.cmdApprovalQueue.Create(Button)
Gui.frmApproved.cmdApprovalQueue.Size(2205,375)
Gui.frmApproved.cmdApprovalQueue.Position(7200,300)
Gui.frmApproved.cmdApprovalQueue.Caption("View Approval Queue")
Gui.frmApproved.cmdApprovalQueue.Event(Click,cmdApprovalQueue_Click)
Gui.frmApproved.cmdApprovalQueue.Parent("frameView")
Gui.frmApproved.lblApproved.Create(Label,"Approved Requests:",True,1770,255,0,1350,870,True,1,"Arial",8,-2147483633,0)
Gui.frmApproved.lblApproved.Parent("frameView")
Gui.frmApproved.lblAQty.Create(Label,"0",True,630,255,0,3150,870,True,0,"Arial",8,-2147483633,0)
Gui.frmApproved.lblAQty.FontStyle(True,False,True,False,False)
Gui.frmApproved.lblAQty.Parent("frameView")
Gui.frmApproved.lblFill40.Create(Label,"Fill to 40 Requests:",True,1680,255,0,3720,870,True,1,"Arial",8,-2147483633,0)
Gui.frmApproved.lblFill40.Parent("frameView")
Gui.frmApproved.lblFQty.Create(Label,"0",True,630,255,0,5520,870,True,0,"Arial",8,-2147483633,0)
Gui.frmApproved.lblFQty.FontStyle(True,False,True,False,False)
Gui.frmApproved.lblFQty.Parent("frameView")
Gui.frmApproved.lblDenied.Create(Label,"Denied Requests:",True,1770,255,0,6090,870,True,1,"Arial",8,-2147483633,0)
Gui.frmApproved.lblDenied.Parent("frameView")
Gui.frmApproved.lblDQty.Create(Label,"0",True,630,255,0,7890,870,True,0,"Arial",8,-2147483633,0)
Gui.frmApproved.lblDQty.FontStyle(True,False,True,False,False)
Gui.frmApproved.lblDQty.Parent("frameView")
Gui.frmApproved.cmdRefresh.Create(Button)
Gui.frmApproved.cmdRefresh.Size(375,375)
Gui.frmApproved.cmdRefresh.Position(90,750)
Gui.frmApproved.cmdRefresh.Caption("REFRESH")
Gui.frmApproved.cmdRefresh.Event(Click,loadDT)
Gui.frmApproved.cmdRefresh.Parent("frameView")
Gui.frmApproved.frameEmployees.Create(Frame)
Gui.frmApproved.frameEmployees.Size(7335,855)
Gui.frmApproved.frameEmployees.Position(13140,1185)
Gui.frmApproved.frameEmployees.Caption("Employee Management")
Gui.frmApproved.cmdDeleteEmployee.Create(Button)
Gui.frmApproved.cmdDeleteEmployee.Size(2205,375)
Gui.frmApproved.cmdDeleteEmployee.Position(4830,300)
Gui.frmApproved.cmdDeleteEmployee.Anchor(9)
Gui.frmApproved.cmdDeleteEmployee.Caption("Delete Employee")
Gui.frmApproved.cmdDeleteEmployee.Event(Click,cmdDeleteEmployee_Click)
Gui.frmApproved.cmdDeleteEmployee.Parent("frameEmployees")
Gui.frmApproved.cmdEditEmployee.Create(Button)
Gui.frmApproved.cmdEditEmployee.Size(2205,375)
Gui.frmApproved.cmdEditEmployee.Position(2460,300)
Gui.frmApproved.cmdEditEmployee.Anchor(9)
Gui.frmApproved.cmdEditEmployee.Caption("Edit Employee")
Gui.frmApproved.cmdEditEmployee.Event(Click,cmdEditEmployee_Click)
Gui.frmApproved.cmdEditEmployee.Parent("frameEmployees")
Gui.frmApproved.cmdAddNewEmp.Create(Button)
Gui.frmApproved.cmdAddNewEmp.Size(2205,375)
Gui.frmApproved.cmdAddNewEmp.Position(90,300)
Gui.frmApproved.cmdAddNewEmp.Anchor(9)
Gui.frmApproved.cmdAddNewEmp.Caption("Add New Employee")
Gui.frmApproved.cmdAddNewEmp.Event(Click,cmdAddNewEmp_Click)
Gui.frmApproved.cmdAddNewEmp.Parent("frameEmployees")
Gui.frmApproved.frameManual.Create(Frame)
Gui.frmApproved.frameManual.Size(7335,855)
Gui.frmApproved.frameManual.Position(13140,165)
Gui.frmApproved.frameManual.Caption("Manual Edit")
Gui.frmApproved.cmdManualPTO.Create(Button)
Gui.frmApproved.cmdManualPTO.Size(2205,375)
Gui.frmApproved.cmdManualPTO.Position(90,300)
Gui.frmApproved.cmdManualPTO.Anchor(9)
Gui.frmApproved.cmdManualPTO.Caption("Manual PTO Slip")
Gui.frmApproved.cmdManualPTO.DefaultValue("Manual PTO Slip")
Gui.frmApproved.cmdManualPTO.Event(Click,cmdManualPTO_Click)
Gui.frmApproved.cmdManualPTO.Parent("frameManual")
Gui.frmApproved.cmdManualApproval.Create(Button)
Gui.frmApproved.cmdManualApproval.Size(2205,375)
Gui.frmApproved.cmdManualApproval.Position(2460,300)
Gui.frmApproved.cmdManualApproval.Caption("Manual Approval")
Gui.frmApproved.cmdManualApproval.Event(Click,cmdManualApproval_Click)
Gui.frmApproved.cmdManualApproval.Parent("frameManual")
Gui.frmApproved.cmdDeleteReq.Create(Button)
Gui.frmApproved.cmdDeleteReq.Size(2205,375)
Gui.frmApproved.cmdDeleteReq.Position(4830,300)
Gui.frmApproved.cmdDeleteReq.Caption("Delete Request")
Gui.frmApproved.cmdDeleteReq.Event(Click,cmdDeleteReq_Click)
Gui.frmApproved.cmdDeleteReq.Parent("frameManual")
Gui.frmDenied..Create
Gui.frmDenied..Caption("Denied PTO")
Gui.frmDenied..Size(20895,12435)
Gui.frmDenied..MinX(0)
Gui.frmDenied..MinY(0)
Gui.frmDenied..Position(0,0)
Gui.frmDenied..BackColor(-2147483633)
Gui.frmDenied..MousePointer(0)
Gui.frmDenied..Event(UnLoad,frmApproved_UnLoad)
Gui.frmDenied.gsgcDenied.Create(GsGridControl)
Gui.frmDenied.gsgcDenied.Size(20325,8970)
Gui.frmDenied.gsgcDenied.Position(150,2235)
Gui.frmDenied.gsgcDenied.Anchor(15)
Gui.frmDenied.cmdSave.Create(Button)
Gui.frmDenied.cmdSave.Size(2205,375)
Gui.frmDenied.cmdSave.Position(18270,11340)
Gui.frmDenied.cmdSave.Caption("Save Changes")
Gui.frmDenied.cmdSave.Event(Click,cmdClearD_Click)
Gui.frmDenied.cmdSave.FontStyle(True,False,False,False,False)
Gui.frmDenied.cmdSave.Anchor(9)
Gui.frmDenied.cmdSuper.Create(Button)
Gui.frmDenied.cmdSuper.Size(2205,375)
Gui.frmDenied.cmdSuper.Position(2610,1605)
Gui.frmDenied.cmdSuper.Anchor(9)
Gui.frmDenied.cmdSuper.Caption("Add/Remove SF Supers")
Gui.frmDenied.cmdSuper.Event(Click,cmdSuper_Click)
Gui.frmDenied.cmdPassword.Create(Button)
Gui.frmDenied.cmdPassword.Size(2205,375)
Gui.frmDenied.cmdPassword.Position(240,1590)
Gui.frmDenied.cmdPassword.Anchor(9)
Gui.frmDenied.cmdPassword.Caption("Reset Password")
Gui.frmDenied.cmdPassword.Event(Click,cmdPassword_Click)
Gui.frmDenied.frameView.Create(Frame)
Gui.frmDenied.frameView.Size(9750,1230)
Gui.frmDenied.frameView.Position(150,165)
Gui.frmDenied.frameView.Caption("View")
Gui.frmDenied.cmdFill40.Create(Button)
Gui.frmDenied.cmdFill40.Size(2205,375)
Gui.frmDenied.cmdFill40.Position(4830,300)
Gui.frmDenied.cmdFill40.Caption("View Fill to 40")
Gui.frmDenied.cmdFill40.Event(Click,cmdFill40_Click)
Gui.frmDenied.cmdFill40.Anchor(9)
Gui.frmDenied.cmdFill40.Parent("frameView")
Gui.frmDenied.cmdViewApproved.Create(Button)
Gui.frmDenied.cmdViewApproved.Size(2205,375)
Gui.frmDenied.cmdViewApproved.Position(90,300)
Gui.frmDenied.cmdViewApproved.Caption("View Approved Requests")
Gui.frmDenied.cmdViewApproved.Event(Click,cmdViewApproved_Click)
Gui.frmDenied.cmdViewApproved.Anchor(9)
Gui.frmDenied.cmdViewApproved.Parent("frameView")
Gui.frmDenied.cmdSchedule.Create(Button)
Gui.frmDenied.cmdSchedule.Size(2205,375)
Gui.frmDenied.cmdSchedule.Position(2460,300)
Gui.frmDenied.cmdSchedule.Anchor(9)
Gui.frmDenied.cmdSchedule.Caption("View Schedule")
Gui.frmDenied.cmdSchedule.Event(Click,cmdSchedule_Click)
Gui.frmDenied.cmdSchedule.Parent("frameView")
Gui.frmDenied.cmdApprovalQueue.Create(Button)
Gui.frmDenied.cmdApprovalQueue.Size(2205,375)
Gui.frmDenied.cmdApprovalQueue.Position(7200,300)
Gui.frmDenied.cmdApprovalQueue.Caption("View Approval Queue")
Gui.frmDenied.cmdApprovalQueue.Event(Click,cmdApprovalQueue_Click)
Gui.frmDenied.cmdApprovalQueue.Parent("frameView")
Gui.frmDenied.lblApproved.Create(Label,"Approved Requests:",True,1770,255,0,1350,870,True,1,"Arial",8,-2147483633,0)
Gui.frmDenied.lblApproved.Parent("frameView")
Gui.frmDenied.lblAQty.Create(Label,"0",True,630,255,0,3150,870,True,0,"Arial",8,-2147483633,0)
Gui.frmDenied.lblAQty.FontStyle(True,False,True,False,False)
Gui.frmDenied.lblAQty.Parent("frameView")
Gui.frmDenied.lblFill40.Create(Label,"Fill to 40 Requests:",True,1680,255,0,3720,870,True,1,"Arial",8,-2147483633,0)
Gui.frmDenied.lblFill40.Parent("frameView")
Gui.frmDenied.lblFQty.Create(Label,"0",True,630,255,0,5520,870,True,0,"Arial",8,-2147483633,0)
Gui.frmDenied.lblFQty.FontStyle(True,False,True,False,False)
Gui.frmDenied.lblFQty.Parent("frameView")
Gui.frmDenied.lblDenied.Create(Label,"Denied Requests:",True,1770,255,0,6090,870,True,1,"Arial",8,-2147483633,0)
Gui.frmDenied.lblDenied.Parent("frameView")
Gui.frmDenied.lblDQty.Create(Label,"0",True,630,255,0,7890,870,True,0,"Arial",8,-2147483633,0)
Gui.frmDenied.lblDQty.FontStyle(True,False,True,False,False)
Gui.frmDenied.lblDQty.Parent("frameView")
Gui.frmDenied.cmdRefresh.Create(Button)
Gui.frmDenied.cmdRefresh.Size(375,375)
Gui.frmDenied.cmdRefresh.Position(90,750)
Gui.frmDenied.cmdRefresh.Caption("REFRESH")
Gui.frmDenied.cmdRefresh.Event(Click,loadDT)
Gui.frmDenied.cmdRefresh.Parent("frameView")
Gui.frmDenied.frameEmployees.Create(Frame)
Gui.frmDenied.frameEmployees.Size(7335,855)
Gui.frmDenied.frameEmployees.Position(13140,1185)
Gui.frmDenied.frameEmployees.Caption("Employee Management")
Gui.frmDenied.cmdDeleteEmployee.Create(Button)
Gui.frmDenied.cmdDeleteEmployee.Size(2205,375)
Gui.frmDenied.cmdDeleteEmployee.Position(4830,300)
Gui.frmDenied.cmdDeleteEmployee.Anchor(9)
Gui.frmDenied.cmdDeleteEmployee.Caption("Delete Employee")
Gui.frmDenied.cmdDeleteEmployee.Event(Click,cmdDeleteEmployee_Click)
Gui.frmDenied.cmdDeleteEmployee.Parent("frameEmployees")
Gui.frmDenied.cmdEditEmployee.Create(Button)
Gui.frmDenied.cmdEditEmployee.Size(2205,375)
Gui.frmDenied.cmdEditEmployee.Position(2460,300)
Gui.frmDenied.cmdEditEmployee.Anchor(9)
Gui.frmDenied.cmdEditEmployee.Caption("Edit Employee")
Gui.frmDenied.cmdEditEmployee.Event(Click,cmdEditEmployee_Click)
Gui.frmDenied.cmdEditEmployee.Parent("frameEmployees")
Gui.frmDenied.cmdAddNewEmp.Create(Button)
Gui.frmDenied.cmdAddNewEmp.Size(2205,375)
Gui.frmDenied.cmdAddNewEmp.Position(90,300)
Gui.frmDenied.cmdAddNewEmp.Anchor(9)
Gui.frmDenied.cmdAddNewEmp.Caption("Add New Employee")
Gui.frmDenied.cmdAddNewEmp.Event(Click,cmdAddNewEmp_Click)
Gui.frmDenied.cmdAddNewEmp.Parent("frameEmployees")
Gui.frmDenied.frameManual.Create(Frame)
Gui.frmDenied.frameManual.Size(7335,855)
Gui.frmDenied.frameManual.Position(13140,165)
Gui.frmDenied.frameManual.Caption("Manual Edit")
Gui.frmDenied.cmdManualPTO.Create(Button)
Gui.frmDenied.cmdManualPTO.Size(2205,375)
Gui.frmDenied.cmdManualPTO.Position(90,300)
Gui.frmDenied.cmdManualPTO.Anchor(9)
Gui.frmDenied.cmdManualPTO.Caption("Manual PTO Slip")
Gui.frmDenied.cmdManualPTO.DefaultValue("Manual PTO Slip")
Gui.frmDenied.cmdManualPTO.Event(Click,cmdManualPTO_Click)
Gui.frmDenied.cmdManualPTO.Parent("frameManual")
Gui.frmDenied.cmdManualApproval.Create(Button)
Gui.frmDenied.cmdManualApproval.Size(2205,375)
Gui.frmDenied.cmdManualApproval.Position(2460,300)
Gui.frmDenied.cmdManualApproval.Caption("Manual Approval")
Gui.frmDenied.cmdManualApproval.Event(Click,cmdManualApproval_Click)
Gui.frmDenied.cmdManualApproval.Parent("frameManual")
Gui.frmDenied.cmdDeleteReq.Create(Button)
Gui.frmDenied.cmdDeleteReq.Size(2205,375)
Gui.frmDenied.cmdDeleteReq.Position(4830,300)
Gui.frmDenied.cmdDeleteReq.Caption("Delete Request")
Gui.frmDenied.cmdDeleteReq.Event(Click,cmdDeleteReq_Click)
Gui.frmDenied.cmdDeleteReq.Parent("frameManual")
Gui.frmLoading..Create
Gui.frmLoading..Caption("Loading...")
Gui.frmLoading..Size(4560,1425)
Gui.frmLoading..MinX(0)
Gui.frmLoading..MinY(0)
Gui.frmLoading..Position(0,0)
Gui.frmLoading..BackColor(-2147483633)
Gui.frmLoading..MousePointer(0)
Gui.frmLoading.prgLoading.Create(ProgressBar)
Gui.frmLoading.prgLoading.Size(3735,315)
Gui.frmLoading.prgLoading.Position(300,330)
Gui.frm40Queue..Create
Gui.frm40Queue..Caption("Fill to 40 Queue")
Gui.frm40Queue..Size(20895,12435)
Gui.frm40Queue..MinX(0)
Gui.frm40Queue..MinY(0)
Gui.frm40Queue..Position(0,0)
Gui.frm40Queue..BackColor(-2147483633)
Gui.frm40Queue..MousePointer(0)
Gui.frm40Queue..Event(UnLoad,frmApproved_UnLoad)
Gui.frm40Queue.gsgcFill.Create(GsGridControl)
Gui.frm40Queue.gsgcFill.Size(20325,8970)
Gui.frm40Queue.gsgcFill.Position(150,2235)
Gui.frm40Queue.gsgcFill.Anchor(15)
Gui.frm40Queue.cmdSave.Create(Button)
Gui.frm40Queue.cmdSave.Size(2205,375)
Gui.frm40Queue.cmdSave.Position(18270,11340)
Gui.frm40Queue.cmdSave.Caption("Save Changes")
Gui.frm40Queue.cmdSave.Event(Click,cmdSaveFill_Click)
Gui.frm40Queue.cmdSave.FontStyle(True,False,False,False,False)
Gui.frm40Queue.cmdSave.Anchor(9)
Gui.frm40Queue.cmdSuper.Create(Button)
Gui.frm40Queue.cmdSuper.Size(2205,375)
Gui.frm40Queue.cmdSuper.Position(2610,1605)
Gui.frm40Queue.cmdSuper.Anchor(9)
Gui.frm40Queue.cmdSuper.Caption("Add/Remove SF Supers")
Gui.frm40Queue.cmdSuper.Event(Click,cmdSuper_Click)
Gui.frm40Queue.cmdPassword.Create(Button)
Gui.frm40Queue.cmdPassword.Size(2205,375)
Gui.frm40Queue.cmdPassword.Position(240,1590)
Gui.frm40Queue.cmdPassword.Anchor(9)
Gui.frm40Queue.cmdPassword.Caption("Reset Password")
Gui.frm40Queue.cmdPassword.Event(Click,cmdPassword_Click)
Gui.frm40Queue.frameView.Create(Frame)
Gui.frm40Queue.frameView.Size(9750,1230)
Gui.frm40Queue.frameView.Position(150,165)
Gui.frm40Queue.frameView.Caption("View")
Gui.frm40Queue.cmdDenied.Create(Button)
Gui.frm40Queue.cmdDenied.Size(2205,375)
Gui.frm40Queue.cmdDenied.Position(4830,300)
Gui.frm40Queue.cmdDenied.Caption("View Denied Requests")
Gui.frm40Queue.cmdDenied.Event(Click,cmdViewDenied_Click)
Gui.frm40Queue.cmdDenied.Anchor(9)
Gui.frm40Queue.cmdDenied.Parent("frameView")
Gui.frm40Queue.cmdViewApproved.Create(Button)
Gui.frm40Queue.cmdViewApproved.Size(2205,375)
Gui.frm40Queue.cmdViewApproved.Position(90,300)
Gui.frm40Queue.cmdViewApproved.Caption("View Approved Requests")
Gui.frm40Queue.cmdViewApproved.Event(Click,cmdViewApproved_Click)
Gui.frm40Queue.cmdViewApproved.Anchor(9)
Gui.frm40Queue.cmdViewApproved.Parent("frameView")
Gui.frm40Queue.cmdSchedule.Create(Button)
Gui.frm40Queue.cmdSchedule.Size(2205,375)
Gui.frm40Queue.cmdSchedule.Position(2460,300)
Gui.frm40Queue.cmdSchedule.Anchor(9)
Gui.frm40Queue.cmdSchedule.Caption("View Schedule")
Gui.frm40Queue.cmdSchedule.Event(Click,cmdSchedule_Click)
Gui.frm40Queue.cmdSchedule.Parent("frameView")
Gui.frm40Queue.cmdApprovalQueue.Create(Button)
Gui.frm40Queue.cmdApprovalQueue.Size(2205,375)
Gui.frm40Queue.cmdApprovalQueue.Position(7200,300)
Gui.frm40Queue.cmdApprovalQueue.Caption("View Approval Queue")
Gui.frm40Queue.cmdApprovalQueue.Event(Click,cmdApprovalQueue_Click)
Gui.frm40Queue.cmdApprovalQueue.Parent("frameView")
Gui.frm40Queue.lblApproved.Create(Label,"Approved Requests:",True,1770,255,0,1350,870,True,1,"Arial",8,-2147483633,0)
Gui.frm40Queue.lblApproved.Parent("frameView")
Gui.frm40Queue.lblAQty.Create(Label,"0",True,630,255,0,3150,870,True,0,"Arial",8,-2147483633,0)
Gui.frm40Queue.lblAQty.FontStyle(True,False,True,False,False)
Gui.frm40Queue.lblAQty.Parent("frameView")
Gui.frm40Queue.lblFill40.Create(Label,"Fill to 40 Requests:",True,1680,255,0,3720,870,True,1,"Arial",8,-2147483633,0)
Gui.frm40Queue.lblFill40.Parent("frameView")
Gui.frm40Queue.lblFQty.Create(Label,"0",True,630,255,0,5520,870,True,0,"Arial",8,-2147483633,0)
Gui.frm40Queue.lblFQty.FontStyle(True,False,True,False,False)
Gui.frm40Queue.lblFQty.Parent("frameView")
Gui.frm40Queue.lblDenied.Create(Label,"Denied Requests:",True,1770,255,0,6090,870,True,1,"Arial",8,-2147483633,0)
Gui.frm40Queue.lblDenied.Parent("frameView")
Gui.frm40Queue.lblDQty.Create(Label,"0",True,630,255,0,7890,870,True,0,"Arial",8,-2147483633,0)
Gui.frm40Queue.lblDQty.FontStyle(True,False,True,False,False)
Gui.frm40Queue.lblDQty.Parent("frameView")
Gui.frm40Queue.cmdRefresh.Create(Button)
Gui.frm40Queue.cmdRefresh.Size(375,375)
Gui.frm40Queue.cmdRefresh.Position(90,750)
Gui.frm40Queue.cmdRefresh.Caption("REFRESH")
Gui.frm40Queue.cmdRefresh.Event(Click,loadDT)
Gui.frm40Queue.cmdRefresh.Parent("frameView")
Gui.frm40Queue.frameEmployees.Create(Frame)
Gui.frm40Queue.frameEmployees.Size(7335,855)
Gui.frm40Queue.frameEmployees.Position(13140,1185)
Gui.frm40Queue.frameEmployees.Caption("Employee Management")
Gui.frm40Queue.cmdDeleteEmployee.Create(Button)
Gui.frm40Queue.cmdDeleteEmployee.Size(2205,375)
Gui.frm40Queue.cmdDeleteEmployee.Position(4830,300)
Gui.frm40Queue.cmdDeleteEmployee.Anchor(9)
Gui.frm40Queue.cmdDeleteEmployee.Caption("Delete Employee")
Gui.frm40Queue.cmdDeleteEmployee.Event(Click,cmdDeleteEmployee_Click)
Gui.frm40Queue.cmdDeleteEmployee.Parent("frameEmployees")
Gui.frm40Queue.cmdEditEmployee.Create(Button)
Gui.frm40Queue.cmdEditEmployee.Size(2205,375)
Gui.frm40Queue.cmdEditEmployee.Position(2460,300)
Gui.frm40Queue.cmdEditEmployee.Anchor(9)
Gui.frm40Queue.cmdEditEmployee.Caption("Edit Employee")
Gui.frm40Queue.cmdEditEmployee.Event(Click,cmdEditEmployee_Click)
Gui.frm40Queue.cmdEditEmployee.Parent("frameEmployees")
Gui.frm40Queue.cmdAddNewEmp.Create(Button)
Gui.frm40Queue.cmdAddNewEmp.Size(2205,375)
Gui.frm40Queue.cmdAddNewEmp.Position(90,300)
Gui.frm40Queue.cmdAddNewEmp.Anchor(9)
Gui.frm40Queue.cmdAddNewEmp.Caption("Add New Employee")
Gui.frm40Queue.cmdAddNewEmp.Event(Click,cmdAddNewEmp_Click)
Gui.frm40Queue.cmdAddNewEmp.Parent("frameEmployees")
Gui.frm40Queue.frameManual.Create(Frame)
Gui.frm40Queue.frameManual.Size(7335,855)
Gui.frm40Queue.frameManual.Position(13140,165)
Gui.frm40Queue.frameManual.Caption("Manual Edit")
Gui.frm40Queue.cmdManualPTO.Create(Button)
Gui.frm40Queue.cmdManualPTO.Size(2205,375)
Gui.frm40Queue.cmdManualPTO.Position(90,300)
Gui.frm40Queue.cmdManualPTO.Anchor(9)
Gui.frm40Queue.cmdManualPTO.Caption("Manual PTO Slip")
Gui.frm40Queue.cmdManualPTO.DefaultValue("Manual PTO Slip")
Gui.frm40Queue.cmdManualPTO.Event(Click,cmdManualPTO_Click)
Gui.frm40Queue.cmdManualPTO.Parent("frameManual")
Gui.frm40Queue.cmdManualApproval.Create(Button)
Gui.frm40Queue.cmdManualApproval.Size(2205,375)
Gui.frm40Queue.cmdManualApproval.Position(2460,300)
Gui.frm40Queue.cmdManualApproval.Caption("Manual Approval")
Gui.frm40Queue.cmdManualApproval.Event(Click,cmdManualApproval_Click)
Gui.frm40Queue.cmdManualApproval.Parent("frameManual")
Gui.frm40Queue.cmdDeleteReq.Create(Button)
Gui.frm40Queue.cmdDeleteReq.Size(2205,375)
Gui.frm40Queue.cmdDeleteReq.Position(4830,300)
Gui.frm40Queue.cmdDeleteReq.Caption("Delete Request")
Gui.frm40Queue.cmdDeleteReq.Event(Click,cmdDeleteReq_Click)
Gui.frm40Queue.cmdDeleteReq.Parent("frameManual")
Gui.frmPTO..Create
Gui.frmPTO..Caption("PTO Schedule")
Gui.frmPTO..Size(20475,11265)
Gui.frmPTO..MinX(0)
Gui.frmPTO..MinY(0)
Gui.frmPTO..Position(0,0)
Gui.frmPTO..BackColor(-2147483633)
Gui.frmPTO..MousePointer(0)
Gui.frmPTO..Event(UnLoad,frmLogin_unload)
Gui.frmPTO.gsgcPTO.Create(GsGridControl)
Gui.frmPTO.gsgcPTO.Size(19650,10155)
Gui.frmPTO.gsgcPTO.Position(315,315)
Gui.frmPTO.gsgcPTO.Anchor(15)
Gui.frmPTO.gsgcPTO.Event(RowCellClick,gsgcPTO_RowCellClick)
Gui.frmDetail..Create
Gui.frmDetail..Caption("PTO Details")
Gui.frmDetail..Size(4395,7095)
Gui.frmDetail..MinX(0)
Gui.frmDetail..MinY(0)
Gui.frmDetail..Position(0,0)
Gui.frmDetail..BackColor(-2147483633)
Gui.frmDetail..MousePointer(0)
Gui.frmDetail..Event(UnLoad,frmDetail_UnLoad)
Gui.frmDetail.lblName.Create(Label,"Employee Name:",True,1710,255,0,-45,1320,True,1,"Arial",8,-2147483633,0)
Gui.frmDetail.txtName.Create(TextBox,"",True,1995,300,0,1875,1230,True,0,"Arial",8,-2147483643,1)
Gui.frmDetail.txtName.Locked(True)
Gui.frmDetail.txtName.TabStop(True)
Gui.frmDetail.txtName.TabIndex(3)
Gui.frmDetail.lblID.Create(Label,"ID Number:",True,1170,255,0,495,360,True,1,"Arial",8,-2147483633,0)
Gui.frmDetail.txtIDNo.Create(TextBox,"",True,1215,300,0,1875,270,True,0,"Arial",8,-2147483643,1)
Gui.frmDetail.txtIDNo.Locked(True)
Gui.frmDetail.txtIDNo.TabStop(True)
Gui.frmDetail.txtIDNo.TabIndex(1)
Gui.frmDetail.lblReqDt.Create(Label,"Request Date:",True,1515,255,0,150,840,True,1,"Arial",8,-2147483633,0)
Gui.frmDetail.txtPTOAmt.Create(TextBox,"",True,1215,300,0,1875,1710,True,0,"Arial",8,-2147483643,1)
Gui.frmDetail.txtPTOAmt.TabStop(True)
Gui.frmDetail.txtPTOAmt.TabIndex(4)
Gui.frmDetail.lbl1.Create(Label,"PTO Amount:",True,1380,255,0,285,1800,True,1,"Arial",8,-2147483633,0)
Gui.frmDetail.txtReason.Create(TextBox,"",True,1215,300,0,1875,2190,True,0,"Arial",8,-2147483643,1)
Gui.frmDetail.txtReason.TabStop(True)
Gui.frmDetail.txtReason.TabIndex(5)
Gui.frmDetail.lbl2.Create(Label,"Reason:",True,930,255,0,735,2280,True,1,"Arial",8,-2147483633,0)
Gui.frmDetail.txtSup.Create(TextBox,"",True,1995,300,0,1875,2670,True,0,"Arial",8,-2147483643,1)
Gui.frmDetail.txtSup.Locked(True)
Gui.frmDetail.txtSup.TabStop(True)
Gui.frmDetail.txtSup.TabIndex(6)
Gui.frmDetail.lblSup.Create(Label,"Supervisor:",True,1245,255,0,420,2760,True,1,"Arial",8,-2147483633,0)
Gui.frmDetail.lbl3.Create(Label,"Fill to 40:",True,1020,255,0,645,3240,True,1,"Arial",8,-2147483633,0)
Gui.frmDetail.lbl4.Create(Label,"Excused:",True,1020,255,0,645,3720,True,1,"Arial",8,-2147483633,0)
Gui.frmDetail.chkFill.Create(CheckBox)
Gui.frmDetail.chkFill.Size(1560,360)
Gui.frmDetail.chkFill.Position(1875,3120)
Gui.frmDetail.chkFill.TabStop(True)
Gui.frmDetail.chkFill.TabIndex(7)
Gui.frmDetail.chkExc.Create(CheckBox)
Gui.frmDetail.chkExc.Size(1560,360)
Gui.frmDetail.chkExc.Position(1875,3600)
Gui.frmDetail.chkExc.TabStop(True)
Gui.frmDetail.chkExc.TabIndex(8)
Gui.frmDetail.cmdSaveEdit.Create(Button)
Gui.frmDetail.cmdSaveEdit.Size(1785,375)
Gui.frmDetail.cmdSaveEdit.Position(1095,5925)
Gui.frmDetail.cmdSaveEdit.Caption("Save Changes")
Gui.frmDetail.cmdSaveEdit.Event(Click,cmdSaveSchedEdit_Click)
Gui.frmDetail.dtpReqDt.Create(DatePicker)
Gui.frmDetail.dtpReqDt.Size(1935,285)
Gui.frmDetail.dtpReqDt.Position(1875,750)
Gui.frmDetail.dtpReqDt.Enabled(False)
Gui.frmDetail.lbl5.Create(Label,"Explanation:",True,1305,255,0,360,4860,True,1,"Arial",8,-2147483633,0)
Gui.frmDetail.txtExplanation.Create(TextboxM)
Gui.frmDetail.txtExplanation.Size(1995,1515)
Gui.frmDetail.txtExplanation.Position(1890,4170)
Gui.frmAddEmp..Create
Gui.frmAddEmp..Caption("Add Employee")
Gui.frmAddEmp..Size(4935,4320)
Gui.frmAddEmp..MinX(0)
Gui.frmAddEmp..MinY(0)
Gui.frmAddEmp..Position(0,0)
Gui.frmAddEmp..BackColor(-2147483633)
Gui.frmAddEmp..MousePointer(0)
Gui.frmAddEmp..Event(UnLoad,frmAddEmp_UnLoad)
Gui.frmAddEmp.lblEmpID.Create(Label,"Employee ID",True,1020,255,0,690,360,True,0,"Arial",8,-2147483633,0)
Gui.frmAddEmp.lblEmpName.Create(Label,"Employee Name",True,1245,255,0,465,720,True,0,"Arial",8,-2147483633,0)
Gui.frmAddEmp.lblSupID.Create(Label,"Supervisor ID",True,1110,255,0,600,1080,True,0,"Arial",8,-2147483633,0)
Gui.frmAddEmp.lblSupName.Create(Label,"Supervisor Name",True,1350,255,0,360,1440,True,0,"Arial",8,-2147483633,0)
Gui.frmAddEmp.lblHireDate.Create(Label,"Hire Date",True,825,255,0,885,1815,True,0,"Arial",8,-2147483633,0)
Gui.frmAddEmp.lblPTOStep.Create(Label,"PTO Step",True,825,255,0,885,2190,True,0,"Arial",8,-2147483633,0)
Gui.frmAddEmp.lblAvailPTO.Create(Label,"Available PTO",True,1185,255,0,525,2550,True,0,"Arial",8,-2147483633,0)
Gui.frmAddEmp.txtEmpID.Create(TextBox,"",True,1245,300,0,2010,285,True,0,"Arial",8,-2147483643,1)
Gui.frmAddEmp.txtEmpName.Create(TextBox,"",True,2265,300,0,2010,645,True,0,"Arial",8,-2147483643,1)
Gui.frmAddEmp.txtSupID.Create(TextBox,"",True,1245,300,0,2010,1005,True,0,"Arial",8,-2147483643,1)
Gui.frmAddEmp.txtSupName.Create(TextBox,"",True,2265,300,0,2010,1365,True,0,"Arial",8,-2147483643,1)
Gui.frmAddEmp.dtpHire.Create(DatePicker)
Gui.frmAddEmp.dtpHire.Size(1635,285)
Gui.frmAddEmp.dtpHire.Position(2010,1725)
Gui.frmAddEmp.ddlPTOStep.Create(DropDownList)
Gui.frmAddEmp.ddlPTOStep.Size(840,330)
Gui.frmAddEmp.ddlPTOStep.Position(2010,2085)
Gui.frmAddEmp.ddlPTOStep.DefaultValue("1")
Gui.frmAddEmp.txtAvailPTO.Create(TextBox,"",True,1215,300,0,2010,2475,True,0,"Arial",8,-2147483643,1)
Gui.frmAddEmp.txtAvailPTO.DefaultValue("0")
Gui.frmAddEmp.cmdSave.Create(Button)
Gui.frmAddEmp.cmdSave.Size(855,375)
Gui.frmAddEmp.cmdSave.Position(750,3030)
Gui.frmAddEmp.cmdSave.Caption("Save")
Gui.frmAddEmp.cmdSave.Event(Click,cmdSaveNewEmp_Click)
Gui.frmAddEmp.cmdAddCancel.Create(Button)
Gui.frmAddEmp.cmdAddCancel.Size(855,375)
Gui.frmAddEmp.cmdAddCancel.Position(2085,3030)
Gui.frmAddEmp.cmdAddCancel.Caption("Cancel")
Gui.frmAddEmp.cmdAddCancel.Event(Click,cmdAddCancel_Click)
Gui.frmAddEmp.cmdEmpBrowse.Create(Button)
Gui.frmAddEmp.cmdEmpBrowse.Size(405,375)
Gui.frmAddEmp.cmdEmpBrowse.Position(3375,225)
Gui.frmAddEmp.cmdEmpBrowse.Caption("^")
Gui.frmAddEmp.cmdEmpBrowse.Event(Click,cmdEmpBrowse_Click)
Gui.frmAddEmp.cmdSupBrowse.Create(Button)
Gui.frmAddEmp.cmdSupBrowse.Size(405,375)
Gui.frmAddEmp.cmdSupBrowse.Position(3375,975)
Gui.frmAddEmp.cmdSupBrowse.Caption("^")
Gui.frmAddEmp.cmdSupBrowse.Event(Click,cmdSupBrowse_Click)
Gui.frmEditEmp..Create
Gui.frmEditEmp..Caption("Edit Employee")
Gui.frmEditEmp..Size(4935,4980)
Gui.frmEditEmp..MinX(0)
Gui.frmEditEmp..MinY(0)
Gui.frmEditEmp..Position(0,0)
Gui.frmEditEmp..BackColor(-2147483633)
Gui.frmEditEmp..MousePointer(0)
Gui.frmEditEmp..Event(UnLoad,frmEditEmp_UnLoad)
Gui.frmEditEmp.lblEmpID.Create(Label,"Employee ID",True,1020,255,0,690,360,True,0,"Arial",8,-2147483633,0)
Gui.frmEditEmp.lblEmpName.Create(Label,"Employee Name",True,1245,255,0,465,720,True,0,"Arial",8,-2147483633,0)
Gui.frmEditEmp.lblSupID.Create(Label,"Supervisor ID",True,1110,255,0,600,1080,True,0,"Arial",8,-2147483633,0)
Gui.frmEditEmp.lblSupName.Create(Label,"Supervisor Name",True,1350,255,0,360,1440,True,0,"Arial",8,-2147483633,0)
Gui.frmEditEmp.lblHireDate.Create(Label,"Hire Date",True,825,255,0,885,1815,True,0,"Arial",8,-2147483633,0)
Gui.frmEditEmp.lblPTOStep.Create(Label,"PTO Step",True,825,255,0,885,2550,True,0,"Arial",8,-2147483633,0)
Gui.frmEditEmp.lblAvailPTO.Create(Label,"Available PTO",True,1185,255,0,525,2910,True,0,"Arial",8,-2147483633,0)
Gui.frmEditEmp.txtEmpID.Create(TextBox,"",True,1245,300,0,2010,285,True,0,"Arial",8,-2147483643,1)
Gui.frmEditEmp.txtEmpName.Create(TextBox,"",True,2265,300,0,2010,645,True,0,"Arial",8,-2147483643,1)
Gui.frmEditEmp.txtSupID.Create(TextBox,"",True,1245,300,0,2010,1005,True,0,"Arial",8,-2147483643,1)
Gui.frmEditEmp.txtSupName.Create(TextBox,"",True,2265,300,0,2010,1365,True,0,"Arial",8,-2147483643,1)
Gui.frmEditEmp.dtpHire.Create(DatePicker)
Gui.frmEditEmp.dtpHire.Size(1635,285)
Gui.frmEditEmp.dtpHire.Position(2010,1725)
Gui.frmEditEmp.ddlPTOStep.Create(DropDownList)
Gui.frmEditEmp.ddlPTOStep.Size(840,330)
Gui.frmEditEmp.ddlPTOStep.Position(2010,2445)
Gui.frmEditEmp.ddlPTOStep.DefaultValue("1")
Gui.frmEditEmp.txtAvailPTO.Create(TextBox,"",True,1215,300,0,2010,2835,True,0,"Arial",8,-2147483643,1)
Gui.frmEditEmp.txtAvailPTO.DefaultValue("0")
Gui.frmEditEmp.cmdSave.Create(Button)
Gui.frmEditEmp.cmdSave.Size(855,375)
Gui.frmEditEmp.cmdSave.Position(750,3390)
Gui.frmEditEmp.cmdSave.Caption("Save")
Gui.frmEditEmp.cmdSave.Event(Click,cmdSave_Edit_Click)
Gui.frmEditEmp.cmdAddCancel.Create(Button)
Gui.frmEditEmp.cmdAddCancel.Size(855,375)
Gui.frmEditEmp.cmdAddCancel.Position(2085,3390)
Gui.frmEditEmp.cmdAddCancel.Caption("Cancel")
Gui.frmEditEmp.cmdAddCancel.Event(Click,cmdEditCancel_Click)
Gui.frmEditEmp.cmdEmpBrowse.Create(Button)
Gui.frmEditEmp.cmdEmpBrowse.Size(405,375)
Gui.frmEditEmp.cmdEmpBrowse.Position(3375,225)
Gui.frmEditEmp.cmdEmpBrowse.Caption("^")
Gui.frmEditEmp.cmdEmpBrowse.Event(Click,cmdEditEmpBrowser_Click)
Gui.frmEditEmp.cmdSupBrowse.Create(Button)
Gui.frmEditEmp.cmdSupBrowse.Size(405,375)
Gui.frmEditEmp.cmdSupBrowse.Position(3375,975)
Gui.frmEditEmp.cmdSupBrowse.Caption("^")
Gui.frmEditEmp.cmdSupBrowse.Event(Click,cmdEditSupBrowser_Click)
Gui.frmEditEmp.dtpStep.Create(DatePicker)
Gui.frmEditEmp.dtpStep.Size(1635,285)
Gui.frmEditEmp.dtpStep.Position(2010,2070)
Gui.frmEditEmp.lblStepDate.Create(Label,"Step Date",True,855,255,0,855,2160,True,0,"Arial",8,-2147483633,0)
Gui.frmManual..Create
Gui.frmManual..Caption("Manual Entry")
Gui.frmManual..Size(4005,6135)
Gui.frmManual..MinX(0)
Gui.frmManual..MinY(0)
Gui.frmManual..Position(0,0)
Gui.frmManual..BackColor(-2147483633)
Gui.frmManual..MousePointer(0)
Gui.frmManual..Event(UnLoad,frmManual_UnLoad)
Gui.frmManual.txtEmployee.Create(TextBox,"",True,1215,300,0,1170,330,True,0,"Arial",8,-2147483643,1)
Gui.frmManual.txtHours.Create(TextBox,"",True,1215,300,0,1200,3285,True,0,"Arial",8,-2147483643,1)
Gui.frmManual.dtpStart.Create(DatePicker)
Gui.frmManual.dtpStart.Size(1935,285)
Gui.frmManual.dtpStart.Position(780,2055)
Gui.frmManual.dtpStart.Event(Change,dtpStart_Change)
Gui.frmManual.txtName.Create(TextBox,"",True,1740,300,0,1110,795,True,0,"Arial",8,-2147483643,1)
Gui.frmManual.lblEmployee.Create(Label,"Employee",True,810,255,0,330,420,True,0,"Arial",8,-2147483633,0)
Gui.frmManual.lblDateStart.Create(Label,"Date Range",True,1065,255,0,1260,1740,True,0,"Arial",8,-2147483633,0)
Gui.frmManual.dtpEnd.Create(DatePicker)
Gui.frmManual.dtpEnd.Size(1935,285)
Gui.frmManual.dtpEnd.Position(780,2535)
Gui.frmManual.lblName.Create(Label,"Name",True,540,255,0,330,870,True,0,"Arial",8,-2147483633,0)
Gui.frmManual.lblHours.Create(Label,"Hours",True,540,255,0,1530,3000,True,0,"Arial",8,-2147483633,0)
Gui.frmManual.cmdManConfirm.Create(Button)
Gui.frmManual.cmdManConfirm.Size(855,375)
Gui.frmManual.cmdManConfirm.Position(780,4965)
Gui.frmManual.cmdManConfirm.Caption("Confirm")
Gui.frmManual.cmdManConfirm.Event(Click,cmdManConfirm_Click)
Gui.frmManual.cmdManCancel.Create(Button)
Gui.frmManual.cmdManCancel.Size(855,375)
Gui.frmManual.cmdManCancel.Position(1950,4965)
Gui.frmManual.cmdManCancel.Caption("Cancel")
Gui.frmManual.cmdManCancel.Event(Click,cmdManCancel_Click)
Gui.frmManual.cmdManEmpBrowser.Create(Button)
Gui.frmManual.cmdManEmpBrowser.Size(375,375)
Gui.frmManual.cmdManEmpBrowser.Position(2580,300)
Gui.frmManual.cmdManEmpBrowser.Caption("^")
Gui.frmManual.cmdManEmpBrowser.DefaultValue("")
Gui.frmManual.cmdManEmpBrowser.Event(Click,cmdManEmpBrowser_Click)
Gui.frmManual.ddlReason.Create(DropDownList)
Gui.frmManual.ddlReason.Size(2025,330)
Gui.frmManual.ddlReason.Position(780,4005)
Gui.frmManual.ddlReason.AddItem("Vacation")
Gui.frmManual.ddlReason.AddItem("Sick")
Gui.frmManual.ddlReason.AddItem("Funeral")
Gui.frmManual.ddlReason.AddItem("Arrived Late")
Gui.frmManual.ddlReason.AddItem("Left Early")
Gui.frmManual.ddlReason.AddItem("Other")
Gui.frmManual.lbl1.Create(Label,"Reason",True,735,255,0,1440,3750,True,0,"Arial",8,-2147483633,0)
Gui.frmManual.chkExcused.Create(CheckBox)
Gui.frmManual.chkExcused.Size(1140,360)
Gui.frmManual.chkExcused.Position(1230,4470)
Gui.frmManual.chkExcused.Caption("Excused")
Gui.frmManual.lblAvailable.Create(Label,"Available:",True,1935,255,0,840,1305,True,2,"Arial",10,-2147483633,0)
Gui.frmSuper..Create
Gui.frmSuper..Caption("Add/Remove Shop Supervisors")
Gui.frmSuper..Size(6810,3150)
Gui.frmSuper..MinX(0)
Gui.frmSuper..MinY(0)
Gui.frmSuper..Position(0,0)
Gui.frmSuper..BackColor(-2147483633)
Gui.frmSuper..MousePointer(0)
Gui.frmSuper..Event(UnLoad,frmSuper_UnLoad)
Gui.frmSuper.txtAddID.Create(TextBox,"",True,1215,300,0,990,810,True,0,"Arial",8,-2147483643,1)
Gui.frmSuper.txtAddName.Create(TextBox,"",True,1830,300,0,990,1290,True,0,"Arial",8,-2147483643,1)
Gui.frmSuper.txtRemID.Create(TextBox,"",True,1215,300,0,4395,810,True,0,"Arial",8,-2147483643,1)
Gui.frmSuper.txtRemName.Create(TextBox,"",True,1830,300,0,4395,1290,True,0,"Arial",8,-2147483643,1)
Gui.frmSuper.lbl1.Create(Label,"Browse to Add Supervisor",True,2445,255,0,510,450,True,2,"Arial",8,-2147483633,0)
Gui.frmSuper.lbl3.Create(Label,"Browse to Remove Supervisor",True,2460,255,0,3885,450,True,2,"Arial",8,-2147483633,0)
Gui.frmSuper.lbl4.Create(Label,"ID",True,390,255,0,3855,885,True,1,"Arial",8,-2147483633,0)
Gui.frmSuper.cmdAddSupBrs.Create(Button)
Gui.frmSuper.cmdAddSupBrs.Size(375,375)
Gui.frmSuper.cmdAddSupBrs.Position(2460,780)
Gui.frmSuper.cmdAddSupBrs.Caption("^")
Gui.frmSuper.cmdAddSupBrs.Event(Click,cmdAddSupBrs_Click)
Gui.frmSuper.cmdRemSupBrs.Create(Button)
Gui.frmSuper.cmdRemSupBrs.Size(375,375)
Gui.frmSuper.cmdRemSupBrs.Position(5850,765)
Gui.frmSuper.cmdRemSupBrs.Caption("^")
Gui.frmSuper.cmdRemSupBrs.Event(Click,cmdRemSupBrs_Click)
Gui.frmSuper.lbl2.Create(Label,"Name",True,690,255,0,210,1380,True,1,"Arial",8,-2147483633,0)
Gui.frmSuper.lbl5.Create(Label,"ID",True,480,255,0,420,900,True,1,"Arial",8,-2147483633,0)
Gui.frmSuper.lbl6.Create(Label,"Name",True,705,255,0,3540,1380,True,1,"Arial",8,-2147483633,0)
Gui.frmSuper.cmdAddSuper.Create(Button)
Gui.frmSuper.cmdAddSuper.Size(1575,375)
Gui.frmSuper.cmdAddSuper.Position(915,1770)
Gui.frmSuper.cmdAddSuper.Caption("Add Supervisor")
Gui.frmSuper.cmdAddSuper.Event(Click,cmdAddSuper_Click)
Gui.frmSuper.cmdRemoveSuper.Create(Button)
Gui.frmSuper.cmdRemoveSuper.Size(1695,375)
Gui.frmSuper.cmdRemoveSuper.Position(4260,1770)
Gui.frmSuper.cmdRemoveSuper.Caption("Remove Supervisor")
Gui.frmSuper.cmdRemoveSuper.Event(Click,cmdRemoveSuper_Click)
Gui.frmPassword..Create
Gui.frmPassword..Caption("Reset Password")
Gui.frmPassword..Size(4695,3330)
Gui.frmPassword..MinX(0)
Gui.frmPassword..MinY(0)
Gui.frmPassword..Position(0,0)
Gui.frmPassword..BackColor(-2147483633)
Gui.frmPassword..MousePointer(0)
Gui.frmPassword..Event(UnLoad,frmPassword_UnLoad)
Gui.frmPassword.txtID.Create(TextBox,"",True,720,300,0,2130,255,True,0,"Arial",8,-2147483643,1)
Gui.frmPassword.txtUser.Create(TextBox,"",True,1830,300,0,2130,675,True,0,"Arial",8,-2147483643,1)
Gui.frmPassword.txtPass.Create(TextBox,"",True,1830,300,0,2130,1095,True,0,"Arial",8,-2147483643,1)
Gui.frmPassword.txtPass.PasswordChar("*")
Gui.frmPassword.txtRePass.Create(TextBox,"",True,1830,300,0,2130,1515,True,0,"Arial",8,-2147483643,1)
Gui.frmPassword.txtRePass.PasswordChar("*")
Gui.frmPassword.lblID.Create(Label,"ID",True,345,255,0,1620,345,True,1,"Arial",8,-2147483633,0)
Gui.frmPassword.lblName.Create(Label,"Username",True,1005,255,0,960,765,True,1,"Arial",8,-2147483633,0)
Gui.frmPassword.lblPass.Create(Label,"Password",True,1185,255,0,780,1185,True,1,"Arial",8,-2147483633,0)
Gui.frmPassword.lblRePass.Create(Label,"Re-Enter Password",True,1830,255,0,135,1575,True,1,"Arial",8,-2147483633,0)
Gui.frmPassword.cmdPassConfirm.Create(Button)
Gui.frmPassword.cmdPassConfirm.Size(855,375)
Gui.frmPassword.cmdPassConfirm.Position(975,2070)
Gui.frmPassword.cmdPassConfirm.Caption("Confirm")
Gui.frmPassword.cmdPassConfirm.Event(Click,cmdPassConfirm_Click)
Gui.frmPassword.cmdPassCancel.Create(Button)
Gui.frmPassword.cmdPassCancel.Size(855,375)
Gui.frmPassword.cmdPassCancel.Position(2370,2070)
Gui.frmPassword.cmdPassCancel.Caption("Cancel")
Gui.frmPassword.cmdPassCancel.Event(Click,frmPassword_UnLoad)
Gui.frmPassword.cmdPassBrowse.Create(Button)
Gui.frmPassword.cmdPassBrowse.Size(375,375)
Gui.frmPassword.cmdPassBrowse.Position(3000,210)
Gui.frmPassword.cmdPassBrowse.Caption("^")
Gui.frmPassword.cmdPassBrowse.Event(Click,cmdPassBrowse_Click)
Gui.frmDelete..Create
Gui.frmDelete..Caption("Delete Employee")
Gui.frmDelete..Size(3180,3615)
Gui.frmDelete..MinX(0)
Gui.frmDelete..MinY(0)
Gui.frmDelete..Position(0,0)
Gui.frmDelete..BackColor(-2147483633)
Gui.frmDelete..MousePointer(0)
Gui.frmDelete..Event(UnLoad,frmDelete_UnLoad)
Gui.frmDelete.txtID.Create(TextBox,"",True,1215,300,0,960,660,True,0,"Arial",8,-2147483643,1)
Gui.frmDelete.txtName.Create(TextBox,"",True,1680,300,0,960,1080,True,0,"Arial",8,-2147483643,1)
Gui.frmDelete.lblID.Create(Label,"ID",True,285,255,0,495,750,True,0,"Arial",8,-2147483633,0)
Gui.frmDelete.lblName.Create(Label,"Name",True,540,255,0,240,1170,True,0,"Arial",8,-2147483633,0)
Gui.frmDelete.lblTitle.Create(Label,"Select an Employee to Delete",True,2280,255,0,420,285,True,2,"Arial",8,-2147483633,0)
Gui.frmDelete.cmdBrowseDelete.Create(Button)
Gui.frmDelete.cmdBrowseDelete.Size(375,375)
Gui.frmDelete.cmdBrowseDelete.Position(2265,630)
Gui.frmDelete.cmdBrowseDelete.Caption("^")
Gui.frmDelete.cmdBrowseDelete.Event(Click,cmdBrowseDelete_Click)
Gui.frmDelete.cmdDeleteEmpConf.Create(Button)
Gui.frmDelete.cmdDeleteEmpConf.Size(855,375)
Gui.frmDelete.cmdDeleteEmpConf.Position(450,2400)
Gui.frmDelete.cmdDeleteEmpConf.Caption("Delete")
Gui.frmDelete.cmdDeleteEmpConf.Event(Click,cmdDeleteEmpConf_Click)
Gui.frmDelete.cmd2.Create(Button)
Gui.frmDelete.cmd2.Size(855,375)
Gui.frmDelete.cmd2.Position(1665,2400)
Gui.frmDelete.cmd2.Caption("Cancel")
Gui.frmDelete.cmd2.Event(Click,frmDelete_UnLoad)
Gui.frmDelete.lblReason.Create(Label,"Reason",True,720,255,0,165,1800,True,0,"Arial",8,-2147483633,0)
Gui.frmDelete.txtReason.Create(TextboxM)
Gui.frmDelete.txtReason.Size(1680,780)
Gui.frmDelete.txtReason.Position(960,1485)
Gui.frmDelete.txtReason.MaxLength(100)
Gui.frmApproval..Create
Gui.frmApproval..Caption("PTO Approval")
Gui.frmApproval..Size(17610,7215)
Gui.frmApproval..MinX(0)
Gui.frmApproval..MinY(0)
Gui.frmApproval..Position(0,0)
Gui.frmApproval..BackColor(-2147483633)
Gui.frmApproval..MousePointer(0)
Gui.frmApproval..Event(UnLoad,frmApproval_UnLoad)
Gui.frmApproval.gsgcApproval.Create(GsGridControl)
Gui.frmApproval.gsgcApproval.Size(16905,5775)
Gui.frmApproval.gsgcApproval.Position(210,645)
Gui.frmApproval.gsgcApproval.Anchor(15)
Gui.frmApproval.cmdSaveApproval.Create(Button)
Gui.frmApproval.cmdSaveApproval.Visible(False)
Gui.frmApproval.cmdSaveApproval.Size(1695,375)
Gui.frmApproval.cmdSaveApproval.Position(15420,150)
Gui.frmApproval.cmdSaveApproval.Caption("Save Changes")
Gui.frmApproval.cmdSaveApproval.Event(Click,cmdSaveApproval_Click)
Gui.frmDelReq..Create
Gui.frmDelReq..Caption("Delete Request")
Gui.frmDelReq..Size(15360,10425)
Gui.frmDelReq..MinX(0)
Gui.frmDelReq..MinY(0)
Gui.frmDelReq..Position(0,0)
Gui.frmDelReq..BackColor(-2147483633)
Gui.frmDelReq..MousePointer(0)
Gui.frmDelReq..Event(UnLoad,frmDelReq_UnLoad)
Gui.frmDelReq.gsgcDelete.Create(GsGridControl)
Gui.frmDelReq.gsgcDelete.Size(14850,9060)
Gui.frmDelReq.gsgcDelete.Position(135,150)
Gui.frmDelReq.cmdApplyDelete.Create(Button)
Gui.frmDelReq.cmdApplyDelete.Size(2625,375)
Gui.frmDelReq.cmdApplyDelete.Position(12360,9390)
Gui.frmDelReq.cmdApplyDelete.Caption("Delete Selected Requests")
Gui.frmDelReq.cmdApplyDelete.Event(Click,cmdApplyDelete_Click)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
F.ODBC.Connection!con.OpenCompanyConnection

'Screen load variables. These are used to track whether or not the screen has been loaded before.
V.Global.bDenyScreen.Declare
V.Global.bFill40Screen.Declare
V.Global.bLoading.Declare
V.Global.bApproved.Declare
V.Global.bAddEmp.Declare
V.Global.bEditEmp.Declare
V.Global.bManual.Declare
V.Global.bSuper.Declare
V.Global.bPassword.Declare
V.Global.bDelete.Declare
V.Global.bApproval.Declare
V.Global.bDelReq.Declare
V.Global.bDenyScreen.Set(False)
V.Global.bFill40Screen.Set(False)
V.Global.bLoading.Set(False)
V.Global.bApproved.Set(False)
V.Global.bAddEmp.Set(False)
V.Global.bEditEmp.Set(False)
V.Global.bManual.Set(False)
V.Global.bSuper.Set(False)
V.Global.bPassword.Set(False)
V.Global.bDelete.Set(False)
V.Global.bApproval.Set(False)
V.Global.bDelReq.Set(False)

V.Global.sSup.Declare
V.Global.sSup.Set("")
V.Global.sLastSup.Declare
V.Global.sLastSup.Set("")
V.Global.bDetail.Declare
V.Global.bDetail.Set(False)
V.Global.bSched.Declare
V.Global.bSched.Set(False)

V.Global.sCode.Declare
V.Global.sCode.Set("05")

V.Global.sPayType.Declare

Program.Sub.Preflight.End

Program.Sub.Main.Start

F.Intrinsic.Control.CallSub("loadDT")

Program.Sub.Main.End

Program.Sub.loadDT.Start
'The first set of lines makes sure that the tables are up to date with current "available" amounts
V.Local.sTable.Declare

V.Local.sTable.Set("ZZ_PTO_HR_APPROVED")
F.Intrinsic.Control.CallSub("updateDT","sTable",V.Local.sTable)


V.Local.sTable.Set("ZZ_PTO_FILL")
F.Intrinsic.Control.CallSub("updateDT","sTable",V.Local.sTable)


V.Local.sTable.Set("ZZ_PTO_HR_DENIED")
F.Intrinsic.Control.CallSub("updateDT","sTable",V.Local.sTable)

'The lines in between the callsubs are to update the screens with accurate tallies of current requests.
F.Intrinsic.Control.CallSub("loadApproved")



gui.frm40Queue.lblAQty.Text(V.DataTable.dtApproved.RowCount)
gui.frmApproved.lblAQty.Text(V.DataTable.dtApproved.RowCount)
gui.frmDenied.lblAQty.Text(V.DataTable.dtApproved.RowCount)

F.Intrinsic.Control.CallSub("loadFill")
Function.Intrinsic.Debug.Stop


gui.frm40Queue.lblFQty.Text(V.DataTable.dtFill.RowCount)
gui.frmApproved.lblFQty.Text(V.DataTable.dtFill.RowCount)
gui.frmDenied.lblFQty.Text(V.DataTable.dtFill.RowCount)

F.Intrinsic.Control.CallSub("loadOthers")
Function.Intrinsic.Debug.Stop


gui.frm40Queue.lblDQty.Text(V.DataTable.dtDenied.RowCount)
gui.frmApproved.lblDQty.Text(V.DataTable.dtDenied.RowCount)
gui.frmDenied.lblDQty.Text(V.DataTable.dtDenied.RowCount)

F.Intrinsic.Control.CallSub("loadSchedule")
Function.Intrinsic.Debug.Stop


'This checks whether or not the screen has been loaded before to choose between initializing the screen or just making the screen visible again
F.Intrinsic.Control.If(V.Global.bApproved)
	gui.frm40Queue..Visible(False)
	gui.frmDenied..Visible(False)
	gui.frmApproved..Visible(True)
	gui.frmLoading..Visible(False)
	gui.frmApproval..Visible(False)
F.Intrinsic.Control.Else
	V.Global.bApproved.Set(True)
	gui.frmDenied..Visible(False)
	gui.frm40Queue..Visible(False)
	gui.frmLoading..Visible(False)
	gui.frmApproval..Visible(False)
	gui.frmApproved..Show
F.Intrinsic.Control.EndIf

Program.Sub.loadDT.End

Program.Sub.updateDT.Start
V.Local.sRet.Declare
V.Local.lRowCount.Declare
V.Local.lCount.Declare
V.Local.sCurArr.Declare
V.Local.sSQL.Declare
V.Local.sHrRet.Declare
V.Local.sEmpArr.Declare
V.Local.sTable.Declare

'This sub updates all the tables with current available amounts instead of whatever the amount was upon entry.
'Takes a passed table variable for doing most of the work so that it can be used for any table necessary.

'Takes the variable table and loads it in.
F.Intrinsic.Variable.ArgToVar("sTable",V.Local.sTable)
F.Intrinsic.String.Build("SELECT * FROM {0};",V.Local.sTable,V.Local.sSQL)
F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)


F.Intrinsic.Control.If(V.Local.sRet,"<>","***NORETURN***")

	'Splits out the rows into an array
	F.Intrinsic.String.Split(V.Local.sRet,"#$#",V.Local.sRet)

	V.Local.lRowCount.Set(V.Local.sRet.UBound)
	
	'For each row in the table
	F.Intrinsic.Control.For(V.Local.lCount,0,V.Local.lRowCount,1)
	
		'Split out the columns and add the employee ID to a new array
		F.Intrinsic.String.Split(V.Local.sRet(V.Local.lCount),"*!*",V.Local.sCurArr)
		F.Intrinsic.Variable.AddToArray(V.Local.sEmpArr,V.Local.sCurArr(1))
	
	F.Intrinsic.Control.Next(V.Local.lCount)
	
	'Removes duplicated employee IDs to reduce processing time
	F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sEmpArr,V.Local.sEmpArr)
	
	V.Local.lRowCount.Set(V.Local.sEmpArr.UBound)
	V.Local.lCount.Set(0)
	
	'For each in employee ID array
	F.Intrinsic.Control.For(V.Local.lCount,1,V.Local.lRowCount,1)
	
		'Queries the ZZ_PTO_EMPLOYEES table and returns the current available amount to update the variable table
		F.Intrinsic.String.Build("SELECT * FROM ZZ_PTO_EMPLOYEES WHERE EMPLOYEE = '{0}'",V.Local.sEmpArr(V.Local.lCount),V.Local.sSQL)
		F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sHrRet)
		
		F.Intrinsic.String.Split(V.Local.sHrRet,"*!*",V.Local.sHrRet)
		F.Intrinsic.String.Build("UPDATE {0} SET AVAILABLE = '{1}' WHERE EMPLOYEE = '{2}'",V.Local.sTable,V.Local.sHrRet(2),V.Local.sHrRet(0),V.Local.sSQL)
		F.ODBC.Connection!con.Execute(V.Local.sSQL)
	
	F.Intrinsic.Control.Next(V.Local.lCount)

F.Intrinsic.Control.EndIf

Program.Sub.updateDT.End

Program.Sub.loadSchedule.Start
F.Intrinsic.Control.If(V.DataTable.dtPTO.Exists)
	F.Data.DataTable.Close("dtPTO")
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.If(V.DataTable.dtFltEmp.Exists)
	F.Data.DataTable.Close("dtFltEmp")
F.Intrinsic.Control.EndIf

F.Data.DataTable.CreateFromSQL("dtPTO","con","SELECT * FROM ZZ_PTO_CONFIRMED;",True)

F.Data.DataTable.CreateFromSQL("dtFltEmp","con","SELECT * FROM ZZ_PTO_EMPLOYEES;",True)
Program.Sub.loadSchedule.End

Program.Sub.frmApproved_UnLoad.Start
F.Intrinsic.Control.End

Program.Sub.frmApproved_UnLoad.End

Program.Sub.cmdViewDenied_Click.Start
'This checks whether or not the screen has been loaded before to choose between initializing the screen or just making the screen visible again
F.Intrinsic.Control.If(V.Global.bDenyScreen)
	gui.frmApproved..Visible(False)
	gui.frm40Queue..Visible(False)
	gui.frmDenied..Visible(True)
F.Intrinsic.Control.Else
	V.Global.bDenyScreen.Set(True)
	gui.frmApproved..Visible(False)
	gui.frm40Queue..Visible(False)
	gui.frmDenied..Show
F.Intrinsic.Control.EndIf

Program.Sub.cmdViewDenied_Click.End

Program.Sub.cmdViewApproved_Click.Start
gui.frmDenied..Visible(False)
gui.frm40Queue..Visible(False)
gui.frmApproved..Visible(True)

Program.Sub.cmdViewApproved_Click.End

Program.Sub.loadApproved.Start
'Loads the Approved table for the Approved GSGV

F.Intrinsic.Control.If(V.DataTable.dtApproved.Exists)
	F.Data.DataTable.Close("dtApproved")
F.Intrinsic.Control.EndIf

F.Data.DataTable.CreateFromSQL("dtApproved","con","SELECT * FROM ZZ_PTO_HR_APPROVED ORDER BY EMPLOYEE ASC, REQUEST_DATE ASC;",True)

F.Data.DataTable.AddColumn("dtApproved","HOURS_WORKED","float")
F.Data.DataTable.AddColumn("dtApproved","FILL_NEEDED","float")
F.Data.DataTable.AddColumn("dtApproved","PTO_TO_APPLY","float")
F.Data.DataTable.AddColumn("dtApproved","APPLY","boolean",False)

F.Intrinsic.Control.CallSub("workedHrs")
F.Intrinsic.Control.CallSub("buildAppGV")

Program.Sub.loadApproved.End

Program.Sub.loadFill.Start
V.Local.dSunday.Declare
V.Local.lWkdayCount.Declare
V.Local.dCurDay.Declare
V.Local.sDates.Declare
V.Local.sDay.Declare
V.Local.sMonth.Declare
V.Local.sYear.Declare
V.Local.lDLen.Declare
V.Local.lMLen.Declare
V.Local.sSQL.Declare
V.Local.dSaturday.Declare

'Loads the table for the Fill to 40 GSGV

F.Intrinsic.Control.If(V.DataTable.dtFill.Exists)
	F.Data.DataTable.Close("dtFill")
F.Intrinsic.Control.EndIf

'Determines what date the current week's Friday is
F.Intrinsic.Date.BeginningOfWeek(V.Ambient.Date,V.Local.dSunday)
F.Intrinsic.Date.DateAdd("D",7,V.Local.dSunday,V.Local.dSaturday)

F.Intrinsic.Date.Day(V.Local.dSaturday,V.Local.sDay)
F.Intrinsic.String.Len(V.Local.sDay,V.Local.lDLen)
F.Intrinsic.Control.If(V.Local.lDLen,"=",1)
	F.Intrinsic.String.Build("0{0}",V.Local.sDay,V.Local.sDay)
F.Intrinsic.Control.EndIf
F.Intrinsic.Date.Month(V.Local.dSaturday,V.Local.sMonth)
F.Intrinsic.String.Len(V.Local.sMonth,V.Local.lMLen)
F.Intrinsic.Control.If(V.Local.lMLen,"=",1)
	F.Intrinsic.String.Build("0{0}",V.Local.sMonth,V.Local.sMonth)
F.Intrinsic.Control.EndIf
F.Intrinsic.Date.Year(V.Local.dSaturday,V.Local.sYear)

'Makes sure to only show requests that are for or before the current week's Friday.
F.Intrinsic.String.Build("REQUEST_DATE <= '{0}-{1}-{2}'",V.Local.sYear,V.Local.sMonth,V.Local.sDay,V.Local.sDates)

F.Intrinsic.String.Build("SELECT * FROM ZZ_PTO_FILL WHERE {0};",V.Local.sDates,V.Local.sSQL)

F.Data.DataTable.CreateFromSQL("dtFill","con",V.Local.sSQL,True)

F.Data.DataTable.AddColumn("dtFill","HOURS_WORKED","float")
F.Data.DataTable.AddColumn("dtFill","FILL_NEEDED","float")
F.Data.DataTable.AddColumn("dtFill","PTO_TO_APPLY","float")
F.Data.DataTable.AddColumn("dtFill","CLOCK_IN","string")
F.Data.DataTable.AddColumn("dtFill","CLOCK_OUT","string")
F.Data.DataTable.AddColumn("dtFill","MULT_CLOCK","boolean",False)
F.Data.DataTable.AddColumn("dtFill","APPLY","boolean",False)

F.Intrinsic.Control.CallSub("workedHrs40")
F.Intrinsic.Control.CallSub("buildFill40")

Program.Sub.loadFill.End

Program.Sub.loadOthers.Start
'Loads the denied, employees, and employee master datatables.

F.Intrinsic.Control.If(V.DataTable.dtDenied.Exists)
	F.Data.DataTable.Close("dtDenied")
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.If(V.DataTable.dtEmployees.Exists)
	F.Data.DataTable.Close("dtEmployees")
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.If(V.DataTable.dtEmpMstr.Exists)
	F.Data.DataTable.Close("dtEmpMstr")
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.If(V.DataTable.dtSup.Exists)
	F.Data.DataTable.Close("dtSup")
F.Intrinsic.Control.EndIf

F.Data.DataTable.CreateFromSQL("dtDenied","con","SELECT * FROM ZZ_PTO_HR_DENIED;",True)
F.Data.DataTable.CreateFromSQL("dtEmployees","con","SELECT EMPLOYEE, AVAILABLE FROM ZZ_PTO_EMPLOYEES",True)
F.Data.DataTable.CreateFromSQL("dtEmpMstr","con","SELECT EMPLOYEE, DEPT_EMPLOYEE, SHIFT, NAME FROM EMPLOYEE_MSTR;",True)

F.Data.DataTable.AddColumn("dtDenied","APPLY","boolean",False)

F.Data.DataTable.CreateFromSQL("dtSup","con","SELECT * FROM ZZ_PTO_LOGIN;", True)

F.Intrinsic.Control.CallSub("buildDenGV")



Program.Sub.loadOthers.End

Program.Sub.buildAppGV.Start
'Builds the Approved Gridview formatting
V.Local.lRowCount.Declare
V.Local.lCount.Declare

F.Intrinsic.Control.If(V.DataView.dtApproved!dvApproved.Exists)
	F.Data.DataView.Close("dtApproved","dvApproved")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Try
	gui.frmApproved.gsgcApproved.ClearGrouping("gsgvApproved")
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.ClearErrors
F.Intrinsic.Control.EndTry

F.Data.DataView.Create("dtApproved","dvApproved")

gui.frmApproved.gsgcApproved.AddGridviewFromDataview("gsgvApproved","dtApproved","dvApproved")

'Uniqid is not necessary for HR to see, but is necessary to process as a key value
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","UNIQID","Visible",False)

gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","EMPLOYEE","caption","Employee")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","NAME","caption","Name")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","REQUEST_DATE","caption","Date")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","PTO_AMOUNT","caption","Req Amt")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","REASON","caption","Reason")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","FILL_TO_40","caption","Fill to 40")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","SUPERVSR","caption","Supervisor")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","EXCUSED","caption","Excused")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","AVAILABLE","caption","Available")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","HOURS_WORKED","caption","Hours Worked")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","FILL_NEEDED","caption","Fill Needed")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","PTO_TO_APPLY","caption","PTO to Apply")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","APPLY","caption","Apply Changes")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","EXPLANATION","caption","Explanation")

gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","REQUEST_DATE","DisplayCustomDateTime","d")

gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","EMPLOYEE","HeaderFontBold",True)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","NAME","HeaderFontBold",True)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","REQUEST_DATE","HeaderFontBold",True)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","PTO_AMOUNT","HeaderFontBold",True)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","REASON","HeaderFontBold",True)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","FILL_TO_40","HeaderFontBold",True)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","SUPERVSR","HeaderFontBold",True)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","EXCUSED","HeaderFontBold",True)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","AVAILABLE","HeaderFontBold",True)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","HOURS_WORKED","HeaderFontBold",True)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","FILL_NEEDED","HeaderFontBold",True)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","PTO_TO_APPLY","HeaderFontBold",True)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","APPLY","HeaderFontBold",True)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","EXPLANATION","HeaderFontBold",True)

gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","EMPLOYEE","HeaderHAlignment","Center")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","REQUEST_DATE","HeaderHAlignment","Center")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","PTO_AMOUNT","HeaderHAlignment","Center")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","REASON","HeaderHAlignment","Center")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","FILL_TO_40","HeaderHAlignment","Center")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","EXCUSED","HeaderHAlignment","Center")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","AVAILABLE","HeaderHAlignment","Center")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","HOURS_WORKED","HeaderHAlignment","Center")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","FILL_NEEDED","HeaderHAlignment","Center")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","PTO_TO_APPLY","HeaderHAlignment","Center")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","APPLY","HeaderHAlignment","Center")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","EXPLANATION","HeaderHAlignment","Center")

gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","EMPLOYEE","CellHAlignment","Center")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","REQUEST_DATE","CellHAlignment","Center")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","PTO_AMOUNT","CellHAlignment","Center")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","REASON","CellHAlignment","Center")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","FILL_TO_40","CellHAlignment","Center")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","EXCUSED","CellHAlignment","Center")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","AVAILABLE","CellHAlignment","Center")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","HOURS_WORKED","CellHAlignment","Center")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","FILL_NEEDED","CellHAlignment","Center")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","PTO_TO_APPLY","CellHAlignment","Center")
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","APPLY","CellHAlignment","Center")

gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","REASON","ReadOnly",False)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","EXCUSED","ReadOnly",False)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","PTO_TO_APPLY","ReadOnly",False)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","APPLY","ReadOnly",False)

gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","REASON","AllowEdit",True)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","EXCUSED","AllowEdit",True)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","PTO_TO_APPLY","AllowEdit",True)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","APPLY","AllowEdit",True)

gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","EMPLOYEE","width",50)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","NAME","width",125)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","REQUEST_DATE","width",75)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","PTO_AMOUNT","width",75)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","REASON","width",75)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","FILL_TO_40","width",75)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","SUPERVSR","width",125)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","EXCUSED","width",75)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","AVAILABLE","width",75)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","HOURS_WORKED","width",100)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","FILL_NEEDED","width",75)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","PTO_TO_APPLY","width",100)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","APPLY","width",100)
gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","EXPLANATION","width",175)

gui.frmApproved.gsgcApproved.SetColumnProperty("gsgvApproved","REASON","MaxLength",15)

gui.frmApproved.gsgcApproved.SetGridviewProperty("gsgvApproved",EnableAppearanceOddRow,True)
gui.frmApproved.gsgcApproved.SetGridviewProperty("gsgvApproved",AllowColumnResizing,False)
gui.frmApproved.gsgcApproved.SetGridviewProperty("gsgvApproved",OptionsViewColumnAutoWidth,False)

'Checks to see if any of the rows are fill to 40 requests. If they are, they turn blue.
V.Local.lRowCount.Set(V.DataTable.dtApproved.RowCount)
F.Intrinsic.Math.Sub(V.Local.lRowCount,1,V.Local.lRowCount)

F.Intrinsic.Control.For(V.Local.lCount,0,V.Local.lRowCount,1)

	F.Intrinsic.Control.If(V.DataTable.dtApproved(V.Local.lCount).FILL_TO_40!FieldVal)
	
		gui.frmApproved.gsgcApproved.SetRowAppearance("gsgvApproved",V.Local.lCount,"forecolor","blue")
		
		gui.frmApproved.gsgcApproved.SetCellProperty("gsgvApproved",13,V.Local.lCount,"Locked",True)
	
	F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Next(V.Local.lCount)

gui.frmApproved.gsgcApproved.MainView("gsgvApproved")

Program.Sub.buildAppGV.End

Program.Sub.buildDenGV.Start
'Builds the formatting for the Denied GSGV
F.Intrinsic.Control.If(V.DataView.dtDenied!dvDenied.Exists)
	F.Data.DataView.Close("dtDenied","dvDenied")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Try
	gui.frmDenied.gsgcDenied.ClearGrouping("gsgvDenied")
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.ClearErrors
F.Intrinsic.Control.EndTry

F.Data.DataView.Create("dtDenied","dvDenied")

gui.frmDenied.gsgcDenied.AddGridviewFromDataview("gsgvDenied","dtDenied","dvDenied")

gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","UNIQID","Visible",False)

gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","EMPLOYEE","caption","Employee")
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","NAME","caption","Name")
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","REQUEST_DATE","caption","Date")
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","PTO_AMOUNT","caption","Req Amt")
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","REASON","caption","Reason")
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","FILL_TO_40","caption","Fill to 40")
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","SUPERVSR","caption","Supervisor")
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","EXCUSED","caption","Excused")
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","AVAILABLE","caption","Available")
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","DENIAL_REASON","caption","Denial Reason")
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","EXPLANATION","caption","Explanation")

gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","REQUEST_DATE","DisplayCustomDateTime","d")

gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","EMPLOYEE","HeaderFontBold",True)
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","NAME","HeaderFontBold",True)
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","REQUEST_DATE","HeaderFontBold",True)
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","PTO_AMOUNT","HeaderFontBold",True)
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","REASON","HeaderFontBold",True)
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","FILL_TO_40","HeaderFontBold",True)
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","SUPERVSR","HeaderFontBold",True)
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","EXCUSED","HeaderFontBold",True)
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","AVAILABLE","HeaderFontBold",True)
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","DENIAL_REASON","HeaderFontBold",True)
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","EXPLANATION","HeaderFontBold",True)

gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","EMPLOYEE","HeaderHAlignment","Center")
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","REQUEST_DATE","HeaderHAlignment","Center")
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","PTO_AMOUNT","HeaderHAlignment","Center")
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","REASON","HeaderHAlignment","Center")
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","FILL_TO_40","HeaderHAlignment","Center")
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","EXCUSED","HeaderHAlignment","Center")
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","AVAILABLE","HeaderHAlignment","Center")
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","DENIAL_REASON","HeaderHAlignment","Center")
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","APPLY","HeaderHAlignment","Center")
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","EXPLANATION","HeaderHAlignment","Center")

gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","EMPLOYEE","CellHAlignment","Center")
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","REQUEST_DATE","CellHAlignment","Center")
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","PTO_AMOUNT","CellHAlignment","Center")
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","REASON","CellHAlignment","Center")
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","FILL_TO_40","CellHAlignment","Center")
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","EXCUSED","CellHAlignment","Center")
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","AVAILABLE","CellHAlignment","Center")
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","DENIAL_REASON","CellHAlignment","Center")

gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","EMPLOYEE","width",50)
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","NAME","width",125)
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","REQUEST_DATE","width",75)
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","PTO_AMOUNT","width",75)
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","REASON","width",75)
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","FILL_TO_40","width",75)
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","SUPERVSR","width",125)
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","EXCUSED","width",75)
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","AVAILABLE","width",75)
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","DENIAL_REASON","width",200)
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","EXPLANATION","width",175)

gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","APPLY","caption","Clear")
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","APPLY","HeaderFontBold",True)
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","APPLY","ReadOnly",False)
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","APPLY","AllowEdit",True)
gui.frmDenied.gsgcDenied.SetColumnProperty("gsgvDenied","APPLY","width",100)

gui.frmDenied.gsgcDenied.SetGridviewProperty("gsgvDenied",EnableAppearanceOddRow,True)
gui.frmDenied.gsgcDenied.SetGridviewProperty("gsgvDenied",AllowColumnResizing,False)
gui.frmDenied.gsgcDenied.SetGridviewProperty("gsgvDenied",OptionsViewColumnAutoWidth,False)

gui.frmDenied.gsgcDenied.MainView("gsgvDenied")


Program.Sub.buildDenGV.End

Program.Sub.buildFill40.Start
'Builds the formatting for the Fill to 40 GSGV
F.Intrinsic.Control.If(V.DataView.dtFill!dvFill40.Exists)
	F.Data.DataView.Close("dtFill","dvFill40")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Try
	gui.frm40Queue.gsgcFill.ClearGrouping("gsgvFill")
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.ClearErrors
F.Intrinsic.Control.EndTry

F.Data.DataView.Create("dtFill","dvFill40")
gui.frm40Queue.gsgcFill.AddGridviewFromDataview("gsgvFill","dtFill","dvFill40")
gui.frm40Queue.gsgcFill.MainView("gsgvFill")

gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","UNIQID","Visible",False)

gui.frm40Queue.gsgcFill.SetGridviewProperty("gsgvFill",Editable,True)
gui.frm40Queue.gsgcFill.SetGridviewProperty("gsgvFill","ColumnPanelRowHeight",30)
gui.frm40Queue.gsgcFill.SetGridviewProperty("gsgvFill","OptionsViewRowAutoHeight",True)
gui.frm40Queue.gsgcFill.SetGridviewProperty("gsgvFill","ReadOnly",False)
gui.frm40Queue.gsgcFill.SetGridviewProperty("gsgvFill","AllowSort",True)
gui.frm40Queue.gsgcFill.SetGridviewProperty("gsgvFill","AllowFilter",True)
gui.frm40Queue.gsgcFill.SetGridviewProperty("gsgvFill",EnableAppearanceOddRow,True)
gui.frm40Queue.gsgcFill.SetGridviewProperty("gsgvFill",AllowColumnResizing,False)
gui.frm40Queue.gsgcFill.SetGridviewProperty("gsgvFill",OptionsViewColumnAutoWidth,False)

gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","EMPLOYEE","caption","Employee")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","NAME","caption","Name")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","REQUEST_DATE","caption","Date")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","REASON","caption","Reason")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","SUPERVSR","caption","Supervisor")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","EXCUSED","caption","Excused")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","AVAILABLE","caption","Available")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","HOURS_WORKED","caption","Worked")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","APPLY","caption","Apply")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","FILL_NEEDED","caption","Fill Needed")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","PTO_TO_APPLY","caption","PTO to Apply")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","CLOCK_IN","caption","Clock In")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","CLOCK_OUT","caption","Clock Out")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","MULT_CLOCK","caption","Split Shift")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","EXPLANATION","caption","Explanation")

gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","REQUEST_DATE","DisplayCustomDateTime","d")

gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","EMPLOYEE","HeaderFontBold",True)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","NAME","HeaderFontBold",True)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","REQUEST_DATE","HeaderFontBold",True)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","REASON","HeaderFontBold",True)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","SUPERVSR","HeaderFontBold",True)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","EXCUSED","HeaderFontBold",True)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","AVAILABLE","HeaderFontBold",True)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","HOURS_WORKED","HeaderFontBold",True)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","APPLY","HeaderFontBold",True)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","FILL_NEEDED","HeaderFontBold",True)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","PTO_TO_APPLY","HeaderFontBold",True)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","CLOCK_IN","HeaderFontBold",True)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","CLOCK_OUT","HeaderFontBold",True)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","MULT_CLOCK","HeaderFontBold",True)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","EXPLANATION","HeaderFontBold",True)

gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","EMPLOYEE","HeaderHAlignment","Center")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","NAME","HeaderHAlignment","Center")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","REQUEST_DATE","HeaderHAlignment","Center")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","REASON","HeaderHAlignment","Center")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","SUPERVSR","HeaderHAlignment","Center")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","EXCUSED","HeaderHAlignment","Center")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","AVAILABLE","HeaderHAlignment","Center")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","HOURS_WORKED","HeaderHAlignment","Center")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","APPLY","HeaderHAlignment","Center")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","FILL_NEEDED","HeaderHAlignment","Center")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","PTO_TO_APPLY","HeaderHAlignment","Center")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","CLOCK_IN","HeaderHAlignment","Center")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","CLOCK_OUT","HeaderHAlignment","Center") 
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","MULT_CLOCK","HeaderHAlignment","Center")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","EXPLANATION","HeaderHAlignment","Center")

gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","EMPLOYEE","CellHAlignment","Center")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","NAME","CellHAlignment","Center")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","REQUEST_DATE","CellHAlignment","Center")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","REASON","CellHAlignment","Center")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","SUPERVSR","CellHAlignment","Center")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","EXCUSED","CellHAlignment","Center")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","AVAILABLE","CellHAlignment","Center")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","HOURS_WORKED","CellHAlignment","Center")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","APPLY","CellHAlignment","Center")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","FILL_NEEDED","CellHAlignment","Center")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","PTO_TO_APPLY","CellHAlignment","Center")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","CLOCK_IN","CellHAlignment","Center")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","CLOCK_OUT","CellHAlignment","Center")
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","MULT_CLOCK","CellHAlignment","Center")

gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","EMPLOYEE","width",50)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","NAME","width",125)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","REQUEST_DATE","width",75)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","REASON","width",75)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","SUPERVSR","width",125)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","EXCUSED","width",75)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","AVAILABLE","width",75)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","HOURS_WORKED","width",100)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","APPLY","width",100)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","FILL_NEEDED","width",75)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","PTO_TO_APPLY","width",100)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","CLOCK_IN","width",50)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","CLOCK_OUT","width",50)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","MULT_CLOCK","width",50)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","EXPLANATION","width",175)

gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","EMPLOYEE","AllowEdit",False)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","NAME","AllowEdit",False)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","REQUEST_DATE","AllowEdit",False)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","REASON","AllowEdit",False)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","SUPERVSR","AllowEdit",False)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","CLOCK_IN","AllowEdit",False)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","CLOCK_OUT","AllowEdit",False)
gui.frm40Queue.gsgcFill.SetColumnProperty("gsgvFill","MULT_CLOCK","AllowEdit",False)

Program.Sub.buildFill40.End

Program.Sub.cmdFill40_Click.Start
'Shows the fill to 40 screen and hides everything else
F.Intrinsic.Control.If(V.Global.bFill40Screen)
	gui.frmDenied..Visible(False)
	gui.frmApproved..Visible(False)
	gui.frm40Queue..Visible(True)
F.Intrinsic.Control.Else
	V.Global.bDenyScreen.Set(True)
	gui.frmDenied..Visible(False)
	gui.frmApproved..Visible(False)
	gui.frm40Queue..Show
F.Intrinsic.Control.EndIf

Program.Sub.cmdFill40_Click.End

Program.Sub.workedHrs40.Start
'Calculates the worked hours for employees to display on the Fill to 40 GSGV
V.Local.lRowCount.Declare
V.Local.dPTODate.Declare
V.Local.sDates.Declare
V.Local.dSunday.Declare
V.Local.lWkdayCount.Declare
V.Local.dCurDay.Declare
V.Local.sDay.Declare
V.Local.sMonth.Declare
V.Local.sYear.Declare
V.Local.sSQL.Declare
V.Local.lMLen.Declare
V.Local.lDLen.Declare
V.Local.sEmployee.Declare
V.Local.lCount.Declare
V.Local.lDayRowCt.Declare
V.Local.fHours.Declare
V.Local.fMinutes.Declare
V.Local.fFillHours.Declare
V.Local.sCriteria.Declare
V.Local.sRet.Declare
V.Local.fWorkedHours.Declare
V.Local.fWorkedMinutes.Declare
V.Local.sWorkedDay.Declare
V.Local.dHolidays.Declare
V.Local.lHolCount.Declare
V.Local.fHolHrs.Declare
V.Local.sHours.Declare
V.Local.sMinutes.Declare
V.Local.sTime.Declare

V.Local.lRowCount.Set(V.DataTable.dtFill.RowCount)
F.Intrinsic.Math.Sub(V.Local.lRowCount,1,V.Local.lRowCount)

F.Intrinsic.Control.If(V.Global.bLoading)
	gui.frmDenied..Visible(False)
	gui.frmApproved..Visible(False)
	gui.frm40Queue..Visible(False)
	gui.frmLoading..Visible(True)
F.Intrinsic.Control.Else
	V.Global.bLoading.Set(True)
	gui.frmDenied..Visible(False)
	gui.frmApproved..Visible(False)
	gui.frm40Queue..Visible(False)
	gui.frmLoading..Show
F.Intrinsic.Control.EndIf

'This is for error catching on the loading screen
F.Intrinsic.Control.If(V.Local.lRowCount,=,0)
	gui.frmLoading.prgLoading.Max(1)
F.Intrinsic.Control.ElseIf(V.Local.lRowCount,<,0)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.Else
	gui.frmLoading.prgLoading.Max(V.Local.lRowCount)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub("buildHoliday")
F.Intrinsic.Variable.ArgToVar("dHolidays",V.Local.dHolidays)

'For every row in the Approved table
F.Intrinsic.Control.For(V.Local.lCount,0,V.Local.lRowCount,1)

	V.Local.fHolHrs.Set(0)

	V.Local.fFillHours.Set(0)
	
	gui.frmLoading.prgLoading.Value(V.Local.lCount)
	
	V.Local.sDates.Set("")

	V.Local.dPTODate.Set(V.DataTable.dtFill(V.Local.lCount).REQUEST_DATE!FieldVal)
	V.Local.sEmployee.Set(V.DataTable.dtFill(V.Local.lCount).EMPLOYEE!FieldVal)
	
	F.Intrinsic.Control.If(V.DataTable.dtDates.Exists)
		F.Data.DataTable.Close("dtDates")
	F.Intrinsic.Control.EndIf
	
	' Finds the Sunday of the week so it can run through and find every date of the week for the table query
	' It adds every day to an array and then splits it out for ease of use in the criteria for the query
	F.Intrinsic.Date.BeginningOfWeek(V.Local.dPTODate,V.Local.dSunday)
	
	'Builds an array of the dates for the week of the PTO request date
	F.Intrinsic.Control.For(V.Local.lWkdayCount,1,7,1)
	
		F.Intrinsic.Date.DateAdd("d",V.Local.lWkdayCount,V.Local.dSunday,V.Local.dCurDay)
		
		F.Intrinsic.Control.For(V.Local.lHolCount,0,V.Local.dHolidays.UBound,1)
			
			F.Intrinsic.Control.If(V.Local.dHolidays(V.Local.lHolCount),=,V.Local.dCurDay)
				F.Intrinsic.Math.Add(V.Local.fHolHrs,8,V.Local.fHolHrs)
			F.Intrinsic.Control.EndIf
		
		F.Intrinsic.Control.Next(V.Local.lHolCount)
		
		F.Intrinsic.Date.Day(V.Local.dCurDay,V.Local.sDay)
		F.Intrinsic.String.Len(V.Local.sDay,V.Local.lDLen)
		F.Intrinsic.Control.If(V.Local.lDLen,"=",1)
			F.Intrinsic.String.Build("0{0}",V.Local.sDay,V.Local.sDay)
		F.Intrinsic.Control.EndIf
		F.Intrinsic.Date.Month(V.Local.dCurDay,V.Local.sMonth)
		F.Intrinsic.String.Len(V.Local.sMonth,V.Local.lMLen)
		F.Intrinsic.Control.If(V.Local.lMLen,"=",1)
			F.Intrinsic.String.Build("0{0}",V.Local.sMonth,V.Local.sMonth)
		F.Intrinsic.Control.EndIf
		F.Intrinsic.Date.Year(V.Local.dCurDay,V.Local.sYear)
		
		F.Intrinsic.Control.If(V.Local.sDates,"=","")
			F.Intrinsic.String.Build("{0}{1}{2}",V.Local.sYear,V.Local.sMonth,V.Local.sDay,V.Local.sDates)
		F.Intrinsic.Control.Else
			F.Intrinsic.String.Build("{0}*!*{1}{2}{3}",V.Local.sDates,V.Local.sYear,V.Local.sMonth,V.Local.sDay,V.Local.sDates)
		F.Intrinsic.Control.EndIf
		
	F.Intrinsic.Control.Next(V.Local.lWkdayCount)

	F.Intrinsic.String.Split(V.Local.sDates,"*!*",V.Local.sDates)

	' Builds datatable for the week of the request
	F.Intrinsic.String.Build("SELECT EMPLOYEE, DATE_IN, TIME_IN, DATE_OUT, TIME_OUT, HOURS_HH, HOURS_MM FROM TIME_ATTENDANCE WHERE DATE_IN = '{0}' AND EMPLOYEE = '{7}' OR DATE_IN = '{1}' AND EMPLOYEE = '{7}' OR DATE_IN = '{2}' AND EMPLOYEE = '{7}' OR DATE_IN = '{3}' AND EMPLOYEE = '{7}' OR DATE_IN = '{4}' AND EMPLOYEE = '{7}' OR DATE_IN = '{5}' AND EMPLOYEE = '{7}' OR DATE_IN = '{6}' AND EMPLOYEE = '{7}'",V.Local.sDates(0),V.Local.sDates(1),V.Local.sDates(2),V.Local.sDates(3),V.Local.sDates(4),V.Local.sDates(5),V.Local.sDates(6),V.Local.sEmployee,V.Local.sSQL)
	
	F.Data.DataTable.CreateFromSQL("dtDates","con",V.Local.sSQL,True)
	
	' This is used to see if the employee has worked on the requested day, and if so, how much?
	F.Intrinsic.Date.Day(V.Local.dPTODate,V.Local.sDay)
	F.Intrinsic.String.Len(V.Local.sDay,V.Local.lDLen)
	F.Intrinsic.Control.If(V.Local.lDLen,"=",1)
		F.Intrinsic.String.Build("0{0}",V.Local.sDay,V.Local.sDay)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Date.Month(V.Local.dPTODate,V.Local.sMonth)
	F.Intrinsic.String.Len(V.Local.sMonth,V.Local.lMLen)
	F.Intrinsic.Control.If(V.Local.lMLen,"=",1)
		F.Intrinsic.String.Build("0{0}",V.Local.sMonth,V.Local.sMonth)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Date.Year(V.Local.dPTODate,V.Local.sYear)
	
	F.Intrinsic.String.Build("{0}{1}{2}",V.Local.sYear,V.Local.sMonth,V.Local.sDay,V.Local.sWorkedDay)
	
	'Searches Time and Attendance for the worked date
	F.Intrinsic.String.Build("DATE_IN = '{0}'",V.Local.sWorkedDay,V.Local.sCriteria)
	F.Data.DataTable.Select("dtDates",V.Local.sCriteria,V.Local.sRet)
	F.Intrinsic.Control.If(V.Local.sRet,"<>","***NORETURN***")
		
		F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
		
		V.Local.fWorkedHours.Set(V.DataTable.dtDates(V.Local.sRet(0)).HOURS_HH!FieldVal)
		V.Local.fWorkedMinutes.Set(V.DataTable.dtDates(V.Local.sRet(0)).HOURS_MM!FieldVal)
		
		'Formats the Time In and Time Out to display on the Fill to 40 GSGV 
		F.Intrinsic.String.Left(V.DataTable.dtDates(V.Local.sRet(0)).TIME_IN!FieldVal,2,V.Local.sHours)
		F.Intrinsic.String.Mid(V.DataTable.dtDates(V.Local.sRet(0)).TIME_IN!FieldVal,3,2,V.Local.sMinutes)
		F.Intrinsic.String.Build("{0}:{1}",V.Local.sHours,V.Local.sMinutes,V.Local.sTime)
		F.Data.DataTable.SetValue("dtFill",V.Local.lCount,"CLOCK_IN",V.Local.sTime)
		
		F.Intrinsic.String.Left(V.DataTable.dtDates(V.Local.sRet(0)).TIME_OUT!FieldVal,2,V.Local.sHours)
		F.Intrinsic.String.Mid(V.DataTable.dtDates(V.Local.sRet(0)).TIME_OUT!FieldVal,3,2,V.Local.sMinutes)
		F.Intrinsic.String.Build("{0}:{1}",V.Local.sHours,V.Local.sMinutes,V.Local.sTime)
		F.Data.DataTable.SetValue("dtFill",V.Local.lCount,"CLOCK_OUT",V.Local.sTime)
		
		'Calculates the hours/minutes into an hour with decimal amount to match normal formatting
		F.Intrinsic.Math.Sub(V.Local.fWorkedMinutes,30,V.Local.fWorkedMinutes)
		F.Intrinsic.Math.Div(V.Local.fWorkedMinutes,60,V.Local.fWorkedMinutes)
		F.Intrinsic.Math.Round(V.Local.fWorkedMinutes,2,V.Local.fWorkedMinutes)
		F.Intrinsic.Math.Add(V.Local.fWorkedMinutes,V.Local.fWorkedHours,V.Local.fWorkedHours)
		
		F.Intrinsic.Control.If(V.Local.fWorkedHours,<=,0)
			V.Local.fWorkedHours.Set(0)
		F.Intrinsic.Control.EndIf
		
		F.Data.DataTable.SetValue("dtFill",V.Local.lCount,"HOURS_WORKED",V.Local.fWorkedHours)
		
		F.Intrinsic.Control.If(V.Local.sRet(1),<>,"OOB")
			F.Data.DataTable.SetValue("dtFill",V.Local.lCount,"MULT_CLOCK",1)
		F.Intrinsic.Control.EndIf
		
	F.Intrinsic.Control.EndIf

	V.Local.lDayRowCt.Set(V.DataTable.dtDates.RowCount)
	F.Intrinsic.Math.Sub(V.Local.lDayRowCt,1,V.Local.lDayRowCt)
	
	V.Local.fHours.Set(0)
	
	'For each day in the week of the PTO request, adds together the hours worked for a total week's worked hours to help calculate fill amount needed
	F.Intrinsic.Control.For(V.Local.lWkdayCount,0,V.Local.lDayRowCt,1)
	
		F.Intrinsic.Math.Add(V.Local.fHours,V.DataTable.dtDates(V.Local.lwkdayCount).HOURS_HH!FieldVal,V.Local.fHours)
		F.Intrinsic.Math.Add(V.Local.fMinutes,V.DataTable.dtDates(V.Local.lwkdayCount).HOURS_MM!FieldVal,V.Local.fMinutes)
		
		F.Intrinsic.Control.If(V.DataTable.dtDates(V.Local.lWkdayCount).HOURS_HH!FieldVal,>=,4)
			F.Intrinsic.Math.Sub(V.Local.fMinutes,30,V.Local.fMinutes)
		F.Intrinsic.Control.EndIf	
	
	F.Intrinsic.Control.Next(V.Local.lWkdayCount)
	
	F.Intrinsic.Math.Div(V.Local.fMinutes,60,V.Local.fMinutes)
	F.Intrinsic.Math.Round(V.Local.fMinutes,2,V.Local.fMinutes)
	F.Intrinsic.Math.Add(V.Local.fMinutes,V.Local.fHours,V.Local.fHours)
	
	F.Intrinsic.Math.Sub(V.Local.fHours,40,V.Local.fFillHours)
	F.Intrinsic.Math.Add(V.Local.fFillHours,V.Local.fHolHrs,V.Local.fFillHours)
	F.Intrinsic.Math.Mult(V.Local.fFillHours,-1,V.Local.fFillHours)

	F.Data.DataTable.SetValue("dtFill",V.Local.lCount,"PTO_TO_APPLY",0)
	F.Data.DataTable.SetValue("dtFill",V.Local.lCount,"FILL_NEEDED",V.Local.fFillHours)
	
F.Intrinsic.Control.Next(V.Local.lCount)

gui.frmLoading..Visible(False)

Program.Sub.workedHrs40.End

Program.Sub.workedHrs.Start
' This sub calculates the worked hours for the Approved GSGC.
V.Local.lRowCount.Declare
V.Local.dPTODate.Declare
V.Local.sDates.Declare
V.Local.dSunday.Declare
V.Local.lWkdayCount.Declare
V.Local.dCurDay.Declare
V.Local.sDay.Declare
V.Local.sMonth.Declare
V.Local.sYear.Declare
V.Local.sSQL.Declare
V.Local.lMLen.Declare
V.Local.lDLen.Declare
V.Local.sEmployee.Declare
V.Local.lCount.Declare
V.Local.lDayRowCt.Declare
V.Local.fHours.Declare
V.Local.fMinutes.Declare
V.Local.fFillHours.Declare
V.Local.sCriteria.Declare
V.Local.sRet.Declare
V.Local.fWorkedHours.Declare
V.Local.fWorkedMinutes.Declare
V.Local.sWorkedDay.Declare
V.Local.dHolidays.Declare
V.Local.lHolCount.Declare
V.Local.fHolHours.Declare
V.Local.lWorkedShifts.Declare

'For each row in the approved datatable
V.Local.lRowCount.Set(V.DataTable.dtApproved.RowCount)
F.Intrinsic.Math.Sub(V.Local.lRowCount,1,V.Local.lRowCount)

F.Intrinsic.Control.If(V.Global.bLoading)
	gui.frmDenied..Visible(False)
	gui.frmApproved..Visible(False)
	gui.frm40Queue..Visible(False)
	gui.frmLoading..Visible(True)
F.Intrinsic.Control.Else
	V.Global.bLoading.Set(True)
	gui.frmDenied..Visible(False)
	gui.frmApproved..Visible(False)
	gui.frm40Queue..Visible(False)
	gui.frmLoading..Show
F.Intrinsic.Control.EndIf

'Sets the bar appropriately if there are barely any rows or none.
F.Intrinsic.Control.If(V.Local.lRowCount,=,0)
	gui.frmLoading.prgLoading.Max(1)
F.Intrinsic.Control.ElseIf(V.Local.lRowCount,<,0)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.Else
	gui.frmLoading.prgLoading.Max(V.Local.lRowCount)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub("buildHoliday")
F.Intrinsic.Variable.ArgToVar("dHolidays",V.Local.dHolidays)

' For every row in the Approved table
F.Intrinsic.Control.For(V.Local.lCount,0,V.Local.lRowCount,1)

	V.Local.fHolHours.Set(0)

	V.Local.fFillHours.Set(0)
	
	gui.frmLoading.prgLoading.Value(V.Local.lCount)
	
	V.Local.sDates.Set("")

	V.Local.dPTODate.Set(V.DataTable.dtApproved(V.Local.lCount).REQUEST_DATE!FieldVal)
	V.Local.sEmployee.Set(V.DataTable.dtApproved(V.Local.lCount).EMPLOYEE!FieldVal)
	
	F.Intrinsic.Control.If(V.DataTable.dtDates.Exists)
		F.Data.DataTable.Close("dtDates")
	F.Intrinsic.Control.EndIf
	
	' Finds the Sunday of the week so it can run through and find every date of the week for the table query
	' It adds every day to an array and then splits it out for ease of use in the criteria for the query
	F.Intrinsic.Date.BeginningOfWeek(V.Local.dPTODate,V.Local.dSunday)
	
	F.Intrinsic.Control.For(V.Local.lWkdayCount,1,7,1)
	
		F.Intrinsic.Date.DateAdd("d",V.Local.lWkdayCount,V.Local.dSunday,V.Local.dCurDay)
		
		F.Intrinsic.Control.For(V.Local.lHolCount,0,V.Local.dHolidays.UBound,1)
			
			F.Intrinsic.Control.If(V.Local.dHolidays(V.Local.lHolCount),=,V.Local.dCurDay)
				F.Intrinsic.Math.Add(V.Local.fHolHours,8,V.Local.fHolHours)
			F.Intrinsic.Control.EndIf
		
		F.Intrinsic.Control.Next(V.Local.lHolCount)
		
		F.Intrinsic.Date.Day(V.Local.dCurDay,V.Local.sDay)
		F.Intrinsic.String.Len(V.Local.sDay,V.Local.lDLen)
		F.Intrinsic.Control.If(V.Local.lDLen,"=",1)
			F.Intrinsic.String.Build("0{0}",V.Local.sDay,V.Local.sDay)
		F.Intrinsic.Control.EndIf
		F.Intrinsic.Date.Month(V.Local.dCurDay,V.Local.sMonth)
		F.Intrinsic.String.Len(V.Local.sMonth,V.Local.lMLen)
		F.Intrinsic.Control.If(V.Local.lMLen,"=",1)
			F.Intrinsic.String.Build("0{0}",V.Local.sMonth,V.Local.sMonth)
		F.Intrinsic.Control.EndIf
		F.Intrinsic.Date.Year(V.Local.dCurDay,V.Local.sYear)
		
		F.Intrinsic.Control.If(V.Local.sDates,"=","")
			F.Intrinsic.String.Build("{0}{1}{2}",V.Local.sYear,V.Local.sMonth,V.Local.sDay,V.Local.sDates)
		F.Intrinsic.Control.Else
			F.Intrinsic.String.Build("{0}*!*{1}{2}{3}",V.Local.sDates,V.Local.sYear,V.Local.sMonth,V.Local.sDay,V.Local.sDates)
		F.Intrinsic.Control.EndIf
		
	F.Intrinsic.Control.Next(V.Local.lWkdayCount)
	
	F.Intrinsic.String.Split(V.Local.sDates,"*!*",V.Local.sDates)

	' Builds datatable for the week of the request
	F.Intrinsic.String.Build("SELECT EMPLOYEE, DATE_IN, TIME_IN, DATE_OUT, TIME_OUT, HOURS_HH, HOURS_MM FROM TIME_ATTENDANCE WHERE DATE_IN = '{0}' AND EMPLOYEE = '{7}' OR DATE_IN = '{1}' AND EMPLOYEE = '{7}' OR DATE_IN = '{2}' AND EMPLOYEE = '{7}' OR DATE_IN = '{3}' AND EMPLOYEE = '{7}' OR DATE_IN = '{4}' AND EMPLOYEE = '{7}' OR DATE_IN = '{5}' AND EMPLOYEE = '{7}' OR DATE_IN = '{6}' AND EMPLOYEE = '{7}'",V.Local.sDates(0),V.Local.sDates(1),V.Local.sDates(2),V.Local.sDates(3),V.Local.sDates(4),V.Local.sDates(5),V.Local.sDates(6),V.Local.sEmployee,V.Local.sSQL)
	
	F.Data.DataTable.CreateFromSQL("dtDates","con",V.Local.sSQL,True)
	
	' This is used to see if the employee has worked on the requested day, and if so, how much?
	F.Intrinsic.Date.Day(V.Local.dPTODate,V.Local.sDay)
	F.Intrinsic.String.Len(V.Local.sDay,V.Local.lDLen)
	F.Intrinsic.Control.If(V.Local.lDLen,"=",1)
		F.Intrinsic.String.Build("0{0}",V.Local.sDay,V.Local.sDay)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Date.Month(V.Local.dPTODate,V.Local.sMonth)
	F.Intrinsic.String.Len(V.Local.sMonth,V.Local.lMLen)
	F.Intrinsic.Control.If(V.Local.lMLen,"=",1)
		F.Intrinsic.String.Build("0{0}",V.Local.sMonth,V.Local.sMonth)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Date.Year(V.Local.dPTODate,V.Local.sYear)
	
	F.Intrinsic.String.Build("{0}{1}{2}",V.Local.sYear,V.Local.sMonth,V.Local.sDay,V.Local.sWorkedDay)
	
	F.Intrinsic.String.Build("DATE_IN = '{0}'",V.Local.sWorkedDay,V.Local.sCriteria)
	F.Data.DataTable.Select("dtDates",V.Local.sCriteria,V.Local.sRet)
	F.Intrinsic.Control.If(V.Local.sRet,"<>","***NORETURN***")
		
		F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
		
		V.Local.fWorkedHours.Set(0)
		
		F.Intrinsic.Control.For(V.Local.lWorkedShifts,0,V.Local.sRet.UBound,1)
		
			F.Intrinsic.Math.Add(V.Local.fWorkedHours,V.DataTable.dtDates(V.Local.sRet(V.Local.lWorkedShifts)).HOURS_HH!FieldVal,V.Local.fWorkedHours)
			V.Local.fWorkedMinutes.Set(V.DataTable.dtDates(V.Local.sRet(V.Local.lWorkedShifts)).HOURS_MM!FieldVal)
			
			F.Intrinsic.Math.Sub(V.Local.fWorkedMinutes,30,V.Local.fWorkedMinutes)
			F.Intrinsic.Math.Div(V.Local.fWorkedMinutes,60,V.Local.fWorkedMinutes)
			F.Intrinsic.Math.Round(V.Local.fWorkedMinutes,2,V.Local.fWorkedMinutes)
			F.Intrinsic.Math.Add(V.Local.fWorkedMinutes,V.Local.fWorkedHours,V.Local.fWorkedHours)
			
			F.Intrinsic.Control.If(V.Local.fWorkedHours,<,0)
				V.Local.fWorkedHours.Set(0)
			F.Intrinsic.Control.EndIf
		
		F.Intrinsic.Control.Next(V.Local.lWorkedShifts)
		
		F.Data.DataTable.SetValue("dtApproved",V.Local.lCount,"HOURS_WORKED",V.Local.fWorkedHours)
		
	F.Intrinsic.Control.EndIf
	
	' Finds the amount of hours worked in the week to determine how much needs to be filled if FILL_TO_40 is checked.
	
	F.Intrinsic.Control.If(V.DataTable.dtApproved(V.Local.lCount).FILL_TO_40!FieldVal)
	
		V.Local.lDayRowCt.Set(V.DataTable.dtDates.RowCount)
		F.Intrinsic.Math.Sub(V.Local.lDayRowCt,1,V.Local.lDayRowCt)
		
		V.Local.fHours.Set(0)
		
		F.Intrinsic.Control.For(V.Local.lWkdayCount,0,V.Local.lDayRowCt,1)
		
			F.Intrinsic.Math.Add(V.Local.fHours,V.DataTable.dtDates(V.Local.lWkdayCount).HOURS_HH!FieldVal,V.Local.fHours)
			F.Intrinsic.Math.Add(V.Local.fMinutes,V.DataTable.dtDates(V.Local.lWkdayCount).HOURS_MM!FieldVal,V.Local.fMinutes)
			
			F.Intrinsic.Control.If(V.DataTable.dtDates(V.Local.lWkdayCount).HOURS_HH!FieldVal,>=,4)
				F.Intrinsic.Math.Sub(V.Local.fMinutes,30,V.Local.fMinutes)
			F.Intrinsic.Control.EndIf
		
		F.Intrinsic.Control.Next(V.Local.lWkdayCount)
		
		F.Intrinsic.Math.Div(V.Local.fMinutes,60,V.Local.fMinutes)
		F.Intrinsic.Math.Round(V.Local.fMinutes,2,V.Local.fMinutes)
		F.Intrinsic.Math.Add(V.Local.fMinutes,V.Local.fHours,V.Local.fHours)
		
		F.Intrinsic.Math.Sub(V.Local.fHours,40,V.Local.fFillHours)
		F.Intrinsic.Math.Add(V.Local.fFillHours,V.Local.fHolHours,V.Local.fFillHours)
		F.Intrinsic.Math.Mult(V.Local.fFillHours,-1,V.Local.fFillHours)
	
		F.Data.DataTable.SetValue("dtApproved",V.Local.lCount,"PTO_TO_APPLY",0)
		F.Data.DataTable.SetValue("dtApproved",V.Local.lCount,"FILL_NEEDED",V.Local.fFillHours)
		F.Data.DataTable.SetValue("dtApproved",V.Local.lCount,"PTO_AMOUNT",V.Local.fFillHours)
	
	F.Intrinsic.Control.Else
		
		F.Data.DataTable.SetValue("dtApproved",V.Local.lCount,"PTO_TO_APPLY",V.DataTable.dtApproved(V.Local.lCount).PTO_AMOUNT!FieldVal)
	
	F.Intrinsic.Control.EndIf
	
	
F.Intrinsic.Control.Next(V.Local.lCount)

gui.frmLoading..Visible(False)

Program.Sub.workedHrs.End

Program.Sub.cmdSave_Click.Start
V.Local.lRowCount.Declare
V.Local.lCount.Declare
V.Local.sSQL.Declare
V.Local.sCriteria.Declare
V.Local.sRet.Declare
V.Local.fNewHours.Declare
V.Local.sYear.Declare
V.Local.sMonth.Declare
V.Local.sDay.Declare
V.Local.lMLen.Declare
V.Local.lDLen.Declare
V.Local.sDate.Declare
V.Local.lExcused.Declare
V.Local.lPTOAmt.Declare
V.Local.sReason.Declare
V.Local.sTADate.Declare
V.Local.bSkip.Declare
V.Local.sInsTADate.Declare
V.Local.bFuneral.Declare

' This is the save button script for the Approved Gridcontrol Screen

'Closes the filtered datatable if it exists
F.Intrinsic.Control.If(V.DataTable.dtFiltered.Exists)
	F.Data.DataView.Close("dtFiltered","dvFiltered")
	F.Data.DataTable.Close("dtFiltered")
F.Intrinsic.Control.EndIf

'Sets a filter on the dataview and then creates a new table from it.	
F.Data.DataView.SetFilter("dtApproved ","dvApproved","APPLY = TRUE")
F.Data.DataView.ToDataTable("dtApproved","dvApproved","dtFiltered",True)

F.Data.DataView.Create("dtFiltered","dvFiltered")

F.Intrinsic.Control.Try
	gui.frmAPproved.gsgcApproved.ClearGrouping("gsgvApproved")
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.ClearErrors
F.Intrinsic.Control.EndTry

gui.frmApproved.gsgcApproved.AddGridviewFromDataview("gsgvApproved","dtFiltered","dvFiltered")

'For each row in the dtApproved datatable/gridview that is selected to apply changes
V.Local.lRowCount.Set(V.DataTable.dtFiltered.RowCount)
F.Intrinsic.Math.Sub(V.Local.lRowCount,1,V.Local.lRowCount)

F.Intrinsic.Control.If(V.Local.lRowCount,<=,-1)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.For(V.Local.lCount,0,V.Local.lRowCount,1)

	'Converts the excused boolean to binary because of how pervasive needs it in the database query
	F.Intrinsic.Control.If(gui.frmApproved.gsgcApproved.GetCellValue("gsgvApproved",8,V.Local.lCount))
		V.Local.lExcused.Set(1)
	F.Intrinsic.Control.Else
		V.Local.lExcused.Set(0)
	F.Intrinsic.Control.EndIf
	
	'Formats the date for the database query
	F.Intrinsic.Date.Year(V.DataTable.dtFiltered(V.Local.lCount).REQUEST_DATE!FieldVal,V.Local.sYear)
	F.Intrinsic.Date.Month(V.DataTable.dtFiltered(V.Local.lCount).REQUEST_DATE!FieldVal,V.Local.sMonth)
	F.Intrinsic.Date.Day(V.DataTable.dtFiltered(V.Local.lCount).REQUEST_DATE!FieldVal,V.Local.sDay)
	
	F.Intrinsic.String.Len(V.Local.sMonth,V.Local.lMLen)
	F.Intrinsic.String.Len(V.Local.sDay,V.Local.lDLen)
	F.Intrinsic.Control.If(V.Local.lMLen,"=",1)
		F.Intrinsic.String.Build("0{0}",V.Local.sMonth,V.Local.sMonth)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.If(V.Local.lDLen,"=",1)
		F.Intrinsic.String.Build("0{0}",V.Local.sDay,V.Local.sDay)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.String.Build("{0}-{1}-{2}",V.Local.sYear,V.Local.sMonth,V.Local.sDay,V.Local.sDate)
	
	
	'Checks if the applied date is a fill to 40 selection. If it is,
	F.Intrinsic.Control.If(V.DataTable.dtFiltered(V.Local.lCount).FILL_TO_40!FieldVal)
		
		'Builds and executes the query to ZZ_PTO_FILL to be reviewed later when it comes to the current week.
		F.Intrinsic.String.Build("INSERT INTO ZZ_PTO_FILL (UNIQID, EMPLOYEE, NAME, REQUEST_DATE, REASON, SUPERVSR, EXCUSED, AVAILABLE) VALUES ('{0}', '{1}', '{2}', '{3}', '{4}', '{5}', '{6}', '{7}');",V.DataTable.dtFiltered(V.Local.lCount).UNIQID!FieldVal,V.DataTable.dtFiltered(V.Local.lCount).EMPLOYEE!FieldVal,V.DataTable.dtFiltered(V.Local.lCount).NAME!FieldVal,V.Local.sDate,gui.frmApproved.gsgcApproved.GetCellValue("gsgvApproved",5,V.Local.lCount),gui.frmApproved.gsgcApproved.GetCellValue("gsgvApproved",7,V.Local.lCount),V.Local.lExcused,gui.frmApproved.gsgcApproved.GetCellValue("gsgvApproved",9,V.Local.lCount),V.Local.sSQL)
		
		F.ODBC.Connection!con.Execute(V.Local.sSQL)
		
		'Builds and executes the query to ZZ_PTO_CONFIRMED to be used in the schedule matrix.
		F.Intrinsic.String.Build("INSERT INTO ZZ_PTO_CONFIRMED (UNIQID, EMPLOYEE, NAME, REQUEST_DATE, PTO_AMOUNT, REASON, FILL_TO_40, SUPERVSR, EXCUSED, EXPLANATION) VALUES ('{0}', '{1}', '{2}', '{3}', '{4}', '{5}', '{6}', '{7}', '{8}', '{9}');",V.DataTable.dtFiltered(V.Local.lCount).UNIQID!FieldVal,V.DataTable.dtFiltered(V.Local.lCount).EMPLOYEE!FieldVal,V.DataTable.dtFiltered(V.Local.lCount).NAME!FieldVal,V.Local.sDate,gui.frmApproved.gsgcApproved.GetCellValue("gsgvApproved",13,V.Local.lCount),gui.frmApproved.gsgcApproved.GetCellValue("gsgvApproved",5,V.Local.lCount),1,gui.frmApproved.gsgcApproved.GetCellValue("gsgvApproved",7,V.Local.lCount),V.Local.lExcused,V.DataTable.dtFiltered(V.Local.lCount).EXPLANATION!FieldVal,V.Local.sSQL)
		
		F.ODBC.Connection!con.Execute(V.Local.sSQL)
	
	'Otherwise if it isn't fill to 40,
	F.Intrinsic.Control.Else
	
		F.Intrinsic.Control.CallSub("TAUpdate","lCount",V.Local.lCount)
		
		F.Intrinsic.Variable.ArgToVar("bSkip",V.Local.bSkip)
		F.Intrinsic.Variable.ArgToVar("bFuneral",V.Local.bFuneral)
		
		F.Intrinsic.Control.If(V.Local.bSkip)
		
			F.Intrinsic.UI.Msgbox("Skipping record!","Skipping")
			F.Intrinsic.Control.If(V.Local.lCount,=,V.Local.lRowCount)
				F.Intrinsic.Control.ExitFor(V.Local.lCount)
			F.Intrinsic.Control.Else
				F.Intrinsic.Control.Next(V.Local.lCount)
			F.Intrinsic.Control.EndIf
			
		F.Intrinsic.Control.Else
		
			F.Intrinsic.Control.If(V.Local.bFuneral)
			
			F.Intrinsic.Control.Else
			
				'Find the employee in the employees table to access their current PTO amount
				F.Intrinsic.String.Build("EMPLOYEE = '{0}'",V.DataTable.dtFiltered(V.Local.lCount).EMPLOYEE!FieldVal,V.Local.sCriteria)
				F.Data.DataTable.Select("dtEmployees",V.Local.sCriteria,V.Local.sRet)
				
				'Takes their currently available PTO, subtracts it by the confirmed and scheduled amount, and then puts it back into the employee table.
				F.Intrinsic.Control.If(V.Local.sRet,"<>","***NORETURN***")
					F.Intrinsic.Math.Sub(V.DataTable.dtEmployees(V.Local.sRet).AVAILABLE!FieldVal,gui.frmApproved.gsgcApproved.GetCellValue("gsgvApproved",13,V.Local.lCount),V.Local.fNewHours)
					
					F.Intrinsic.String.Build("UPDATE ZZ_PTO_EMPLOYEES SET AVAILABLE = '{0}' WHERE EMPLOYEE = '{1}'",V.Local.fNewHours,V.DataTable.dtFiltered(V.Local.lCount).EMPLOYEE!FieldVal,V.Local.sSQL)
					F.ODBC.Connection!con.Execute(V.Local.sSQL)
					
					F.Data.DataTable.SetValue("dtEmployees",V.Local.sRet,"AVAILABLE",V.Local.fNewHours)
				F.Intrinsic.Control.Else
					F.Intrinsic.UI.Msgbox("There was an error updating the Available PTO on the Employees table. Please contact IT and make sure to note down the information you were trying to apply. ERR101")
				F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Control.EndIf
			
			'Builds and executes the query to ZZ_PTO_CONFIRMED to be used in the schedule matrix
			F.Intrinsic.String.Build("INSERT INTO ZZ_PTO_CONFIRMED (UNIQID, EMPLOYEE, NAME, REQUEST_DATE, PTO_AMOUNT, REASON, FILL_TO_40, SUPERVSR, EXCUSED, EXPLANATION) VALUES ('{0}', '{1}', '{2}', '{3}', '{4}', '{5}', '{6}', '{7}', '{8}', '{9}');",V.DataTable.dtFiltered(V.Local.lCount).UNIQID!FieldVal,V.DataTable.dtFiltered(V.Local.lCount).EMPLOYEE!FieldVal,V.DataTable.dtFiltered(V.Local.lCount).NAME!FieldVal,V.Local.sDate,gui.frmApproved.gsgcApproved.GetCellValue("gsgvApproved",13,V.Local.lCount),gui.frmApproved.gsgcApproved.GetCellValue("gsgvApproved",5,V.Local.lCount),0,gui.frmApproved.gsgcApproved.GetCellValue("gsgvApproved",7,V.Local.lCount),V.Local.lExcused,V.DataTable.dtFiltered(V.Local.lCount).EXPLANATION!FieldVal,V.Local.sSQL)

			F.ODBC.Connection!con.Execute(V.Local.sSQL)
		
		F.Intrinsic.Control.EndIf
		
	F.Intrinsic.Control.EndIf
	
	'Updates this history table with the most recent information
	F.Intrinsic.String.Build("UPDATE ZZ_PTO_HISTORY SET PTO_AMOUNT = '{0}', REASON = '{1}', EXCUSED = '{2}' WHERE UNIQID = '{3}';",gui.frmApproved.gsgcApproved.GetCellValue("gsgvApproved",13,V.Local.lCount),gui.frmApproved.gsgcApproved.GetCellValue("gsgvApproved",5,V.Local.lCount),V.Local.lExcused,V.DataTable.dtFiltered(V.Local.lCount).UNIQID!FieldVal,V.Local.sSQL)
	F.ODBC.Connection!con.Execute(V.Local.sSQL)
	
	'Deletes from the approved table
	F.Intrinsic.String.Build("DELETE FROM ZZ_PTO_HR_APPROVED WHERE UNIQID = '{0}'",V.DataTable.dtFiltered(V.Local.lCount).UNIQID!FieldVal,V.Local.sSQL)
		
	F.ODBC.Connection!con.Execute(V.Local.sSQL)
	
F.Intrinsic.Control.Next(V.Local.lCount)

'Reloads all tables and screens
F.Intrinsic.Control.CallSub("loadDT")

Program.Sub.cmdSave_Click.End

Program.Sub.TAUpdate.Start
'This sub takes care of inserting a new record into the time and attendance table so that the PTO actually gets tracked in payroll.
V.Local.sSQL.Declare
V.Local.lCount.Declare
V.Local.bSkip.Declare
V.Local.sTADate.Declare
V.Local.sYear.Declare
V.Local.sMonth.Declare
V.Local.sDay.Declare
V.Local.dTAOut.Declare
V.Local.lTAOutHr.Declare
V.Local.lPTOInHr.Declare
V.Local.lFloorHr.Declare
V.Local.fModMin.Declare
V.Local.lOutHr.Declare
V.Local.lOutMin.Declare
V.Local.sOutHr.Declare
V.Local.sOutMin.Declare
V.Local.fFloorMin.Declare
V.Local.sTimeOut.Declare
V.Local.sPTOInHr.Declare
V.Local.sPTOInMin.Declare
V.Local.lPTOInMin.Declare
V.Local.sTimeIn.Declare
V.Local.sRetVar.Declare
V.Local.sWarn.Declare
V.Local.sCrit.Declare
V.Local.sReturn.Declare
V.Local.sChgDate.Declare
V.Local.sChgTime.Declare
V.Local.sHour.Declare
V.Local.sMinute.Declare
V.Local.lHLen.Declare
V.Local.lDLen.Declare
V.Local.lMLen.Declare
V.Local.sRetTime.Declare
V.Local.sRetReg.Declare
V.Local.bTimeForm.Declare
V.Local.sInsTADate.Declare
V.Local.sExcused.Declare
V.Local.sFuneralStr.Declare
V.Local.sMsgRet.Declare
V.Local.bFuneral.Declare
V.Local.sFuneralName.Declare

V.Local.bSkip.Set(False)
V.Local.bFuneral.Set(False)

F.Intrinsic.Variable.ArgToVar("lCount",V.Local.lCount)

'Checks if the current record is for a funeral and whether or not funeral hours should be applied instead.
F.Intrinsic.String.Trim(gui.frmApproved.gsgcApproved.GetCellValue("gsgvApproved",5,V.Local.lCount),V.Local.sFuneralStr)
F.Intrinsic.String.Trim(gui.frmApproved.gsgcApproved.GetCellValue("gsgvApproved",2,V.Local.lCount),V.Local.sFuneralName)
F.Intrinsic.Control.If(V.Local.sFuneralStr,=,"Funeral")
	F.Intrinsic.String.Build("Should {0}'s request for {1} use funeral hours instead of PTO hours?",V.Local.sFuneralName,gui.frmApproved.gsgcApproved.GetCellValue("gsgvApproved",3,V.Local.lCount),V.Local.sFuneralStr)
	F.Intrinsic.UI.Msgbox(V.Local.sFuneralStr,"Funeral or PTO hours?",3,V.Local.sMsgRet)
	F.Intrinsic.Control.If(V.Local.sMsgRet,=,2)
		V.Local.bSkip.Set(True)
		V.Local.bFuneral.Set(False)
		F.Intrinsic.Variable.AddRV("bFuneral",V.Local.bFuneral)
		F.Intrinsic.Variable.AddRV("bSkip",V.Local.bSkip)
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.ElseIf(V.Local.sMsgRet,=,7)
		V.Global.sCode.Set("05")
		V.Local.bSkip.Set(False)
		V.Local.bFuneral.Set(False)
		F.Intrinsic.Variable.AddRV("bSkip",V.Local.bSkip)
		F.Intrinsic.Variable.AddRV("bFuneral",V.Local.bFuneral)
	F.Intrinsic.Control.Else
		V.Global.sCode.Set("07")
		V.Local.bFuneral.Set(True)
		F.Intrinsic.Variable.AddRV("bFuneral",V.Local.bFuneral)
		V.Local.bSkip.Set(False)
		F.Intrinsic.Variable.AddRV("bSkip",V.Local.bSkip)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Date.Year(V.DataTable.dtFiltered(V.Local.lCount).REQUEST_DATE!FieldVal,V.Local.sYear)
F.Intrinsic.Date.Month(V.DataTable.dtFiltered(V.Local.lCount).REQUEST_DATE!FieldVal,V.Local.sMonth)
F.Intrinsic.Date.Day(V.DataTable.dtFiltered(V.Local.lCount).REQUEST_DATE!FieldVal,V.Local.sDay)

F.Intrinsic.String.Len(V.Local.sMonth,V.Local.lMLen)
F.Intrinsic.String.Len(V.Local.sDay,V.Local.lDLen)
F.Intrinsic.Control.If(V.Local.lMLen,"=",1)
	F.Intrinsic.String.Build("0{0}",V.Local.sMonth,V.Local.sMonth)
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.If(V.Local.lDLen,"=",1)
	F.Intrinsic.String.Build("0{0}",V.Local.sDay,V.Local.sDay)
F.Intrinsic.Control.EndIf
F.Intrinsic.String.Build("{0}{1}{2}",V.Local.sYear,V.Local.sMonth,V.Local.sDay,V.Local.sTADate)
F.Intrinsic.String.Build("{0}-{1}-{2}",V.Local.sYear,V.Local.sMonth,V.Local.sDay,V.Local.sInsTADate)

F.Intrinsic.Control.If(V.DataTable.dtTime.Exists)
	F.Data.DataTable.Close("dtTime")
F.Intrinsic.Control.EndIf

'HOURS_HH built from the grid control
F.Intrinsic.Math.Floor(gui.frmApproved.gsgcApproved.GetCellValue("gsgvApproved",13,V.Local.lCount),V.Local.lFloorHr)

'HOURS_MM built from the grid control
F.Intrinsic.Math.Mod(gui.frmApproved.gsgcApproved.GetCellValue("gsgvApproved",13,V.Local.lCount),1,V.Local.fModMin)
F.Intrinsic.Math.Mult(V.Local.fModMin,60,V.Local.fModMin)
F.Intrinsic.Math.Round(V.Local.fModMin,0,V.Local.fFloorMin)

'Getting data for filling in DEPT and SHIFT for the insert into TA
F.Intrinsic.String.Build("EMPLOYEE = '{0}'",gui.frmApproved.gsgcApproved.GetCellValue("gsgvApproved",1,V.Local.lCount),V.Local.sCrit)
F.Data.DataTable.Select("dtEmpMstr",V.Local.sCrit,V.Local.sReturn)

'Changed Date (Current Date)
F.Intrinsic.Date.Year(V.Ambient.Now,V.Local.sYear)
F.Intrinsic.Date.Month(V.Ambient.Now,V.Local.sMonth)
F.Intrinsic.Date.Day(V.Ambient.Now,V.Local.sDay)
F.Intrinsic.String.Len(V.Local.sMonth,V.Local.lMLen)
F.Intrinsic.String.Len(V.Local.sDay,V.Local.lDLen)
F.Intrinsic.Control.If(V.Local.lMLen,"=",1)
	F.Intrinsic.String.Build("0{0}",V.Local.sMonth,V.Local.sMonth)
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.If(V.Local.lDLen,"=",1)
	F.Intrinsic.String.Build("0{0}",V.Local.sDay,V.Local.sDay)
F.Intrinsic.Control.EndIf
F.Intrinsic.String.Build("{0}{1}{2}",V.Local.sYear,V.Local.sMonth,V.Local.sDay,V.Local.sChgDate)

'Changed Time (Current Time)
F.Intrinsic.Date.Hour(V.Ambient.Now,V.Local.sHour)
F.Intrinsic.Date.Minute(V.Ambient.Now,V.Local.sMinute)
F.Intrinsic.String.Len(V.Local.sHour,V.Local.lHLen)
F.Intrinsic.String.Len(V.Local.sMinute,V.Local.lMLen)
F.Intrinsic.Control.If(V.Local.lHLen,=,1)
	F.Intrinsic.String.Build("0{0}",V.Local.sHour,V.Local.sHour)
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.If(V.Local.lMLen,=,1)
	F.Intrinsic.String.Build("0{0}",V.Local.sMinute,V.Local.sMinute)
F.Intrinsic.Control.EndIf
F.Intrinsic.String.Build("{0}{1}0000",V.Local.sHour,V.Local.sMinute,V.Local.sChgTime)

F.Intrinsic.Control.If(gui.frmApproved.gsgcApproved.GetCellValue("gsgvApproved",8,V.Local.lCount))
	V.Local.sExcused.Set("Y")
F.Intrinsic.Control.Else
	V.Local.sExcused.Set("N")
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Build("INSERT INTO ZZ_PTO_TAQ (EMPLOYEE, CHARGE_DATE, DATE_IN, DATE_OUT, NAME, DEPT, SHIFT, REC_GROUP, REC_TYPE, EARNINGS_CODE, PAID, EXCUSED, BAL_AS_DATE, DATE_LAST_CHG, TIME_LAST_CHG, LAST_CHG_BY, LAST_CHG_PROG, HOURS_HH, HOURS_MM, DOLLAR_AMT, ACTUAL_DATE, PAYROLL_LOCK) VALUES ('{0}', '{1}', '{1}', '{1}', '{2}', '{3}', '{4}', '{3}', 'A', '{12}', 'Y', '{5}', '00000000', '{6}', '{7}', '{8}', 'ZZPTOHR', '{9}', '{10}', '0', '{11}', '0')",gui.frmApproved.gsgcApproved.GetCellValue("gsgvApproved",1,V.Local.lCount), V.Local.sTADate, V.DataTable.dtEmpMstr(V.Local.sReturn).NAME!FieldVal, V.DataTable.dtEmpMstr(V.Local.sReturn).DEPT_EMPLOYEE!FieldVal, V.DataTable.dtEmpMstr(V.Local.sReturn).SHIFT!FieldVal, V.Local.sExcused, V.Local.sChgDate, V.Local.sChgTime, V.Caller.User, V.Local.lFloorHr, V.Local.fFloorMin,V.Local.sInsTADate,V.Global.sCode, V.Local.sSQL)
			
F.ODBC.Connection!con.Execute(V.Local.sSQL)

V.Global.sCode.Set("05")

Program.Sub.TAUpdate.End

Program.Sub.40TAUpdate.Start
V.Local.sSQL.Declare
V.Local.lCount.Declare
V.Local.bSkip.Declare
V.Local.sTADate.Declare
V.Local.sYear.Declare
V.Local.sMonth.Declare
V.Local.sDay.Declare
V.Local.dTAOut.Declare
V.Local.lTAOutHr.Declare
V.Local.lPTOInHr.Declare
V.Local.lFloorHr.Declare
V.Local.fModMin.Declare
V.Local.lOutHr.Declare
V.Local.lOutMin.Declare
V.Local.sOutHr.Declare
V.Local.sOutMin.Declare
V.Local.sTimeOut.Declare
V.Local.sPTOInHr.Declare
V.Local.sTimeIn.Declare
V.Local.sRetVar.Declare
V.Local.sWarn.Declare
V.Local.sCrit.Declare
V.Local.sReturn.Declare
V.Local.sChgDate.Declare
V.Local.sChgTime.Declare
V.Local.sHour.Declare
V.Local.sMinute.Declare
V.Local.lHLen.Declare
V.Local.lDLen.Declare
V.Local.lMLen.Declare
V.Local.sInsTADate.Declare
V.Local.sTestVar.Declare
V.Local.sExcused.Declare
V.Local.sFuneralStr.Declare
V.Local.sMsgRet.Declare
V.Local.bFuneral.Declare
V.Local.sFuneralName.Declare

V.Local.bSkip.Set(False)
V.Local.bFuneral.Set(False)

F.Intrinsic.Variable.ArgToVar("lCount",V.Local.lCount)

'Checks if the current record is for a funeral and whether or not funeral hours should be applied instead.
F.Intrinsic.String.Trim(gui.frm40Queue.gsgcFill.GetCellValue("gsgvFill",4,V.Local.lCount),V.Local.sFuneralStr)
F.Intrinsic.String.Trim(gui.frm40Queue.gsgcFill.GetCellValue("gsgvFill",2,V.Local.lCount),V.Local.sFuneralName)
F.Intrinsic.Control.If(V.Local.sFuneralStr,=,"Funeral")
	F.Intrinsic.String.Build("Should {0}'s request for {1} use funeral hours instead of PTO hours?",V.Local.sFuneralName,gui.frm40Queue.gsgcFill.GetCellValue("gsgvFill",3,V.Local.lCount),V.Local.sFuneralStr)
	F.Intrinsic.UI.Msgbox(V.Local.sFuneralStr,"Funeral or PTO hours?",3,V.Local.sMsgRet)
	F.Intrinsic.Control.If(V.Local.sMsgRet,=,2)
		V.Local.bSkip.Set(True)
		V.Local.bFuneral.Set(False)
		F.Intrinsic.Variable.AddRV("bFuneral",V.Local.bFuneral)
		F.Intrinsic.Variable.AddRV("bSkip",V.Local.bSkip)
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.ElseIf(V.Local.sMsgRet,=,7)
		V.Global.sCode.Set("05")
		V.Local.bSkip.Set(False)
		V.Local.bFuneral.Set(False)
		F.Intrinsic.Variable.AddRV("bSkip",V.Local.bSkip)
		F.Intrinsic.Variable.AddRV("bFuneral",V.Local.bFuneral)
	F.Intrinsic.Control.Else
		V.Global.sCode.Set("07")
		V.Local.bFuneral.Set(True)
		F.Intrinsic.Variable.AddRV("bFuneral",V.Local.bFuneral)
		V.Local.bSkip.Set(False)
		F.Intrinsic.Variable.AddRV("bSkip",V.Local.bSkip)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Date.Year(V.DataTable.dtFiltered(V.Local.lCount).REQUEST_DATE!FieldVal,V.Local.sYear)
F.Intrinsic.Date.Month(V.DataTable.dtFiltered(V.Local.lCount).REQUEST_DATE!FieldVal,V.Local.sMonth)
F.Intrinsic.Date.Day(V.DataTable.dtFiltered(V.Local.lCount).REQUEST_DATE!FieldVal,V.Local.sDay)

F.Intrinsic.String.Len(V.Local.sMonth,V.Local.lMLen)
F.Intrinsic.String.Len(V.Local.sDay,V.Local.lDLen)
F.Intrinsic.Control.If(V.Local.lMLen,"=",1)
	F.Intrinsic.String.Build("0{0}",V.Local.sMonth,V.Local.sMonth)
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.If(V.Local.lDLen,"=",1)
	F.Intrinsic.String.Build("0{0}",V.Local.sDay,V.Local.sDay)
F.Intrinsic.Control.EndIf
F.Intrinsic.String.Build("{0}{1}{2}",V.Local.sYear,V.Local.sMonth,V.Local.sDay,V.Local.sTADate)
F.Intrinsic.String.Build("{0}-{1}-{2}",V.Local.sYear,V.Local.sMonth,V.Local.sDay,V.Local.sInsTADate)

'HOURS_HH
F.Intrinsic.Math.Floor(gui.frm40Queue.gsgcFill.GetCellValue("gsgvFill",11,V.Local.lCount),V.Local.lFloorHr)

'HOURS_MM
F.Intrinsic.Math.Mod(gui.frm40Queue.gsgcFill.GetCellValue("gsgvFill",11,V.Local.lCount),1,V.Local.fModMin)
F.Intrinsic.Math.Mult(V.Local.fModMin,60,V.Local.fModMin)
F.Intrinsic.Math.Round(V.Local.fModMin,0,V.Local.lOutMin)

'Getting data for filling in DEPT and SHIFT for the insert into TA
F.Intrinsic.String.Build("EMPLOYEE = '{0}'",gui.frm40Queue.gsgcFill.GetCellValue("gsgvFill",1,V.Local.lCount),V.Local.sCrit)
F.Data.DataTable.Select("dtEmpMstr",V.Local.sCrit,V.Local.sReturn)

'Changed Date (Current Date)
F.Intrinsic.Date.Year(V.Ambient.Now,V.Local.sYear)
F.Intrinsic.Date.Month(V.Ambient.Now,V.Local.sMonth)
F.Intrinsic.Date.Day(V.Ambient.Now,V.Local.sDay)
F.Intrinsic.String.Len(V.Local.sMonth,V.Local.lMLen)
F.Intrinsic.String.Len(V.Local.sDay,V.Local.lDLen)
F.Intrinsic.Control.If(V.Local.lMLen,"=",1)
	F.Intrinsic.String.Build("0{0}",V.Local.sMonth,V.Local.sMonth)
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.If(V.Local.lDLen,"=",1)
	F.Intrinsic.String.Build("0{0}",V.Local.sDay,V.Local.sDay)
F.Intrinsic.Control.EndIf
F.Intrinsic.String.Build("{0}{1}{2}",V.Local.sYear,V.Local.sMonth,V.Local.sDay,V.Local.sChgDate)

'Changed Time (Current Time)
F.Intrinsic.Date.Hour(V.Ambient.Now,V.Local.sHour)
F.Intrinsic.Date.Minute(V.Ambient.Now,V.Local.sMinute)
F.Intrinsic.String.Len(V.Local.sHour,V.Local.lHLen)
F.Intrinsic.String.Len(V.Local.sMinute,V.Local.lMLen)
F.Intrinsic.Control.If(V.Local.lHLen,=,1)
	F.Intrinsic.String.Build("0{0}",V.Local.sHour,V.Local.sHour)
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.If(V.Local.lMLen,=,1)
	F.Intrinsic.String.Build("0{0}",V.Local.sMinute,V.Local.sMinute)
F.Intrinsic.Control.EndIf
F.Intrinsic.String.Build("{0}{1}0000",V.Local.sHour,V.Local.sMinute,V.Local.sChgTime)

F.Intrinsic.Control.If(gui.frm40Queue.gsgcFill.GetCellValue("gsgvFill",6,V.Local.lCount))
	V.Local.sExcused.Set("Y")
F.Intrinsic.Control.Else
	V.Local.sExcused.Set("N")
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Build("INSERT INTO ZZ_PTO_TAQ (EMPLOYEE, CHARGE_DATE, DATE_IN, DATE_OUT, NAME, DEPT, SHIFT, REC_GROUP, REC_TYPE, EARNINGS_CODE, PAID, EXCUSED, BAL_AS_DATE, DATE_LAST_CHG, TIME_LAST_CHG, LAST_CHG_BY, LAST_CHG_PROG, HOURS_HH, HOURS_MM, DOLLAR_AMT, ACTUAL_DATE, PAYROLL_LOCK) VALUES ('{0}', '{1}', '{1}', '{1}', '{2}', '{3}', '{4}', '{3}', 'A', '{12}', 'Y', '{5}', '00000000', '{6}', '{7}', '{8}', 'ZZPTOHR', '{9}', '{10}', '0', '{11}', '0')",gui.frm40Queue.gsgcFill.GetCellValue("gsgvFill",1,V.Local.lCount), V.Local.sTADate, V.DataTable.dtEmpMstr(V.Local.sReturn).NAME!FieldVal, V.DataTable.dtEmpMstr(V.Local.sReturn).DEPT_EMPLOYEE!FieldVal, V.DataTable.dtEmpMstr(V.Local.sReturn).SHIFT!FieldVal, V.Local.sExcused, V.Local.sChgDate, V.Local.sChgTime, V.Caller.User, V.Local.lFloorHr, V.Local.lOutMin,V.Local.sInsTADate,V.Global.sCode, V.Local.sSQL)

F.ODBC.Connection!con.Execute(V.Local.sSQL)

V.Global.sCode.Set("05")

Program.Sub.40TAUpdate.End

Program.Sub.cmdSaveFill_Click.Start
V.Local.lRowCount.Declare
V.Local.lCount.Declare
V.Local.sSQL.Declare
V.Local.lExcused.Declare
V.Local.sCriteria.Declare
V.Local.sRet.Declare
V.Local.fNewHours.Declare
V.Local.bSkip.Declare
V.Local.bFuneral.Declare

'Closes the filtered and employees datatables if it exists
F.Intrinsic.Control.If(V.DataTable.dtFiltered.Exists)
	F.Data.DataView.Close("dtFiltered","dvFiltered")
	F.Data.DataTable.Close("dtFiltered")
F.Intrinsic.Control.EndIf

'Sets a filter on the dataview and then creates a new table from it.	
F.Data.DataView.SetFilter("dtFill","dvFill40","APPLY = TRUE")
F.Data.DataView.ToDataTable("dtFill","dvFill40","dtFiltered", True)

F.Data.DataView.Create("dtFiltered","dvFiltered")

F.Intrinsic.Control.Try
	gui.frm40Queue.gsgcFill.ClearGrouping("gsgvFill")
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.ClearErrors
F.Intrinsic.Control.EndTry

gui.frm40Queue.gsgcFill.AddGridviewFromDataview("gsgvFill","dtFiltered","dvFiltered")

V.Local.lRowCount.Set(V.DataTable.dtFiltered.RowCount)
F.Intrinsic.Math.Sub(V.Local.lRowCount,1,V.Local.lRowCount)

F.Intrinsic.Control.If(V.Local.lRowCount,<=,-1)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.For(V.Local.lCount,0,V.Local.lRowCount,1)

	F.Intrinsic.Control.CallSub("40TAUpdate","lCount",V.Local.lCount)
		
	F.Intrinsic.Variable.ArgToVar("bSkip",V.Local.bSkip)
	F.Intrinsic.Variable.ArgToVar("bFuneral",V.Local.bFuneral)
	
	F.Intrinsic.Control.If(V.Local.bSkip)

		F.Intrinsic.UI.Msgbox("Skipping record!","Skipping")
		F.Intrinsic.Control.If(V.Local.lCount,=,V.Local.lRowCount)
			F.Intrinsic.Control.ExitFor(V.Local.lCount)
		F.Intrinsic.Control.Else
			F.Intrinsic.Control.Next(V.Local.lCount)
		F.Intrinsic.Control.EndIf
		
	F.Intrinsic.Control.Else
	
		F.Intrinsic.Control.If(V.Local.bFuneral)
		
		F.Intrinsic.Control.Else
		
			'Find the employee in the employees table to access their current PTO amount
			F.Intrinsic.String.Build("EMPLOYEE = '{0}'",V.DataTable.dtFiltered(V.Local.lCount).EMPLOYEE!FieldVal,V.Local.sCriteria)
			F.Data.DataTable.Select("dtEmployees",V.Local.sCriteria,V.Local.sRet)
			
			'Takes their currently available PTO, subtracts it by the confirmed and scheduled amount, and then puts it back into the employee table.
			F.Intrinsic.Control.If(V.Local.sRet,"<>","***NORETURN***")
			
				F.Intrinsic.Math.Sub(V.DataTable.dtEmployees(V.Local.sRet).AVAILABLE!FieldVal,gui.frm40Queue.gsgcFill.GetCellValue("gsgvFill",11,V.Local.lCount),V.Local.fNewHours)
				
				F.Intrinsic.String.Build("UPDATE ZZ_PTO_EMPLOYEES SET AVAILABLE = '{0}' WHERE EMPLOYEE = '{1}'",V.Local.fNewHours,V.DataTable.dtFiltered(V.Local.lCount).EMPLOYEE!FieldVal,V.Local.sSQL)
				F.ODBC.Connection!con.Execute(V.Local.sSQL)
				
				F.Data.DataTable.SetValue("dtEmployees",V.Local.sRet,"AVAILABLE",V.Local.fNewHours)
				
			F.Intrinsic.Control.Else
				F.Intrinsic.UI.Msgbox("There was an error updating the Available PTO on the Employees table. Please contact IT and make sure to note down the information you were trying to apply. ERR101")
			F.Intrinsic.Control.EndIf
		
		F.Intrinsic.Control.EndIf

		'Converts the approved boolean to binary for the database query
		F.Intrinsic.Control.If(gui.frm40Queue.gsgcFill.GetCellValue("gsgvFill",6,V.Local.lCount))
			V.Local.lExcused.Set(1)
		F.Intrinsic.Control.Else
			V.Local.lExcused.Set(0)
		F.Intrinsic.Control.EndIf
		
		'Updates this history table with the most recent information
		F.Intrinsic.String.Build("UPDATE ZZ_PTO_HISTORY SET REASON = '{0}', EXCUSED = '{1}', PTO_AMOUNT = '{2}' WHERE UNIQID = '{3}';",gui.frm40Queue.gsgcFill.GetCellValue("gsgvFill",4,V.Local.lCount),V.Local.lExcused,gui.frm40Queue.gsgcFill.GetCellValue("gsgvFill",11,V.Local.lCount),V.DataTable.dtFiltered(V.Local.lCount).UNIQID!FieldVal,V.Local.sSQL)
		F.ODBC.Connection!con.Execute(V.Local.sSQL)
	
		'Updates the confirmed table with the actual amount of fill applied. 
		F.Intrinsic.String.Build("UPDATE ZZ_PTO_CONFIRMED SET REASON = '{0}', EXCUSED = '{1}', PTO_AMOUNT = '{2}' WHERE UNIQID = '{3}';",gui.frm40Queue.gsgcFill.GetCellValue("gsgvFill",4,V.Local.lCount),V.Local.lExcused,gui.frm40Queue.gsgcFill.GetCellValue("gsgvFill",11,V.Local.lCount),V.DataTable.dtFiltered(V.Local.lCount).UNIQID!FieldVal,V.Local.sSQL)
		F.ODBC.Connection!con.Execute(V.Local.sSQL)
		
		'Deletes from the fill table to clear things out.
		F.Intrinsic.String.Build("DELETE FROM ZZ_PTO_FILL WHERE UNIQID = '{0}'",V.DataTable.dtFiltered(V.Local.lCount).UNIQID!FieldVal,V.Local.sSQL)
		F.ODBC.Connection!con.Execute(V.Local.sSQL)
	
	F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Next(V.Local.lCount)

F.Intrinsic.Control.CallSub("loadDT")
Program.Sub.cmdSaveFill_Click.End

Program.Sub.cmdClearD_Click.Start
V.Local.lRowCount.Declare
V.Local.lCount.Declare
V.Local.sSQL.Declare

'Closes the filtered datatable if it exists
F.Intrinsic.Control.If(V.DataTable.dtFiltered.Exists)
	F.Data.DataView.Close("dtFiltered","dvFiltered")
	F.Data.DataTable.Close("dtFiltered")
F.Intrinsic.Control.EndIf

'Sets a filter on the dataview and then creates a new table from it.	
F.Data.DataView.SetFilter("dtDenied","dvDenied","APPLY = TRUE")
F.Data.DataView.ToDataTable("dtDenied","dvDenied","dtFiltered", True)

F.Intrinsic.Control.Try
	gui.frmDenied.gsgcDenied.ClearGrouping("gsgvDenied")
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.ClearErrors
F.Intrinsic.Control.EndTry

F.Data.DataView.Create("dtFiltered","dvFiltered")

gui.frmDenied.gsgcDenied.AddGridviewFromDataview("gsgvDenied","dtFiltered","dvFiltered")

'For each row in the dtDenied datatable/gridview that is selected to apply changes
V.Local.lRowCount.Set(V.DataTable.dtFiltered.RowCount)
F.Intrinsic.Math.Sub(V.Local.lRowCount,1,V.Local.lRowCount)

F.Intrinsic.Control.If(V.Local.lRowCount,<=,-1)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.For(V.Local.lCount,0,V.Local.lRowCount,1)

	F.Intrinsic.String.Build("DELETE FROM ZZ_PTO_HR_DENIED WHERE UNIQID = '{0}'",V.DataTable.dtFiltered(V.Local.lCount).UNIQID!FieldVal,V.Local.sSQL)
	F.ODBC.Connection!con.Execute(V.Local.sSQL)

F.Intrinsic.Control.Next(V.Local.lCount)

F.Intrinsic.Control.CallSub("LoadDT")
Program.Sub.cmdClearD_Click.End

Program.Sub.buildHoliday.Start
V.Local.sHolidayStr.Declare
V.Local.sHolArr.Declare
V.Local.lCount.Declare
V.Local.lArrLen.Declare
V.Local.sHolidays.Declare
V.Local.dHolidays.Declare

F.ODBC.Connection!con.ExecuteAndReturn("SELECT * FROM V_HOLIDAY_SCHED;",V.Local.sHolidayStr)
F.Intrinsic.String.Split(V.Local.sHolidayStr,"*!*",V.Local.sHolArr)

V.Local.lArrLen.Set(V.Local.sHolArr.UBound)

F.Intrinsic.Control.For(V.Local.lCount,3,V.Local.lArrLen,1)

	F.Intrinsic.Control.If(V.Local.sHolArr(V.Local.lCount),"<>","1/1/1900")
	
		F.Intrinsic.Control.If(V.Local.sHolidays,"=","")
			V.Local.sHolidays.Set(V.Local.sHolArr(V.Local.lCount))
		F.Intrinsic.Control.Else
			F.Intrinsic.String.Build("{0}*!*{1}",V.Local.sHolidays,V.Local.sHolArr(V.Local.lCount),V.Local.sHolidays)
		F.Intrinsic.Control.EndIf
		
	F.Intrinsic.Control.EndIf
	
F.Intrinsic.Control.Next(V.Local.lCount)

F.Intrinsic.String.Split(V.Local.sHolidays,"*!*",V.Local.dHolidays)

F.Intrinsic.Variable.AddRV("dHolidays",V.Local.dHolidays)

Program.Sub.buildHoliday.End

Program.Sub.isWeekday.Start
V.Local.lWeekday.Declare
V.Local.bWeekday.Declare

V.Local.lWeekday.Set(V.Args.Weekday)
F.Intrinsic.Control.If(V.Local.lWeekday,"=",7)
	V.Local.bWeekday.Set(False)
F.Intrinsic.Control.ElseIf(V.Local.lWeekday,"=",1)
	V.Local.bWeekday.Set(False)
F.Intrinsic.Control.Else
	V.Local.bWeekday.Set(True)
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.AddRV("bWeekday",V.Local.bWeekday)

Program.Sub.isWeekday.End

Program.Sub.cmdSchedule_Click.Start
F.Intrinsic.Control.CallSub("loadSchedule")

F.Intrinsic.Control.CallSub("oldDates")

F.Intrinsic.Control.CallSub("loadTable")

F.Intrinsic.Control.CallSub("popTable")

F.Intrinsic.Control.CallSub("buildGrid")

Program.Sub.cmdSchedule_Click.End

Program.Sub.oldDates.Start
V.Local.lRowCount.Declare
V.Local.lCount.Declare
V.Local.sSQL.Declare
V.Local.dCutOffDate.Declare

V.Local.lRowCount.Set(V.DataTable.dtPTO.RowCount)
F.Intrinsic.Math.Sub(V.Local.lRowCount,1,V.Local.lRowCount)

F.Intrinsic.Date.DateAdd("d",-14,V.Ambient.Date,V.Local.dCutOffDate)

F.Intrinsic.Control.For(V.Local.lCount,0,V.Local.lRowCount,1)

	F.Intrinsic.Control.If(V.DataTable.dtPTO(V.Local.lCount).REQUEST_DATE!FieldVal,<,V.Local.dCutOffDate)
	
		F.Intrinsic.String.Build("DELETE FROM ZZ_PTO_CONFIRMED WHERE UNIQID = '{0}';",V.DataTable.dtPTO(V.Local.lCount).UNIQID!FieldVal,V.Local.sSQL)
		F.ODBC.Connection!con.Execute(V.Local.sSQL)
	
	F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Next(V.Local.lCount)

F.Data.DataTable.Close("dtPTO")
F.Data.DataTable.CreateFromSQL("dtPTO","con","SELECT * FROM ZZ_PTO_CONFIRMED;",True)

Program.Sub.oldDates.End

Program.Sub.loadTable.Start
V.Local.lRowCount.Declare
V.Local.lCount.Declare
V.Local.dFDate.Declare
V.Local.dLDate.Declare
V.Local.sRet.Declare
V.Local.lDays.Declare
V.Local.sDate.Declare
V.Local.sDay.Declare
V.Local.sMonth.Declare
V.Local.sYear.Declare
V.Local.dCurDay.Declare
V.Local.lDLen.Declare
V.Local.lMLen.Declare
V.Local.lWkday.Declare

F.Intrinsic.Control.If(V.DataView.dtPTO!dvPTO.Exists)
	F.Data.DataView.Close("dtPTO","dvPTO")
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.If(V.DataTable.dtSPTO.Exists)
	F.Data.DataTable.Close("dtSPTO")
F.Intrinsic.Control.EndIf

F.Data.DataView.Create("dtPTO","dvPTO")
F.Data.DataView.SetSort("dtPTO","dvPTO","REQUEST_DATE ASC")
F.Data.DataView.ToDataTable("dtPTO","dvPTO","dtSPTO",True)

V.Local.lRowCount.Set(V.DataTable.dtSPTO.RowCount)
F.Intrinsic.Math.Sub(V.Local.lRowCount,1,V.Local.lRowCount)

F.Intrinsic.Control.If(V.Local.lRowCount,<=,-1)
	F.Intrinsic.UI.Msgbox("There is currently no scheduled PTO for your employees")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

V.Local.dFDate.Set(V.DataTable.dtSPTO(0).REQUEST_DATE!FieldVal)
V.Local.dLDate.Set(V.DataTable.dtSPTO(V.Local.lRowCount).REQUEST_DATE!FieldVal)

F.Intrinsic.Date.DateDiff("D",V.Local.dFDate,V.Local.dLDate,V.Local.lDays)

F.Intrinsic.Control.If(V.DataTable.dtSched.Exists)
	F.Data.DataTable.Close("dtSched")
F.Intrinsic.Control.EndIf

F.Data.DataTable.Create("dtSched",True)

F.Data.DataTable.AddColumn("dtSched","ID","string")
F.Data.DataTable.AddColumn("dtSched","Employee","string")
F.Data.DataTable.AddColumn("dtSched","Supervisor","string")

F.Intrinsic.Control.For(V.Local.lCount,0,V.Local.lDays,1)

	F.Intrinsic.Date.DateAdd("D",V.Local.lCount,V.Local.dFDate,V.Local.dCurDay)
	
	F.Intrinsic.Date.Weekday(V.Local.dCurDay,V.Local.lWkday)
	
	F.Intrinsic.Control.If(V.Local.lWkday,<>,1)
	
		F.Intrinsic.Control.If(V.Local.lWkday,<>,7)
		
			F.Intrinsic.Date.Day(V.Local.dCurDay,V.Local.sDay)
			F.Intrinsic.String.Len(V.Local.sDay,V.Local.lDLen)
			F.Intrinsic.Control.If(V.Local.lDLen,"=",1)
				F.Intrinsic.String.Build("0{0}",V.Local.sDay,V.Local.sDay)
			F.Intrinsic.Control.EndIf
			F.Intrinsic.Date.Month(V.Local.dCurDay,V.Local.sMonth)
			F.Intrinsic.String.Len(V.Local.sMonth,V.Local.lMLen)
			F.Intrinsic.Control.If(V.Local.lMLen,"=",1)
				F.Intrinsic.String.Build("0{0}",V.Local.sMonth,V.Local.sMonth)
			F.Intrinsic.Control.EndIf
			F.Intrinsic.Date.Year(V.Local.dCurDay,V.Local.sYear)
			
			F.Intrinsic.String.Build("{0}/{1}/{2}",V.Local.sMonth,V.Local.sDay,V.Local.sYear,V.Local.sDate)
			
			F.Data.DataTable.AddColumn("dtSched",V.Local.sDate,"string")
		
		F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.EndIf
	
F.Intrinsic.Control.Next(V.Local.lCount)

V.Local.lRowCount.Set(V.DataTable.dtFltEmp.RowCount)
F.Intrinsic.Math.Sub(V.Local.lRowCount,1,V.Local.lRowCount)

F.Intrinsic.Control.For(V.Local.lCount,0,V.Local.lRowCount,1)

	F.Data.DataTable.AddRow("dtSched","ID",V.DataTable.dtFltEmp(V.Local.lCount).EMPLOYEE!FieldVal,"Employee",V.DataTable.dtFltEmp(V.Local.lCount).NAME!FieldVal,"Supervisor",V.DataTable.dtFltEmp(V.Local.lCount).SUPERVSR!FIeldVal)

F.Intrinsic.Control.Next(V.Local.lCount)

Program.Sub.loadTable.End

Program.Sub.popTable.Start
V.Local.lCount.Declare
V.Local.lRowCount.Declare
V.Local.sYear.Declare
V.Local.sMonth.Declare
V.Local.sDay.Declare
V.Local.sDate.Declare
V.Local.sCrit.Declare
V.Local.sRet.Declare
V.Local.lDLen.Declare
V.Local.lMLen.Declare

V.Local.lRowCount.Set(V.DataTable.dtPTO.RowCount)
F.Intrinsic.Math.Sub(V.Local.lRowCount,1,V.Local.lRowCount)

F.Intrinsic.Control.If(V.Local.lRowCount,<=,-1)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.For(V.Local.lCount,0,V.Local.lRowCount,1)	

	F.Intrinsic.Date.Year(V.DataTable.dtPTO(V.Local.lCount).REQUEST_DATE!FieldVal,V.Local.sYear)
	F.Intrinsic.Date.Month(V.DataTable.dtPTO(V.Local.lCount).REQUEST_DATE!FieldVal,V.Local.sMonth)
	V.Local.lMlen.Set(V.Local.sMonth.Length)
	F.Intrinsic.Control.If(V.Local.lMLen,=,1)
		F.Intrinsic.String.Build("0{0}",V.Local.sMonth,V.Local.sMonth)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Date.Day(V.DataTable.dtPTO(V.Local.lCount).REQUEST_DATE!FieldVal,V.Local.sDay)
	V.Local.lDLen.Set(V.Local.sDay.Length)
	F.Intrinsic.Control.If(V.Local.lDLen,=,1)
		F.Intrinsic.String.Build("0{0}",V.Local.sDay,V.Local.sDay)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.String.Build("{0}/{1}/{2}",V.Local.sMonth,V.Local.sDay,V.Local.sYear,V.Local.sDate)
	
	F.Intrinsic.String.Build("ID = '{0}'",V.DataTable.dtPTO(V.Local.lCount).EMPLOYEE!FieldVal,V.Local.sCrit)
	
	F.Data.DataTable.Select("dtSched",V.Local.sCrit,V.Local.sRet)
	
	F.Data.DataTable.SetValue("dtSched",V.Local.sRet,V.Local.sDate,V.DataTable.dtPTO(V.Local.lCount).PTO_AMOUNT!FieldVal)

F.Intrinsic.Control.Next(V.Local.lCount)

Program.Sub.popTable.End

Program.Sub.frmLogin_unload.Start
gui.frmPTO..Visible(False)
gui.frmApproved..Visible(True)
gui.frmApproved..SetFocus

Program.Sub.frmLogin_unload.End

Program.Sub.buildGrid.Start
V.Local.lCount.Declare
V.Local.lColCount.Declare
V.Local.sCurCol.Declare

F.Data.DataView.Create("dtSched","dvSched")
gui.frmPTO.gsgcPTO.AddGridviewFromDataview("gsgvSched","dtSched","dvSched")
gui.frmPTO.gsgcPTO.SetGridviewProperty("gsgvSched","OptionsViewColumnAutoWidth",False)

gui.frmPTO.gsgcPTO.SetColumnProperty("gsgvSched","ID","Fixed","Left")
gui.frmPTO.gsgcPTO.SetColumnProperty("gsgvSched","Employee","Fixed","Left")
gui.frmPTO.gsgcPTO.SetColumnProperty("gsgvSched","Supervisor","Fixed","Left")

gui.frmPTO.gsgcPTO.GetColumnCount("gsgvSched",V.Local.lColCount)
F.Intrinsic.Math.Sub(V.Local.lColCount,1,V.Local.lColCount)

F.Intrinsic.Control.For(V.Local.lCount,0,V.Local.lColCount,1)
	gui.frmPTO.gsgcPTO.GetColumnNameByIndex("gsgvSched",V.Local.lCount,V.Local.sCurCol)
	gui.frmPTO.gsgcPTO.SetColumnProperty("gsgvSched",V.Local.sCurCol,"HeaderFontBold",True)
	gui.frmPTO.gsgcPTO.SetColumnProperty("gsgvSched",V.Local.sCurCol,"HeaderHAlignment","Center")
	gui.frmPTO.gsgcPTO.SetColumnProperty("gsgvSched",V.Local.sCurCol,"CellHAlignment","Center")
	gui.frmPTO.gsgcPTO.SetColumnProperty("gsgvSched",V.Local.sCurCol,"ReadOnly",True)
	gui.frmPTO.gsgcPTO.SetColumnProperty("gsgvSched",V.Local.sCurCol,"AllowEdit",False)
	
	F.Intrinsic.Control.If(V.Local.lCount,>=,3)
		gui.frmPTO.gsgcPTO.SetColumnProperty("gsgvSched",V.Local.sCurCol,"width",100)
		gui.frmPTO.gsgcPTO.SetColumnProperty("gsgvSched",V.Local.sCurCol,"CellForeColor",V.Color.LtBlue)
		gui.frmPTO.gsgcPTO.SetColumnProperty("gsgvSched",V.Local.sCurCol,"CellFontBold",True)
		gui.frmPTO.gsgcPTO.SetColumnProperty("gsgvSched",V.Local.sCurCol,"CellFontUnderline",True)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.lCount)

gui.frmPTO.gsgcPTO.SetColumnProperty("gsgvSched","Employee","width",175)
gui.frmPTO.gsgcPTO.SetColumnProperty("gsgvSched","Supervisor","width",175)

gui.frmPTO.gsgcPTO.MainView("gsgvSched")
F.Intrinsic.Control.If(V.Global.bSched)
	gui.frmPTO..Visible(True)
	gui.frmDenied..Visible(False)
	gui.frm40Queue..Visible(False)
	gui.frmApproved..Visible(False)
F.Intrinsic.Control.Else
	gui.frmPTO..Show
	gui.frmDenied..Visible(False)
	gui.frm40Queue..Visible(False)
	gui.frmApproved..Visible(False)
	V.Global.bSched.Set(True)
F.Intrinsic.Control.EndIf

Program.Sub.buildGrid.End

Program.Sub.gsgcPTO_RowCellClick.Start
V.Local.sEmpID.Declare
V.Local.sUniqID.Declare
V.Local.sMonth.Declare
V.Local.sDay.Declare
V.Local.sYear.Declare
V.Local.sCrit.Declare
V.Local.sRowLoc.Declare

V.Local.sEmpID.Set(V.DataTable.dtSched(V.Args.RowIndex).ID!FieldVal)

F.Intrinsic.String.Left(V.Args.Column,2,V.Local.sMonth)
F.Intrinsic.String.Mid(V.Args.Column,4,2,V.Local.sDay)
F.Intrinsic.String.Right(V.Args.Column,4,V.Local.sYear)

F.Intrinsic.String.Build("{0}{1}{2}{3}",V.Local.sYear,V.Local.sMonth,V.Local.sDay,V.Local.sEmpID,V.Local.sUniqID)

F.Intrinsic.String.Build("UNIQID = '{0}'",V.Local.sUniqID,V.Local.sCrit)
F.Data.DataTable.Select("dtPTO",V.Local.sCrit,V.Local.sRowLoc)
F.Intrinsic.Control.If(V.Local.sRowLoc,=,"***NORETURN***")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

gui.frmDetail.txtIDNo.Text(V.DataTable.dtPTO(V.Local.sRowLoc).EMPLOYEE!FieldVal)
gui.frmDetail.dtpReqDt.Value(V.DataTable.dtPTO(V.Local.sRowLoc).REQUEST_DATE!FieldVal)
gui.frmDetail.txtName.Text(V.DataTable.dtPTO(V.Local.sRowLoc).NAME!FieldVal)
gui.frmDetail.txtPTOAmt.Text(V.DataTable.dtPTO(V.Local.sRowLoc).PTO_AMOUNT!FieldVal)
gui.frmDetail.txtReason.Text(V.DataTable.dtPTO(V.Local.sRowLoc).REASON!FieldVal)
gui.frmDetail.txtSup.Text(V.DataTable.dtPTO(V.Local.sRowLoc).SUPERVSR!FieldVal)
gui.frmDetail.chkFill.Value(V.DataTable.dtPTO(V.Local.sRowLoc).FILL_TO_40!FieldVal)
gui.frmDetail.chkExc.Value(V.DataTable.dtPTO(V.Local.sRowLoc).EXCUSED!FieldVal)
gui.frmDetail.txtExplanation.Text(V.DataTable.dtPTO(V.Local.sRowLoc).EXPLANATION!FieldVal)

F.Intrinsic.Control.If(V.Global.bDetail)
	gui.frmDetail..Visible(True)
	gui.frmDetail..SetFocus
F.Intrinsic.Control.Else
	gui.frmDetail..Show
	gui.frmDetail..SetFocus
	V.Global.bDetail.Set(True)
F.Intrinsic.Control.EndIf

Program.Sub.gsgcPTO_RowCellClick.End

Program.Sub.frmDetail_UnLoad.Start
gui.frmDetail..Visible(False)
gui.frmPTO..SetFocus
Program.Sub.frmDetail_UnLoad.End

Program.Sub.cmdEmpBrowse_Click.Start
V.Local.sTitles.Declare
V.Local.sSQL.Declare
V.Local.iWidths.Declare
V.Local.sReturn.Declare

F.Intrinsic.String.Split("Employee*!*Name*!*Pay Type","*!*",V.Local.sTitles)
F.Intrinsic.String.Split("600*!*1600*!*600","*!*",V.Local.iWidths)

F.Intrinsic.UI.SetBrowserHotTypeAhead(True)

F.Intrinsic.UI.Browser("Select an Employee","con","SELECT EMPLOYEE, NAME, PAY_TYPE FROM V_EMPLOYEE_MSTR WHERE DATE_TERMINATION = '1900-01-01' ORDER BY NAME ASC",V.Local.sTitles,V.Local.iWidths,8000,12000,V.Local.sReturn)

F.Intrinsic.Control.If(V.Local.sReturn,"=","***CANCEL***")
	F.Intrinsic.UI.Msgbox("No Employee was Selected!")
F.Intrinsic.Control.Else
	F.Intrinsic.String.Split(V.Local.sReturn,"*!*",V.Local.sReturn)
	gui.frmAddEmp.txtEmpID.Text(V.Local.sReturn(0))
	gui.frmAddEmp.txtEmpName.Text(V.Local.sReturn(1))
	V.Global.sPayType.Set(V.Local.sReturn(2))
F.Intrinsic.Control.EndIf
Program.Sub.cmdEmpBrowse_Click.End

Program.Sub.cmdSupBrowse_Click.Start
V.Local.sTitles.Declare
V.Local.sSQL.Declare
V.Local.iWidths.Declare
V.Local.sReturn.Declare

F.Intrinsic.String.Split("Employee*!*Name*!*Pay Type","*!*",V.Local.sTitles)
F.Intrinsic.String.Split("600*!*1600*!*600","*!*",V.Local.iWidths)

F.Intrinsic.UI.SetBrowserHotTypeAhead(True)

F.Intrinsic.UI.Browser("Select a Supervisor","con","SELECT EMPLOYEE, NAME, PAY_TYPE FROM V_EMPLOYEE_MSTR WHERE DATE_TERMINATION = '1900-01-01' ORDER BY NAME ASC",V.Local.sTitles,V.Local.iWidths,8000,12000,V.Local.sReturn)

F.Intrinsic.Control.If(V.Local.sReturn,=,"***CANCEL***")
	F.Intrinsic.UI.Msgbox("No Supervisor was Selected!")
F.Intrinsic.Control.Else
	F.Intrinsic.String.Split(V.Local.sReturn,"*!*",V.Local.sReturn)
	gui.frmAddEmp.txtSupID.Text(V.Local.sReturn(0))
	gui.frmAddEmp.txtSupName.Text(V.Local.sReturn(1))
F.Intrinsic.Control.EndIf
Program.Sub.cmdSupBrowse_Click.End

Program.Sub.cmdSaveNewEmp_Click.Start
V.Local.sHireDate.Declare
V.Local.sStepDate.Declare
V.Local.lYear.Declare
V.Local.sMonth.Declare
V.Local.sDay.Declare
V.Local.sSQL.Declare
V.Local.lDLen.Declare
V.Local.lMLen.Declare
V.Local.sMsg.Declare

F.Intrinsic.Date.Day(V.Screen.frmAddEmp!dtpHire.Value,V.Local.sDay)
F.Intrinsic.String.Len(V.Local.sDay,V.Local.lDLen)
F.Intrinsic.Control.If(V.Local.lDLen,"=",1)
	F.Intrinsic.String.Build("0{0}",V.Local.sDay,V.Local.sDay)
F.Intrinsic.Control.EndIf
F.Intrinsic.Date.Month(V.Screen.frmAddEmp!dtpHire.Value,V.Local.sMonth)
F.Intrinsic.String.Len(V.Local.sMonth,V.Local.lMLen)
F.Intrinsic.Control.If(V.Local.lMLen,"=",1)
	F.Intrinsic.String.Build("0{0}",V.Local.sMonth,V.Local.sMonth)
F.Intrinsic.Control.EndIf
F.Intrinsic.Date.Year(V.Screen.frmAddEmp!dtpHire.Value,V.Local.lYear)

F.Intrinsic.String.Build("{0}-{1}-{2}",V.Local.lYear,V.Local.sMonth,V.Local.sDay,V.Local.sHireDate)

F.Intrinsic.Math.Add(V.Local.lYear,1,V.Local.lYear)

F.Intrinsic.String.Build("{0}-{1}-{2}",V.Local.lYear,V.Local.sMonth,V.Local.sDay,V.Local.sStepDate)

F.Intrinsic.String.Build("INSERT INTO ZZ_PTO_EMPLOYEES (EMPLOYEE, NAME, AVAILABLE, SUP_ID, SUPERVSR, PAY_TYPE, HIRE_DATE, PTO_STEP_DATE, PTO_STEP) VALUES ('{0}', '{1}', '{2}', '{3}', '{4}', '{5}', '{6}', '{7}', '{8}');",V.Screen.frmAddEmp!txtEmpID.Value,V.Screen.frmAddEmp!txtEmpName.Value,V.Screen.frmAddEmp!txtAvailPTO.Value,V.Screen.frmAddEmp!txtSupID.Value,V.Screen.frmAddEmp!txtSupName.Value,V.Global.sPayType,V.Local.sHireDate,V.Local.sStepDate,V.Screen.frmAddEmp!ddlPTOStep.Value,V.Local.sSQL)

F.ODBC.Connection!con.Execute(V.Local.sSQL)

F.Intrinsic.String.Build("{0} has been added to the PTO system.",V.Screen.frmAddEmp!txtEmpName.Value,V.Local.sMsg)
F.Intrinsic.UI.Msgbox(V.Local.sMsg,"Employee Added")

F.Intrinsic.Control.CallSub("loadDT")

Program.Sub.cmdSaveNewEmp_Click.End

Program.Sub.cmdCancelNewEmp_Click.Start
gui.frmAddEmp..Visible(False)
gui.frm40Queue..Visible(False)
gui.frmEditEmp..Visible(False)
gui.frmApproved..Visible(True)
gui.frmAddEmp..Visible(False)
gui.frmPTO..Visible(False)
gui.frmDenied..Visible(False)

Program.Sub.cmdCancelNewEmp_Click.End

Program.Sub.cmdEditCancel_Click.Start
gui.frmEditEmp..Visible(False)
gui.frm40Queue..Visible(False)
gui.frmEditEmp..Visible(False)
gui.frmApproved..Visible(True)
gui.frmAddEmp..Visible(False)
gui.frmPTO..Visible(False)
gui.frmDenied..Visible(False)

Program.Sub.cmdEditCancel_Click.End

Program.Sub.frmAddEmp_UnLoad.Start
gui.frm40Queue..Visible(False)
gui.frmApproved..Visible(True)
gui.frmAddEmp..Visible(False)
gui.frmPTO..Visible(False)
gui.frmDenied..Visible(False)

Program.Sub.frmAddEmp_UnLoad.End

Program.Sub.frmEditEmp_UnLoad.Start
gui.frm40Queue..Visible(False)
gui.frmEditEmp..Visible(False)
gui.frmApproved..Visible(True)
gui.frmAddEmp..Visible(False)
gui.frmPTO..Visible(False)
gui.frmDenied..Visible(False)

Program.Sub.frmEditEmp_UnLoad.End

Program.Sub.cmdsave_edit_click.Start
V.Local.sHireDate.Declare
V.Local.lYear.Declare
V.Local.sMonth.Declare
V.Local.sDay.Declare
V.Local.sSQL.Declare
V.Local.lDLen.Declare
V.Local.lMLen.Declare
V.Local.sStepDate.Declare

F.Intrinsic.Date.Day(V.Screen.frmEditEmp!dtpHire.Value,V.Local.sDay)
F.Intrinsic.String.Len(V.Local.sDay,V.Local.lDLen)
F.Intrinsic.Control.If(V.Local.lDLen,"=",1)
	F.Intrinsic.String.Build("0{0}",V.Local.sDay,V.Local.sDay)
F.Intrinsic.Control.EndIf
F.Intrinsic.Date.Month(V.Screen.frmEditEmp!dtpHire.Value,V.Local.sMonth)
F.Intrinsic.String.Len(V.Local.sMonth,V.Local.lMLen)
F.Intrinsic.Control.If(V.Local.lMLen,"=",1)
	F.Intrinsic.String.Build("0{0}",V.Local.sMonth,V.Local.sMonth)
F.Intrinsic.Control.EndIf
F.Intrinsic.Date.Year(V.Screen.frmEditEmp!dtpHire.Value,V.Local.lYear)

F.Intrinsic.String.Build("{0}-{1}-{2}",V.Local.lYear,V.Local.sMonth,V.Local.sDay,V.Local.sHireDate)

F.Intrinsic.Date.Day(V.Screen.frmEditEmp!dtpStep.Value,V.Local.sDay)
F.Intrinsic.String.Len(V.Local.sDay,V.Local.lDLen)
F.Intrinsic.Control.If(V.Local.lDLen,"=",1)
	F.Intrinsic.String.Build("0{0}",V.Local.sDay,V.Local.sDay)
F.Intrinsic.Control.EndIf
F.Intrinsic.Date.Month(V.Screen.frmEditEmp!dtpStep.Value,V.Local.sMonth)
F.Intrinsic.String.Len(V.Local.sMonth,V.Local.lMLen)
F.Intrinsic.Control.If(V.Local.lMLen,"=",1)
	F.Intrinsic.String.Build("0{0}",V.Local.sMonth,V.Local.sMonth)
F.Intrinsic.Control.EndIf
F.Intrinsic.Date.Year(V.Screen.frmEditEmp!dtpStep.Value,V.Local.lYear)

F.Intrinsic.String.Build("{0}-{1}-{2}",V.Local.lYear,V.Local.sMonth,V.Local.sDay,V.Local.sStepDate)

F.Intrinsic.String.Build("UPDATE ZZ_PTO_EMPLOYEES SET NAME = '{0}', AVAILABLE = '{1}', SUP_ID = '{2}', SUPERVSR = '{3}', HIRE_DATE = '{4}', PTO_STEP = '{5}', PTO_STEP_DATE = '{7}' WHERE EMPLOYEE = '{6}';",V.Screen.frmEditEmp!txtEmpName.Value,V.Screen.frmEditEmp!txtAvailPTO.Value,V.Screen.frmEditEmp!txtSupID.Value,V.Screen.frmEditEmp!txtSupName.Value,V.Local.sHireDate,V.Screen.frmEditEmp!ddlPTOStep.Value,V.Screen.frmEditEmp!txtEmpID.Value,V.Local.sStepDate,V.Local.sSQL)
F.ODBC.Connection!con.Execute(V.Local.sSQL)

F.Intrinsic.UI.Msgbox("Employee Information Saved!")
gui.frmEditEmp.txtAvailPTO.Text("")
gui.frmEditEmp.txtEmpID.Text("")
gui.frmEditEmp.txtEmpName.Text("")
gui.frmEditEmp.txtSupID.Text("")
gui.frmEditEmp.txtSupName.Text("")
gui.frmEditEmp.ddlPTOStep.Text("")

Program.Sub.cmdsave_edit_click.End

Program.Sub.cmdAddNewEmp_Click.Start
V.Local.lCount.Declare

F.Intrinsic.Control.If(V.Global.bAddEmp)
	gui.frmPTO..Visible(False)
	gui.frmDenied..Visible(False)
	gui.frm40Queue..Visible(False)
	gui.frmApproved..Visible(False)
	gui.frmAddEmp..Visible(True)
F.Intrinsic.Control.Else
	gui.frmAddEmp..Show()
	gui.frmDenied..Visible(False)
	gui.frm40Queue..Visible(False)
	gui.frmApproved..Visible(False)
	V.Global.bAddEmp.Set(True)
	F.Intrinsic.Control.For(V.Local.lCount,0,10,1)
		gui.frmAddEmp.ddlPTOStep.AddItem(V.Local.lCount)
	F.Intrinsic.Control.Next(V.Local.lCount)
F.Intrinsic.Control.EndIf


Program.Sub.cmdAddNewEmp_Click.End

Program.Sub.cmdAddCancel_Click.Start
gui.frm40Queue..Visible(False)
gui.frmApproved..Visible(True)
gui.frmAddEmp..Visible(False)
gui.frmPTO..Visible(False)
gui.frmDenied..Visible(False)

Program.Sub.cmdAddCancel_Click.End

Program.Sub.cmdEditEmpBrowser_Click.Start
V.Local.sTitles.Declare
V.Local.sSQL.Declare
V.Local.iWidths.Declare
V.Local.sReturn.Declare

F.Intrinsic.String.Split("Employee*!*Name*!*Available PTO*!*Supervisor ID*!*Supervisor Name*!*Pay Type*!*Hire Date*!*PTO Step*!*PTO Step Date","*!*",V.Local.sTitles)
F.Intrinsic.String.Split("600*!*1600*!*800*!*600*!*1600*!*600*!*600*!*600*!*600","*!*",V.Local.iWidths)

F.Intrinsic.UI.SetBrowserHotTypeAhead(True)

F.Intrinsic.UI.Browser("Select an Employee To Edit","con","SELECT EMPLOYEE, NAME, AVAILABLE, SUP_ID, SUPERVSR, PAY_TYPE, HIRE_DATE, PTO_STEP, PTO_STEP_DATE FROM ZZ_PTO_EMPLOYEES",V.Local.sTitles,V.Local.iWidths,16000,12000,V.Local.sReturn)

F.Intrinsic.Control.If(V.Local.sReturn,=,"***CANCEL***")
	F.Intrinsic.UI.Msgbox("No Employee was Selected!")
F.Intrinsic.Control.Else
	F.Intrinsic.String.Split(V.Local.sReturn,"*!*",V.Local.sReturn)
	gui.frmEditEmp.txtEmpID.Text(V.Local.sReturn(0))
	gui.frmEditEmp.txtEmpName.Text(V.Local.sReturn(1))
	gui.frmEditEmp.txtSupID.Text(V.Local.sReturn(3))
	gui.frmEditEmp.txtSupName.Text(V.Local.sReturn(4))
	gui.frmEditEmp.dtpHire.Value(V.Local.sReturn(6))
'	gui.frmEditEmp.ddlPTOStep.AddItem(V.Local.sReturn(7))
	gui.frmEditEmp.ddlPTOStep.Text(V.Local.sReturn(7))
	gui.frmEditEmp.txtAvailPTO.Text(V.Local.sReturn(2))
	gui.frmEditEmp.dtpStep.Value(V.Local.sReturn(8))
F.Intrinsic.Control.EndIf


Program.Sub.cmdEditEmpBrowser_Click.End

Program.Sub.cmdEditSupBrowser_Click.Start
V.Local.sTitles.Declare
V.Local.sSQL.Declare
V.Local.iWidths.Declare
V.Local.sReturn.Declare

F.Intrinsic.String.Split("Employee*!*Name*!*Pay Type*!*Hire Date","*!*",V.Local.sTitles)
F.Intrinsic.String.Split("600*!*1600*!*600*!*900","*!*",V.Local.iWidths)

F.Intrinsic.UI.SetBrowserHotTypeAhead(True)

F.Intrinsic.UI.Browser("Select a Supervisor","con","SELECT EMPLOYEE, NAME, PAY_TYPE, DATE_HIRE FROM V_EMPLOYEE_MSTR WHERE DATE_TERMINATION = '1900-01-01' ORDER BY NAME ASC",V.Local.sTitles,V.Local.iWidths,8000,12000,V.Local.sReturn)

F.Intrinsic.Control.If(V.Local.sReturn,=,"***CANCEL***")
	F.Intrinsic.UI.Msgbox("No Supervisor was Selected!")
F.Intrinsic.Control.Else
	F.Intrinsic.String.Split(V.Local.sReturn,"*!*",V.Local.sReturn)
	gui.frmEditEmp.txtSupID.Text(V.Local.sReturn(0))
	gui.frmEditEmp.txtSupName.Text(V.Local.sReturn(1))
F.Intrinsic.Control.EndIf

Program.Sub.cmdEditSupBrowser_Click.End

Program.Sub.cmdEditEmployee_Click.Start
V.Local.lCount.Declare

F.Intrinsic.Control.If(V.Global.bEditEmp)
	gui.frmPTO..Visible(False)
	gui.frmDenied..Visible(False)
	gui.frm40Queue..Visible(False)
	gui.frmApproved..Visible(False)
	gui.frmAddEmp..Visible(False)
	gui.frmEditEmp..Visible(True)
F.Intrinsic.Control.Else
	gui.frmEditEmp..Show()
	gui.frmDenied..Visible(False)
	gui.frm40Queue..Visible(False)
	gui.frmApproved..Visible(False)
	V.Global.bEditEmp.Set(True)
	F.Intrinsic.Control.For(V.Local.lCount,1,10,1)
		gui.frmEditEmp.ddlPTOStep.AddItem(V.Local.lCount)
	F.Intrinsic.Control.Next(V.Local.lCount)
F.Intrinsic.Control.EndIf

Program.Sub.cmdEditEmployee_Click.End

Program.Sub.cmdManConfirm_Click.Start
V.Local.lDayRange.Declare
V.Local.lDayCount.Declare
V.Local.lCount.Declare
V.Local.fHourSplit.Declare
V.Local.dCurDay.Declare
V.Local.sMsg.Declare
V.Local.dHolidays.Declare
V.Local.lHolCount.Declare
V.Local.sPTODays.Declare
V.Local.dPTODays.Declare
V.Local.bIsHoliday.Declare
V.Local.lWeekday.Declare
V.Local.bWeekday.Declare
V.Local.sSQL.Declare
V.Local.sDay.Declare
V.Local.sMonth.Declare
V.Local.sYear.Declare
V.Local.lMLen.Declare
V.Local.lDLen.Declare
V.Local.sUniqID.Declare
V.Local.sDate.Declare
V.Local.sRet.Declare
V.Local.sSupervsr.Declare
V.Local.sCrit.Declare
V.Local.sBody.Declare
V.Local.sHeader.Declare
V.Local.sEmail.Declare
V.Local.lEmDayCount.Declare
V.Local.sEmDays.Declare
V.Local.sEmDayStr.Declare
V.Local.sSupName.Declare
V.Local.sSubject.Declare
V.Local.sRecipient.Declare
v.Local.sEmpName.Declare
V.Local.lExcused.Declare
V.Local.fAvail.Declare
V.Local.fUsed.Declare
V.Local.sEmployee.Declare
V.Local.sName.Declare
V.Local.sEmSender.Declare
V.Local.sEmRecipient.Declare
V.Local.sMsgRet.Declare
V.Local.sFuneralStr.Declare
V.Local.lEmDayCount.Set(-1)
V.Local.sEmDays.Set("")
V.Local.bFuneral.Declare
V.Local.bFuneral.Set(False)

F.Intrinsic.Control.If(V.Screen.frmManual!txtEmployee.Value,"=","")
	F.Intrinsic.UI.Msgbox("Please select an Employee.")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.ElseIf(V.Screen.frmManual!txtHours.Value,"=","")
	F.Intrinsic.UI.Msgbox("Please enter the total hours you are requesting")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.ElseIf(V.Screen.frmManual!ddlReason.Value,"=","")
	F.Intrinsic.UI.Msgbox("Please select a reason for your request.")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Trim(V.Screen.frmManual!ddlReason.Value,V.Local.sFuneralStr)
F.Intrinsic.Control.If(V.Local.sFuneralStr,=,"Funeral")
	F.Intrinsic.Control.If(V.Screen.frmManual!txtExplanation.Value,=,"")
		F.Intrinsic.UI.Msgbox("Please describe your familial relation for the funeral")
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.Else
		F.Intrinsic.String.Build("Should this request use funeral hours instead of normal PTO?{0}{0}WARNING: If you select yes, funeral hours will be applied to ALL days in this request. Consider splitting them up if some are funeral and some are PTO.",V.Ambient.NewLine,V.Local.sFuneralStr)
		F.Intrinsic.UI.Msgbox(V.Local.sFuneralStr,"Funeral or PTO hours?",3,V.Local.sMsgRet)
		F.Intrinsic.Control.If(V.Local.sMsgRet,=,2)
			F.Intrinsic.Control.ExitSub
		F.Intrinsic.Control.ElseIf(V.Local.sMsgRet,=,7)
			V.Global.sCode.Set("05")
		F.Intrinsic.Control.Else
			V.Global.sCode.Set("07")
			V.Local.bFuneral.Set(False)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub("buildHoliday")
F.Intrinsic.Variable.ArgToVar("dHolidays",V.Local.dHolidays)

F.Intrinsic.Date.DateDiff("d",V.Screen.frmManual!dtpStart.Value,V.Screen.frmManual!dtpEnd.Value,V.Local.lDayRange)

F.Intrinsic.Control.For(V.Local.lCount,0,V.Local.lDayRange,1)

	F.Intrinsic.Date.DateAdd("d",V.Local.lCount,V.Screen.frmManual!dtpStart.Value,V.Local.dCurDay)
	
	F.Intrinsic.Control.For(V.Local.lHolCount,0,V.Local.dHolidays.UBound,1)
	
		F.Intrinsic.Control.If(V.Local.dHolidays(V.Local.lHolCount),"<>",V.Local.dCurDay)
		
			V.Local.bIsHoliday.Set(False)
			
		F.Intrinsic.Control.Else
		
			V.Local.bIsHoliday.Set(True)
			
			F.Intrinsic.Control.ExitFor(V.Local.lHolCount)
			
		F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.Next(V.Local.lHolCount)
	
	F.Intrinsic.Control.If(V.Local.bIsHoliday,"!=",True)
	
		F.Intrinsic.Date.Weekday(V.Local.dCurDay,V.Local.lWeekday)
		
		F.Intrinsic.Control.CallSub("isWeekday","Weekday",V.Local.lWeekday)
		
		F.Intrinsic.Variable.ArgToVar("bWeekday",V.Local.bWeekday)
			
		F.Intrinsic.Control.If(V.Local.bWeekday)

			F.Intrinsic.Math.Add(V.Local.lDayCount,1,V.Local.lDayCount)
			
			F.Intrinsic.Control.If(V.Local.sPTODays,"=","")
			
				V.Local.sPTODays.Set(V.Local.dCurDay)
	
			F.Intrinsic.Control.Else
			
				F.Intrinsic.String.Build("{0}*!*{1}",V.Local.sPTODays,V.Local.dCurDay,V.Local.sPTODays)
			
			F.Intrinsic.Control.EndIf
		
		F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.EndIf
	
F.Intrinsic.Control.Next(V.Local.lCount)

F.Intrinsic.String.Build("SELECT * FROM ZZ_PTO_EMPLOYEES WHERE EMPLOYEE = '{0}';",V.Screen.frmManual!txtEmployee.Value,V.Local.sSQL)
F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet,"<>","")
	F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
	V.Local.fAvail.Set(V.Local.sRet(2))
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Split(V.Local.sPTODays,"*!*",V.Local.dPTODays)

'Don't know what the purpose of this originially was but it was breaking crap so I got rid of it.
'F.Intrinsic.Control.If(V.Local.sPTODays.UBound,>=,1)
'	F.Intrinsic.String.Split(V.Local.sPTODays,"*!*",V.Local.dPTODays)
'F.Intrinsic.Control.Else
'	V.Local.dPTODays.Set(V.Local.sPTODays)
'F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Local.fAvail,<=,0)
	V.Local.fHourSplit.Set(0)
F.Intrinsic.Control.ElseIf(V.Screen.frmManual!txtHours.Value,>,V.Local.fAvail)
	F.Intrinsic.Math.Div(V.Local.fAvail,V.Local.lDayCount,V.Local.fHourSplit)
	F.Intrinsic.Math.Round(V.Local.fHourSplit,1,V.Local.fHourSplit)
F.Intrinsic.Control.Else
	F.Intrinsic.Math.Div(V.Screen.frmManual!txtHours.Value,V.Local.lDayCount,V.Local.fHourSplit)
	F.Intrinsic.Math.Round(V.Local.fHourSplit,1,V.Local.fHourSplit)
	
	F.Intrinsic.Control.If(V.Local.fHourSplit,">",8)
		F.Intrinsic.UI.Msgbox("Please make sure you have the right amount of hours, it looks like you have requested more hours than you need for the date range selected.")
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf



F.Intrinsic.Control.For(V.Local.lCount,0,V.Local.dPTODays.UBound,1)

	F.Intrinsic.Date.Year(V.Local.dPTODays(V.Local.lCount),V.Local.sYear)
	F.Intrinsic.Date.Month(V.Local.dPTODays(V.Local.lCount),V.Local.sMonth)
	F.Intrinsic.Date.Day(V.Local.dPTODays(V.Local.lCount),V.Local.sDay)
	
	F.Intrinsic.String.Len(V.Local.sMonth,V.Local.lMLen)
	F.Intrinsic.String.Len(V.Local.sDay,V.Local.lDLen)
	
	F.Intrinsic.Control.If(V.Local.lMLen,"=",1)
		F.Intrinsic.String.Build("0{0}",V.Local.sMonth,V.Local.sMonth)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.If(V.Local.lDLen,"=",1)
		F.Intrinsic.String.Build("0{0}",V.Local.sDay,V.Local.sDay)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.String.Build("{0}{1}{2}{3}",V.Local.sYear,V.Local.sMonth,V.Local.sDay,V.Screen.frmManual!txtEmployee.Value,V.Local.sUniqID)
	F.Intrinsic.String.Build("{0}-{1}-{2}",V.Local.sYear,V.Local.sMonth,V.Local.sDay,V.Local.sDate)
	
	V.Local.sRet.Set("")
	
	F.Intrinsic.String.Build("SELECT * FROM ZZ_PTO_APPROVAL WHERE UNIQID = '{0}';",V.Local.sUniqID,V.Local.sSQL)
	F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)
	F.Intrinsic.Control.If(V.Local.sRet,"<>","")
		F.Intrinsic.UI.Msgbox("This employee has already requested time off for this date range, please contact your supervisor or HR to make adjustments.")
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
	
	V.Local.sRet.Set("")
	
	F.Intrinsic.String.Build("SELECT * FROM ZZ_PTO_HR_APPROVED WHERE UNIQID = '{0}';",V.Local.sUniqID,V.Local.sSQL)
	F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)
	F.Intrinsic.Control.If(V.Local.sRet,"<>","")
		F.Intrinsic.UI.Msgbox("This employee has already requested time off for this date range, please contact your supervisor or HR to make adjustments.")
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
	
	V.Local.sRet.Set("")
	
	F.Intrinsic.String.Build("SELECT * FROM ZZ_PTO_HISTORY WHERE UNIQID = '{0}';",V.Local.sUniqID,V.Local.sSQL)
	F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)
	F.Intrinsic.Control.If(V.Local.sRet,"<>","")
		F.Intrinsic.UI.Msgbox("This employee has already requested time off for this date range, please contact your supervisor or HR to make adjustments.")
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
	
	V.Local.sRet.Set("")
	
	F.Intrinsic.String.Build("SELECT * FROM ZZ_PTO_EMPLOYEES WHERE EMPLOYEE = '{0}';",V.Screen.frmManual!txtEmployee.Value,V.Local.sSQL)
	F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)
	F.Intrinsic.Control.If(V.Local.sRet,"<>","")
		F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
		V.Local.sSupervsr.Set(V.Local.sRet(3))
		F.Intrinsic.String.Split(V.Local.sRet(4),",",V.Local.sSupName)
		F.Intrinsic.String.Trim(V.Local.sSupName(1),V.Local.sSupName(1))
		F.Intrinsic.String.Build("{0} {1}",V.Local.sSupName(1),V.Local.sSupName(0),V.Local.sSupName)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.String.Split(V.Screen.frmManual!txtName.Value,",",V.Local.sEmpName)
	F.Intrinsic.String.Trim(V.Local.sEmpName(0),V.Local.sEmpName(0))
	F.Intrinsic.String.Trim(V.Local.sEmpName(1),V.Local.sEmpName(1))
	F.Intrinsic.String.Build("{0} {1}",V.Local.sEmpName(1),V.Local.sEmpName(0),V.Local.sEmpName)
	
	F.Intrinsic.Control.If(V.Screen.frmManual!chkExcused.Value)
		V.Local.lExcused.Set(1)
	F.Intrinsic.Control.Else	
		V.Local.lExcused.Set(0)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.String.Build("INSERT INTO ZZ_PTO_CONFIRMED (UNIQID, EMPLOYEE, NAME, REQUEST_DATE, PTO_AMOUNT, REASON, FILL_TO_40, SUPERVSR, EXCUSED, EXPLANATION) VALUES ('{0}', '{1}', '{2}', '{3}', '{4}', '{5}', '{6}', '{7}', '{8}', '{9}');",V.Local.sUniqID,V.Screen.frmManual!txtEmployee.Value,V.Local.sEmpName,V.Local.sDate,V.Local.fHourSplit,V.Screen.frmManual!ddlReason.Value,0,V.Local.sSupName,V.Screen.frmManual!chkExcused.Value,"",V.Local.sSQL)
	F.ODBC.Connection!con.Execute(V.Local.sSQL)
	
	F.Intrinsic.String.Build("INSERT INTO ZZ_PTO_HISTORY (UNIQID, EMPLOYEE, NAME, REQUEST_DATE, PTO_AMOUNT, REASON, FILL_TO_40, SUPERVSR, EXCUSED, AVAILABLE) VALUES ('{0}', '{1}', '{2}', '{3}', '{4}', '{5}', '{6}', '{7}', '{8}', '{9}');",V.Local.sUniqID,V.Screen.frmManual!txtEmployee.Value,V.Local.sEmpName,V.Local.sDate,V.Local.fHourSplit,V.Screen.frmManual!ddlReason.Value,0,V.Local.sSupName,V.Screen.frmManual!chkExcused.Value,V.Local.fAvail,V.Local.sSQL)
	F.ODBC.Connection!con.Execute(V.Local.sSQL)
	
	F.Intrinsic.Math.Add(V.Local.lEmDayCount,1,V.Local.lEmDayCount)
	F.Intrinsic.Control.If(V.Local.sEmDays,=,"")
		V.Local.sEmDays.Set(V.Local.sDate)
	F.Intrinsic.Control.Else
		F.Intrinsic.String.Build("{0}*!*{1}",V.Local.sEmDays,V.Local.sDate,V.Local.sEmDays)
	F.Intrinsic.Control.EndIf
	
	V.Local.sEmployee.Set(V.Screen.frmManual!txtEmployee.Value)
	V.Local.sName.Set(V.Screen.frmManual!txtName.Value)
	F.Intrinsic.Control.CallSub("TAManual","sDate",V.Local.sDate,"sEmployee",V.Local.sEmployee,"fHours",V.Local.fHourSplit,"lExcused",V.Local.lExcused,"sName",V.Local.sName)
	
	F.Intrinsic.Control.If(V.Local.bFuneral)
	
	F.Intrinsic.Control.Else
		F.Intrinsic.Math.Sub(V.Local.sRet(2),V.Local.fHourSplit,V.Local.fAvail)
	
		F.Intrinsic.String.Build("UPDATE ZZ_PTO_EMPLOYEES SET AVAILABLE = '{0}' WHERE EMPLOYEE = '{1}'", V.Local.fAvail,V.Screen.frmManual!txtEmployee.Value,V.Local.sSQL)
		F.ODBC.Connection!con.Execute(V.Local.sSQL)
	F.Intrinsic.Control.EndIf
	
F.Intrinsic.Control.Next(V.Local.lCount)

V.Local.lCount.Set(0)
F.Intrinsic.Control.If(V.Local.lEmDayCount,=,0)
	V.Local.sEmDayStr.Set(V.Local.sEmDays)
F.Intrinsic.Control.Else
	F.Intrinsic.String.Split(V.Local.sEmDays,"*!*",V.Local.sEmDays)
	F.Intrinsic.Control.For(V.Local.lCount,0,V.Local.lEmDayCount,1)
		F.Intrinsic.Control.If(V.Local.sEmDayStr,=,"")
			V.Local.sEmDayStr.Set(V.Local.sEmDays(V.Local.lCount))
		F.Intrinsic.Control.Else
			F.Intrinsic.String.Build("{0}, {1}",V.Local.sEmDayStr,V.Local.sEmDays(V.Local.lCount),V.Local.sEmDayStr)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.lCount)
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Build("SUP_ID = '{0}'",V.Local.sSupervsr,V.Local.sCrit)
F.Data.DataTable.Select("dtSup",V.Local.sCrit,V.Local.sRet)

F.Intrinsic.Control.If(V.Local.sRet,=,"***NORETURN***")
	F.Intrinsic.UI.Msgbox("This employee's supervisor has not been set up with a supervisor login. Please make sure to notify them of this slip.")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
F.Intrinsic.String.Trim(V.DataTable.dtSup(V.Local.sRet).EMAIL!FieldVal,V.Local.sEmail)

F.Intrinsic.String.Build("EMPLOYEE = '{0}'",V.Local.sSupervsr,V.Local.sCrit)
F.Data.DataTable.Select("dtFltEmp",V.Local.sCrit,V.Local.sRet)
F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
F.Intrinsic.String.Split(V.DataTable.dtFltEmp(V.Local.sRet).NAME!FieldVal,",",V.Local.sSupName)
F.Intrinsic.String.Trim(V.Local.sSupName(1),V.Local.sSupName(1))
F.Intrinsic.String.Build("{0} {1}",V.Local.sSupName(1),V.Local.sSupName(0),V.Local.sRecipient)

F.Intrinsic.String.Build("HR has entered a new PTO slip for {1}.",V.Local.sEmpName,V.Local.sEmDayStr,V.Local.sBody)
F.Intrinsic.String.Build("New PTO Slip Entered by HR for {0}",V.Local.sEmpName,V.Local.sSubject)

'F.Global.Messaging.CreateEMMessage(V.Local.sEmail,V.Local.sRecipient,V.Local.sEmail,"PTO System",V.Local.sSubject,V.Local.sBody)

F.Intrinsic.String.Build("{0}*!*{1}",V.Local.sEmail,"PTO System",V.Local.sEmSender)
F.Intrinsic.String.Build("{0}*!*{1}","PTO System",V.Local.sEmail,V.Local.sEmRecipient)
F.Global.Messaging.QueueMessage("VSF",V.Local.sSupervsr,"ZZ_OFFICE_PTO_SLIP",V.Local.sSubject,V.Local.sEmSender,V.Local.sEmRecipient,V.Local.sBody)

F.Intrinsic.UI.Msgbox("PTO Scheduled!")

Program.Sub.cmdManConfirm_Click.End

Program.Sub.TAManual.Start
V.Local.bSkip.Declare
V.Local.sDate.Declare
V.Local.sSelDate.Declare
V.Local.sEmployee.Declare
V.Local.fHours.Declare
V.Local.lExcused.Declare
V.Local.sRetVar.Declare
V.Local.bTimeForm.Declare
V.Local.sRetTime.Declare
V.Local.sRetReg.Declare
V.Local.lPTOInHr.Declare
V.Local.sPTOInHr.Declare
V.Local.sPTOInMin.Declare
V.Local.lPTOInMin.Declare
V.Local.sTimeIn.Declare
V.Local.lFloorHr.Declare
V.Local.fModMin.Declare
V.Local.fFloorMin.Declare
V.Local.lOutHr.Declare
V.Local.lOutMin.Declare
V.Local.sOutHr.Declare
V.Local.sOutMin.Declare
V.Local.sTimeOut.Declare
V.Local.sCrit.Declare
V.Local.sReturn.Declare
V.Local.sYear.Declare
V.Local.sMonth.Declare
V.Local.sDay.Declare
V.Local.lMLen.Declare
V.Local.lDLen.Declare
V.Local.sChgDate.Declare
V.Local.sHour.Declare
V.Local.sMinute.Declare
V.Local.sChgTime.Declare
V.Local.sExcused.Declare
V.Local.sName.Declare
V.Local.dTAOut.Declare
V.Local.sSQL.Declare
V.Local.lHLen.Declare

V.Local.bSkip.Set(False)

F.Intrinsic.Variable.ArgToVar("sDate",V.Local.sDate)
F.Intrinsic.Variable.ArgToVar("sEmployee",V.Local.sEmployee)
F.Intrinsic.Variable.ArgToVar("fHours",V.Local.fHours)
F.Intrinsic.Variable.ArgToVar("lExcused",V.Local.lExcused)
F.Intrinsic.Variable.ArgToVar("sName",V.Local.sName)
F.Intrinsic.String.Replace(V.Local.sDate,"-","",V.Local.sSelDate)
F.Intrinsic.String.Trim(V.Local.sName,V.Local.sName)

'HOURS_HH
F.Intrinsic.Math.Floor(V.Local.fHours,V.Local.lFloorHr)

'HOURS_MM
F.Intrinsic.Math.Mod(V.Local.fHours,1,V.Local.fModMin)
F.Intrinsic.Math.Mult(V.Local.fModMin,60,V.Local.fModMin)
F.Intrinsic.Math.Round(V.Local.fModMin,0,V.Local.fFloorMin)

'Getting data for filling in DEPT and SHIFT for the insert into TA
F.Intrinsic.String.Build("EMPLOYEE = '{0}'",V.Local.sEmployee,V.Local.sCrit)
F.Data.DataTable.Select("dtEmpMstr",V.Local.sCrit,V.Local.sReturn)

'Changed Date (Current Date)
F.Intrinsic.Date.Year(V.Ambient.Now,V.Local.sYear)
F.Intrinsic.Date.Month(V.Ambient.Now,V.Local.sMonth)
F.Intrinsic.Date.Day(V.Ambient.Now,V.Local.sDay)
F.Intrinsic.String.Len(V.Local.sMonth,V.Local.lMLen)
F.Intrinsic.String.Len(V.Local.sDay,V.Local.lDLen)
F.Intrinsic.Control.If(V.Local.lMLen,"=",1)
	F.Intrinsic.String.Build("0{0}",V.Local.sMonth,V.Local.sMonth)
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.If(V.Local.lDLen,"=",1)
	F.Intrinsic.String.Build("0{0}",V.Local.sDay,V.Local.sDay)
F.Intrinsic.Control.EndIf
F.Intrinsic.String.Build("{0}{1}{2}",V.Local.sYear,V.Local.sMonth,V.Local.sDay,V.Local.sChgDate)

'Changed Time (Current Time)
F.Intrinsic.Date.Hour(V.Ambient.Now,V.Local.sHour)
F.Intrinsic.Date.Minute(V.Ambient.Now,V.Local.sMinute)
F.Intrinsic.String.Len(V.Local.sHour,V.Local.lHLen)
F.Intrinsic.String.Len(V.Local.sMinute,V.Local.lMLen)
F.Intrinsic.Control.If(V.Local.lHLen,=,1)
	F.Intrinsic.String.Build("0{0}",V.Local.sHour,V.Local.sHour)
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.If(V.Local.lMLen,=,1)
	F.Intrinsic.String.Build("0{0}",V.Local.sMinute,V.Local.sMinute)
F.Intrinsic.Control.EndIf
F.Intrinsic.String.Build("{0}{1}0000",V.Local.sHour,V.Local.sMinute,V.Local.sChgTime)

F.Intrinsic.Control.If(V.Local.sExcused,=,1)
	V.Local.sExcused.Set("Y")
F.Intrinsic.Control.Else
	V.Local.sExcused.Set("N")
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Build("INSERT INTO ZZ_PTO_TAQ (EMPLOYEE, CHARGE_DATE, DATE_IN, DATE_OUT, NAME, DEPT, SHIFT, REC_GROUP, REC_TYPE, EARNINGS_CODE, PAID, EXCUSED, BAL_AS_DATE, DATE_LAST_CHG, TIME_LAST_CHG, LAST_CHG_BY, LAST_CHG_PROG, HOURS_HH, HOURS_MM, DOLLAR_AMT, ACTUAL_DATE, PAYROLL_LOCK) VALUES ('{0}', '{1}', '{1}', '{1}', '{2}', '{3}', '{4}', '{3}', 'A', '{12}', 'Y', '{5}', '00000000', '{6}', '{7}', '{8}', 'ZZPTOHR', '{9}', '{10}', '0', '{11}', '0')",V.Local.sEmployee, V.Local.sSelDate,V.Local.sName, V.DataTable.dtEmpMstr(V.Local.sReturn).DEPT_EMPLOYEE!FieldVal, V.DataTable.dtEmpMstr(V.Local.sReturn).SHIFT!FieldVal, V.Local.sExcused, V.Local.sChgDate, V.Local.sChgTime, V.Caller.User, V.Local.lFloorHr, V.Local.fFloorMin,V.Local.sDate,V.Global.sCode, V.Local.sSQL)

F.ODBC.Connection!con.Execute(V.Local.sSQL)

V.Global.sCode.Set("05")

Program.Sub.TAManual.End

Program.Sub.cmdManCancel_Click.Start
gui.frm40Queue..Visible(False)
gui.frmApproved..Visible(True)
gui.frmAddEmp..Visible(False)
gui.frmPTO..Visible(False)
gui.frmDenied..Visible(False)
gui.frmManual..Visible(False)
Program.Sub.cmdManCancel_Click.End

Program.Sub.dtpStart_Change.Start
gui.frmManual.dtpEnd.Value(V.Screen.frmManual!dtpStart.Value)
Program.Sub.dtpStart_Change.End

Program.Sub.cmdManEmpBrowser_Click.Start
V.Local.sTitles.Declare
V.Local.sSQL.Declare
V.Local.iWidths.Declare
V.Local.sReturn.Declare
V.Local.sAvailable.Declare

F.Intrinsic.String.Split("Employee*!*Name*!*Available PTO*!*Supervisor ID*!*Supervisor Name*!*Pay Type*!*Hire Date*!*PTO Step","*!*",V.Local.sTitles)
F.Intrinsic.String.Split("600*!*1600*!*800*!*600*!*1600*!*600*!*600*!*600","*!*",V.Local.iWidths)

F.Intrinsic.UI.SetBrowserHotTypeAhead(True)

F.Intrinsic.UI.Browser("Select an Employee To Edit","con","SELECT EMPLOYEE, NAME, AVAILABLE, SUP_ID, SUPERVSR, PAY_TYPE, HIRE_DATE, PTO_STEP FROM ZZ_PTO_EMPLOYEES",V.Local.sTitles,V.Local.iWidths,16000,12000,V.Local.sReturn)

F.Intrinsic.Control.If(V.Local.sReturn,=,"***CANCEL***")
	F.Intrinsic.UI.Msgbox("No Employee was Selected!")
F.Intrinsic.Control.Else
	F.Intrinsic.String.Split(V.Local.sReturn,"*!*",V.Local.sReturn)
	gui.frmManual.txtEmployee.Text(V.Local.sReturn(0))
	gui.frmManual.txtName.Text(V.Local.sReturn(1))
	F.Intrinsic.String.Build("Available: {0}",V.Local.sReturn(2),V.Local.sAvailable)
	gui.frmManual.lblAvailable.Text(V.Local.sAvailable)
F.Intrinsic.Control.EndIf

Program.Sub.cmdManEmpBrowser_Click.End

Program.Sub.frmManual_UnLoad.Start
gui.frm40Queue..Visible(False)
gui.frmApproved..Visible(True)
gui.frmAddEmp..Visible(False)
gui.frmPTO..Visible(False)
gui.frmDenied..Visible(False)
gui.frmManual..Visible(False)
Program.Sub.frmManual_UnLoad.End

Program.Sub.cmdManualPTO_Click.Start
gui.frm40Queue..Visible(False)
gui.frmApproved..Visible(False)
gui.frmDenied..Visible(False)
F.Intrinsic.Control.If(V.Global.bManual)
	gui.frmManual..Visible(True)
F.Intrinsic.Control.Else
	V.Global.bManual.Set(True)
	gui.frmManual..Show()
F.Intrinsic.Control.EndIf

Program.Sub.cmdManualPTO_Click.End

Program.Sub.cmdSaveSchedEdit_Click.Start
V.Local.sUniqID.Declare
V.Local.sYear.Declare
V.Local.sMonth.Declare
V.Local.sDay.Declare
V.Local.lMLen.Declare
V.Local.lDLen.Declare
V.Local.sReqDate.Declare
V.Local.sDashReqDate.Declare
V.Local.sSQL.Declare
V.Local.fDif.Declare
V.Local.sRet.Declare
V.Local.fCurReqHrs.Declare
V.Local.fCurAvailHrs.Declare
V.Local.fNewAvailHrs.Declare
V.Local.lExcused.Declare
V.Local.lFill.Declare
V.Local.sExcused.Declare
V.Local.lFloorHr.Declare
V.Local.fModMin.Declare
V.Local.fFloorMin.Declare

F.Intrinsic.Date.Year(V.Screen.frmDetail!dtpReqDt.Value,V.Local.sYear)
F.Intrinsic.Date.Month(V.Screen.frmDetail!dtpReqDt.Value,V.Local.sMonth)
F.Intrinsic.Date.Day(V.Screen.frmDetail!dtpReqDt.Value,V.Local.sDay)
F.Intrinsic.String.Len(V.Local.sMonth,V.Local.lMLen)
F.Intrinsic.String.Len(V.Local.sDay,V.Local.lDLen)
F.Intrinsic.Control.If(V.Local.lMLen,"=",1)
	F.Intrinsic.String.Build("0{0}",V.Local.sMonth,V.Local.sMonth)
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.If(V.Local.lDLen,"=",1)
	F.Intrinsic.String.Build("0{0}",V.Local.sDay,V.Local.sDay)
F.Intrinsic.Control.EndIf
F.Intrinsic.String.Build("{0}{1}{2}",V.Local.sYear,V.Local.sMonth,V.Local.sDay,V.Local.sReqDate)
F.Intrinsic.String.Build("{0}-{1}-{2}",V.Local.sYear,V.Local.sMonth,V.Local.sDay,V.Local.sDashReqDate)

F.Intrinsic.String.Build("{0}{1}",V.Local.sReqDate,V.Screen.frmDetail!txtIDNo.Value,V.Local.sUniqID)

F.Intrinsic.String.Build("SELECT * FROM ZZ_PTO_CONFIRMED WHERE UNIQID = '{0}'",V.Local.sUniqID,V.Local.sSQL)
F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)

F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
V.Local.fCurReqHrs.Set(V.Local.sRet(4))

F.Intrinsic.Math.Sub(V.Screen.frmDetail!txtPTOAmt.Value,V.Local.fCurReqHrs,V.Local.fDif)

F.Intrinsic.Control.If(V.Local.fDif,<>,0)
	F.Intrinsic.String.Build("SELECT * FROM ZZ_PTO_EMPLOYEES WHERE EMPLOYEE = '{0}'", V.Screen.frmDetail!txtIDNo.Value,V.Local.sSQL)
	F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)
	F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
	V.Local.fCurAvailHrs.Set(V.Local.sRet(2))
	F.Intrinsic.Math.Sub(V.Local.fCurAvailHrs,V.Local.fDif,V.Local.fNewAvailHrs)
	F.Intrinsic.String.Build("UPDATE ZZ_PTO_EMPLOYEES SET AVAILABLE = '{0}' WHERE EMPLOYEE = '{1}'",V.Local.fNewAvailHrs,V.Screen.frmDetail!txtIDNo.Value,V.Local.sSQL)
	F.ODBC.Connection!con.Execute(V.Local.sSQL)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Screen.frmDetail!chkExc.Value)
	V.Local.lExcused.Set(1)
	V.Local.sExcused.Set("Y")
F.Intrinsic.Control.Else
	V.Local.lExcused.Set(0)
	V.Local.sExcused.Set("N")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Screen.frmDetail!chkFill.Value)
	V.Local.lFill.Set(1)
F.Intrinsic.Control.Else
	V.Local.lFill.Set(0)
F.Intrinsic.Control.EndIf

'HOURS_HH
F.Intrinsic.Math.Floor(V.Screen.frmDetail!txtPTOAmt.Value,V.Local.lFloorHr)

'HOURS_MM
F.Intrinsic.Math.Mod(V.Screen.frmDetail!txtPTOAmt.Value,1,V.Local.fModMin)
F.Intrinsic.Math.Mult(V.Local.fModMin,60,V.Local.fModMin)
F.Intrinsic.Math.Round(V.Local.fModMin,0,V.Local.fFloorMin)

F.Intrinsic.String.Build("UPDATE ZZ_PTO_CONFIRMED SET PTO_AMOUNT = '{0}', REASON = '{1}', FILL_TO_40 = '{2}', EXCUSED = '{3}' WHERE UNIQID = '{4}';",V.Screen.frmDetail!txtPTOAmt.Value,V.Screen.frmDetail!txtReason.Value,V.Local.lFill,V.Local.lExcused,V.Local.sUniqID,V.Local.sSQL)
F.ODBC.Connection!con.Execute(V.Local.sSQL)

F.Intrinsic.String.Build("UPDATE ZZ_PTO_HISTORY SET PTO_AMOUNT = '{0}', REASON = '{1}', FILL_TO_40 = '{2}', EXCUSED = '{3}' WHERE UNIQID = '{4}'",V.Screen.frmDetail!txtPTOAmt.Value,V.Screen.frmDetail!txtReason.Value,V.Local.lFill,V.Local.lExcused,V.Local.sUniqID,V.Local.sSQL)
F.ODBC.Connection!con.Execute(V.Local.sSQL)

F.Intrinsic.String.Build("UPDATE TIME_ATTENDANCE SET EXCUSED = '{0}', HOURS_HH = '{1}', HOURS_MM = '{2}' WHERE EMPLOYEE LIKE '%{3}%' AND DATE_IN LIKE '%{4}%' AND REC_TYPE = 'A';",V.Local.sExcused,V.Local.lFloorHr,V.Local.fFloorMin,V.Screen.frmDetail!txtIDNo.Value,V.Local.sReqDate,V.Local.sSQL)
F.ODBC.Connection!con.Execute(V.Local.sSQL)

F.Intrinsic.String.Build("UPDATE TAQ SET EXCUSED = '{0}', HOURS_HH = '{1}', HOURS_MM = '{2}' WHERE EMPLOYEE LIKE '%{3}%' AND DATE_IN LIKE '%{4}%' AND REC_TYPE = 'A';",V.Local.sExcused,V.Local.lFloorHr,V.Local.fFloorMin,V.Screen.frmDetail!txtIDNo.Value,V.Local.sReqDate,V.Local.sSQL)
F.ODBC.Connection!con.Execute(V.Local.sSQL)

F.Intrinsic.UI.Msgbox("Record Changes Saved!")

Program.Sub.cmdSaveSchedEdit_Click.End

Program.Sub.frmSuper_UnLoad.Start
gui.frmSuper..Visible(False)
gui.frmApproved..Visible(True)
gui.frmApproved..SetFocus

Program.Sub.frmSuper_UnLoad.End

Program.Sub.cmdRemSupBrs_Click.Start
V.Local.sTitles.Declare
V.Local.iWidths.Declare
V.Local.sReturn.Declare

F.Intrinsic.String.Split("Employee*!*Name","*!*",V.Local.sTitles)
F.Intrinsic.String.Split("600*!*1600","*!*",V.Local.iWidths)

F.Intrinsic.UI.SetBrowserHotTypeAhead(True)

F.Intrinsic.UI.Browser("Select a Supervisor to Remove","con","SELECT * FROM ZZ_PTO_SF_SUPERVSR",V.Local.sTitles,V.Local.iWidths,V.Local.sReturn)

F.Intrinsic.Control.If(V.Local.sReturn,"=","***CANCEL***")
	F.Intrinsic.UI.Msgbox("No Supervisor was Selected!")
F.Intrinsic.Control.Else
	F.Intrinsic.String.Split(V.Local.sReturn,"*!*",V.Local.sReturn)
	gui.frmSuper.txtRemID.Text(V.Local.sReturn(0))
	gui.frmSuper.txtRemName.Text(V.Local.sReturn(1))
F.Intrinsic.Control.EndIf

Program.Sub.cmdRemSupBrs_Click.End

Program.Sub.cmdRemoveSuper_Click.Start
V.Local.sSQL.Declare

F.Intrinsic.String.Build("DELETE FROM ZZ_PTO_SF_SUPERVSR WHERE EMPLOYEE = '{0}';",V.Screen.frmSuper!txtRemID.Value,V.Local.sSQl)
F.ODBC.Connection!con.Execute(V.Local.sSQL)

F.Intrinsic.UI.Msgbox("Supervisor removed from shop floor supervisor list!")

Program.Sub.cmdRemoveSuper_Click.End

Program.Sub.cmdAddSupBrs_Click.Start
V.Local.sTitles.Declare
V.Local.iWidths.Declare
V.Local.sReturn.Declare

F.Intrinsic.String.Split("Employee*!*Name","*!*",V.Local.sTitles)
F.Intrinsic.String.Split("600*!*1600","*!*",V.Local.iWidths)

F.Intrinsic.UI.SetBrowserHotTypeAhead(True)

F.Intrinsic.UI.Browser("Select an Employee to add as a Shop Floor Supervisor","con","SELECT EMPLOYEE, NAME FROM ZZ_PTO_EMPLOYEES",V.Local.sTitles,V.Local.iWidths,V.Local.sReturn)

F.Intrinsic.Control.If(V.Local.sReturn,"=","***CANCEL***")
	F.Intrinsic.UI.Msgbox("No Employee was Selected!")
F.Intrinsic.Control.Else
	F.Intrinsic.String.Split(V.Local.sReturn,"*!*",V.Local.sReturn)
	gui.frmSuper.txtAddID.Text(V.Local.sReturn(0))
	gui.frmSuper.txtAddName.Text(V.Local.sReturn(1))
F.Intrinsic.Control.EndIf

Program.Sub.cmdAddSupBrs_Click.End

Program.Sub.cmdAddSuper_Click.Start
V.Local.sSQL.Declare

F.Intrinsic.String.Build("INSERT INTO ZZ_PTO_SF_SUPERVSR (EMPLOYEE, NAME) VALUES ('{0}', '{1}');",V.Screen.frmSuper!txtAddID.Value,V.Screen.frmSuper!txtAddName.Value,V.Local.sSQL)
F.ODBC.Connection!con.Execute(V.Local.sSQL)

F.Intrinsic.UI.Msgbox("Supervisor added to the shop floor supervisor list!")
Program.Sub.cmdAddSuper_Click.End

Program.Sub.cmdSuper_Click.Start
F.Intrinsic.Control.If(V.Global.bSuper)
	gui.frm40Queue..Visible(False)
	gui.frmDenied..Visible(False)
	gui.frmApproved..Visible(False)
	gui.frmLoading..Visible(False)
	gui.frmSuper..Visible(True)
F.Intrinsic.Control.Else
	V.Global.bSuper.Set(True)
	gui.frmDenied..Visible(False)
	gui.frm40Queue..Visible(False)
	gui.frmLoading..Visible(False)
	gui.frmApproved..Visible(False)
	gui.frmSuper..Show
F.Intrinsic.Control.EndIf
Program.Sub.cmdSuper_Click.End

Program.Sub.frmPassword_UnLoad.Start
gui.frmPassword..Visible(False)
gui.frmApproved..Visible(True)
gui.frmApproved..SetFocus
Program.Sub.frmPassword_UnLoad.End

Program.Sub.cmdPassConfirm_Click.Start
V.Local.sPassword.Declare
V.Local.sSQL.Declare

F.Intrinsic.Control.If(V.Screen.frmPassword!txtID.Value,"=","")
	F.Intrinsic.UI.Msgbox("Please enter an ID or select a supervisor")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.ElseIf(V.Screen.frmPassword!txtUser.Value,"=","")
	F.Intrinsic.UI.Msgbox("Please enter a username or select a supervisor")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.ElseIf(V.Screen.frmPassword!txtPass.Value,"=","")
	F.Intrinsic.UI.Msgbox("Please enter a password")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.ElseIf(V.Screen.frmPassword!txtRePass.Value,"=","")
	F.Intrinsic.UI.Msgbox("Please re-enter the password")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.ElseIf(V.Screen.frmPassword!txtPass.Value,"<>",V.Screen.frmPassword!txtRePass.Value)
	F.Intrinsic.UI.Msgbox("Please make sure your passwords match")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.String.WeakEncryption(V.Screen.frmPassword!txtPass.Value,V.Local.sPassword)

F.Intrinsic.String.Build("UPDATE ZZ_PTO_LOGIN SET PASSWD = '{0}' WHERE USERNAME = '{1}';",V.Local.sPassword,V.Screen.frmPassword!txtUser.Value,V.Local.sSQL)

F.ODBC.Connection!con.Execute(V.Local.sSQL)

F.Intrinsic.UI.Msgbox("Password Updated!")

Program.Sub.cmdPassConfirm_Click.End

Program.Sub.cmdPassBrowse_Click.Start
V.Local.sTitles.Declare
V.Local.iWidths.Declare
V.Local.sReturn.Declare

F.Intrinsic.String.Split("Username*!*Sup_ID","*!*",V.Local.sTitles)
F.Intrinsic.String.Split("1200*!*600","*!*",V.Local.iWidths)

F.Intrinsic.UI.Browser("Select a Supervisor","con","SELECT USERNAME, SUP_ID FROM ZZ_PTO_LOGIN;",V.Local.sTitles,V.Local.iWidths,6000,9000,V.Local.sReturn)

F.Intrinsic.Control.If(V.Local.sReturn,"=","***CANCEL***")
	F.Intrinsic.UI.Msgbox("No Supervisor was Selected!")
F.Intrinsic.Control.Else
	F.Intrinsic.String.Split(V.Local.sReturn,"*!*",V.Local.sReturn)
	gui.frmPassword.txtID.Text(V.Local.sReturn(1))
	gui.frmPassword.txtUser.Text(V.Local.sReturn(0))
F.Intrinsic.Control.EndIf

Program.Sub.cmdPassBrowse_Click.End

Program.Sub.cmdPassword_Click.Start
F.Intrinsic.Control.If(V.Global.bPassword)
	gui.frm40Queue..Visible(False)
	gui.frmDenied..Visible(False)
	gui.frmApproved..Visible(False)
	gui.frmLoading..Visible(False)
	gui.frmPassword..Visible(True)
F.Intrinsic.Control.Else
	V.Global.bPassword.Set(True)
	gui.frmDenied..Visible(False)
	gui.frm40Queue..Visible(False)
	gui.frmLoading..Visible(False)
	gui.frmApproved..Visible(False)
	gui.frmPassword..Show
F.Intrinsic.Control.EndIf
Program.Sub.cmdPassword_Click.End

Program.Sub.cmdDeleteEmployee_Click.Start
F.Intrinsic.Control.If(V.Global.bDelete)
	gui.frm40Queue..Visible(False)
	gui.frmDenied..Visible(False)
	gui.frmApproved..Visible(False)
	gui.frmLoading..Visible(False)
	gui.frmDelete..Visible(True)
F.Intrinsic.Control.Else
	V.Global.bDelete.Set(True)
	gui.frmDenied..Visible(False)
	gui.frm40Queue..Visible(False)
	gui.frmLoading..Visible(False)
	gui.frmApproved..Visible(False)
	gui.frmDelete..Show
F.Intrinsic.Control.EndIf
Program.Sub.cmdDeleteEmployee_Click.End

Program.Sub.cmdBrowseDelete_Click.Start
V.Local.sTitles.Declare
V.Local.iWidths.Declare
V.Local.sReturn.Declare

F.Intrinsic.String.Split("ID*!*Name","*!*",V.Local.sTitles)
F.Intrinsic.String.Split("600*!*1400","*!*",V.Local.iWidths)

F.Intrinsic.UI.Browser("Select an Employee","con","SELECT EMPLOYEE, NAME FROM ZZ_PTO_EMPLOYEES;",V.Local.sTitles,V.Local.iWidths,6000,9000,V.Local.sReturn)

F.Intrinsic.Control.If(V.Local.sReturn,"=","***CANCEL***")
	F.Intrinsic.UI.Msgbox("No Employee was Selected!")
F.Intrinsic.Control.Else
	F.Intrinsic.String.Split(V.Local.sReturn,"*!*",V.Local.sReturn)
	gui.frmDelete.txtID.Text(V.Local.sReturn(0))
	gui.frmDelete.txtName.Text(V.Local.sReturn(1))
F.Intrinsic.Control.EndIf

Program.Sub.cmdBrowseDelete_Click.End

Program.Sub.frmDelete_UnLoad.Start
gui.frmDelete..Visible(false)
gui.frmApproved..Visible(true)
Program.Sub.frmDelete_UnLoad.End

Program.Sub.cmdDeleteEmpConf_Click.Start
V.Local.sRet.Declare
V.Local.sSQL.Declare
V.Local.sDay.Declare
V.Local.sMonth.Declare
V.Local.sYear.Declare
V.Local.lDLen.Declare
V.Local.lMLen.Declare
V.Local.sHireDate.Declare
V.Local.sStepDate.Declare

F.Intrinsic.Control.If(V.Screen.frmDelete!txtID.Value,=,"")
	F.Intrinsic.UI.Msgbox("Please select an Employee.")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.UI.Msgbox("Are you sure you would like to delete this employee from the PTO system?","Delete Employee?",4,V.Local.sRet)

F.Intrinsic.Control.If(V.Local.sRet,=,6)

	F.Intrinsic.String.Build("SELECT * FROM ZZ_PTO_EMPLOYEES WHERE EMPLOYEE = '{0}'",V.Screen.frmDelete!txtID.Value,V.Local.sSQL)
	F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)
	
	F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
	
	F.Intrinsic.Date.Year(V.Local.sRet(6),V.Local.sYear)
	F.Intrinsic.Date.Month(V.Local.sRet(6),V.Local.sMonth)
	F.Intrinsic.Date.Day(V.Local.sRet(6),V.Local.sDay)
	F.Intrinsic.String.Len(V.Local.sMonth,V.Local.lMLen)
	F.Intrinsic.String.Len(V.Local.sDay,V.Local.lDLen)
	F.Intrinsic.Control.If(V.Local.lMLen,"=",1)
		F.Intrinsic.String.Build("0{0}",V.Local.sMonth,V.Local.sMonth)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.If(V.Local.lDLen,"=",1)
		F.Intrinsic.String.Build("0{0}",V.Local.sDay,V.Local.sDay)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.String.Build("{0}-{1}-{2}",V.Local.sYear,V.Local.sMonth,V.Local.sDay,V.Local.sHireDate)
	
	F.Intrinsic.Date.Year(V.Local.sRet(7),V.Local.sYear)
	F.Intrinsic.Date.Month(V.Local.sRet(7),V.Local.sMonth)
	F.Intrinsic.Date.Day(V.Local.sRet(7),V.Local.sDay)
	F.Intrinsic.String.Len(V.Local.sMonth,V.Local.lMLen)
	F.Intrinsic.String.Len(V.Local.sDay,V.Local.lDLen)
	F.Intrinsic.Control.If(V.Local.lMLen,"=",1)
		F.Intrinsic.String.Build("0{0}",V.Local.sMonth,V.Local.sMonth)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.If(V.Local.lDLen,"=",1)
		F.Intrinsic.String.Build("0{0}",V.Local.sDay,V.Local.sDay)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.String.Build("{0}-{1}-{2}",V.Local.sYear,V.Local.sMonth,V.Local.sDay,V.Local.sStepDate)
	
	F.Intrinsic.String.Build("INSERT INTO ZZ_PTO_DELETED (EMPLOYEE, NAME, AVAILABLE, SUP_ID, SUPERVSR, PAY_TYPE, HIRE_DATE, PTO_STEP_DATE, PTO_STEP, DELETE_REASON) VALUES ('{0}', '{1}', '{2}', '{3}', '{4}', '{5}', '{6}', '{7}', '{8}', '{9}');",V.Local.sRet(0),V.Local.sRet(1),V.Local.sRet(2),V.Local.sRet(3),V.Local.sRet(4),V.Local.sRet(5),V.Local.sHireDate,V.Local.sStepDate,V.Local.sRet(8),V.Screen.frmDelete!txtReason.Value,V.Local.sSQL)
	F.ODBC.Connection!con.Execute(V.Local.sSQL)
	
	F.Intrinsic.String.Build("DELETE FROM ZZ_PTO_EMPLOYEES WHERE EMPLOYEE = '{0}';",V.Screen.frmDelete!txtID.Value,V.Local.sSQL)
	F.ODBC.Connection!con.Execute(V.Local.sSQL)
	
	F.Intrinsic.UI.Msgbox("Employee deleted!")

F.Intrinsic.Control.EndIf


Program.Sub.cmdDeleteEmpConf_Click.End

Program.Sub.cmdManualApproval_Click.Start
V.Local.sTitles.Declare
V.Local.sSQL.Declare
V.Local.iWidths.Declare
V.Local.sReturn.Declare

F.Intrinsic.String.Split("ID*!*Name","*!*",V.Local.sTitles)
F.Intrinsic.String.Split("600*!*1600","*!*",V.Local.iWidths)

F.Intrinsic.UI.Browser("Select a Supervisor","con","SELECT SUPERS.SUP_ID, EMPLOYEES.NAME FROM ZZ_PTO_EMPLOYEES AS EMPLOYEES RIGHT JOIN ZZ_PTO_LOGIN AS SUPERS ON EMPLOYEES.EMPLOYEE = SUPERS.SUP_ID",V.Local.sTitles,V.Local.iWidths,7000,12000,V.Local.sReturn)

F.Intrinsic.Control.If(V.Local.sReturn,=,"***CANCEL***")
	F.Intrinsic.UI.Msgbox("No Supervisor was Selected!")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.Else
	F.Intrinsic.String.Split(V.Local.sReturn,"*!*",V.Local.sReturn)
	F.Intrinsic.Control.CallSub("loadAppQueueE","Supervisor",V.Local.sReturn(0))
	
	F.Intrinsic.Control.CallSub("buildApprovalQueueV")
	
	gui.frmApproval.gsgcApproval.MainView("gsgvQueue")
	
	gui.frmApproval.cmdSaveApproval.Visible(True)
	
	F.Intrinsic.Control.If(V.Global.bApproval)
		gui.frmApproval..Visible(True)
		gui.frm40Queue..Visible(False)
		gui.frmDenied..Visible(False)
		gui.frmApproved..Visible(False)
	F.Intrinsic.Control.Else
		gui.frmApproval..Show()
		gui.frm40Queue..Visible(False)
		gui.frmDenied..Visible(False)
		gui.frmApproved..Visible(False)
		V.Global.bApproval.Set(True)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

Program.Sub.cmdManualApproval_Click.End

Program.Sub.loadAppQueueE.Start
V.Local.sSupervisor.Declare
V.Local.sSQL.Declare

F.Intrinsic.Variable.ArgToVar("Supervisor",V.Local.sSupervisor)

F.Intrinsic.Control.If(V.Global.bApproval)
	gui.frmApproval.gsgcApproval.ClearGrouping("gsgvQueue")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataTable.dtQueue.Exists)
	F.Data.DataView.Close("dtQueue","dvQueue")
	F.Data.DataTable.Close("dtQueue")
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Build("SELECT QUEUE.UNIQID, QUEUE.EMPLOYEE, QUEUE.NAME, QUEUE.REQUEST_DATE, QUEUE.PTO_AMOUNT, QUEUE.REASON, QUEUE.FILL_TO_40, QUEUE.SUPERVSR, QUEUE.EXPLANATION, EMPLOYEES.AVAILABLE FROM ZZ_PTO_APPROVAL AS QUEUE LEFT JOIN ZZ_PTO_EMPLOYEES AS EMPLOYEES ON QUEUE.EMPLOYEE = EMPLOYEES.EMPLOYEE WHERE QUEUE.SUPERVSR = '{0}'",V.Local.sSupervisor,V.Local.sSQL)
F.Data.DataTable.CreateFromSQL("dtQueue","con",V.Local.sSQL,True)

F.Data.DataTable.AddColumn("dtQueue","Approve","Boolean",False)
F.Data.DataTable.AddColumn("dtQueue","Deny","Boolean",False)
F.Data.DataTable.AddColumn("dtQueue","Excused","Boolean",False)
F.Data.DataTable.AddColumn("dtQueue","Denial_Reason","String","")

F.Data.DataView.Create("dtQueue","dvQueue")

gui.frmApproval.gsgcApproval.AddGridviewFromDataview("gsgvQueue","dtQueue","dvQueue")

Program.Sub.loadAppQueueE.End

Program.Sub.cmdApprovalQueue_Click.Start
F.Intrinsic.Control.CallSub("loadAppQueueV")

F.Intrinsic.Control.CallSub("buildApprovalQueueV")

gui.frmApproval.gsgcApproval.MainView("gsgvQueue")

gui.frmApproval.cmdSaveApproval.Visible(False)

F.Intrinsic.Control.If(V.Global.bApproval)
	gui.frmApproval..Visible(True)
	gui.frm40Queue..Visible(False)
	gui.frmDenied..Visible(False)
	gui.frmApproved..Visible(False)
F.Intrinsic.Control.Else
	gui.frmApproval..Show()
	gui.frm40Queue..Visible(False)
	gui.frmDenied..Visible(False)
	gui.frmApproved..Visible(False)
	V.Global.bApproval.Set(True)
F.Intrinsic.Control.EndIf

Program.Sub.cmdApprovalQueue_Click.End

Program.Sub.frmApproval_UnLoad.Start
gui.frmApproval..Visible(False)
gui.frmApproved..Visible(True)

Program.Sub.frmApproval_UnLoad.End

Program.Sub.cmdSaveApproval_Click.Start
F.Intrinsic.Control.If(V.DataTable.dtAppQueue.Exists)
	F.Data.DataTable.Close("dtAppQueue")
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.If(V.DataTable.dtDenQueue.Exists)
	F.Data.DataTable.Close("dtDenQueue")
F.Intrinsic.Control.EndIf
F.Data.DataView.SetFilter("dtQueue","dvQueue","Approve = TRUE")
F.Data.DataView.ToDataTable("dtQueue","dvQueue","dtAppQueue",True)
F.Data.DataView.SetFilter("dtQueue","dvQueue","Deny = TRUE")
F.Data.DataView.ToDataTable("dtQueue","dvQueue","dtDenQueue",True)

F.Intrinsic.Control.CallSub("AppQueue")
F.Intrinsic.Control.CallSub("DenQueue")
F.Intrinsic.Control.CallSub("loadDT")

Program.Sub.cmdSaveApproval_Click.End

Program.Sub.AppQueue.Start
V.Local.lRowCount.Declare
V.Local.lCount.Declare
V.Local.sSupervsr.Declare
V.Local.sSQL.Declare
V.Local.sRet.Declare
V.Local.sYear.Declare
V.Local.sMonth.Declare
V.Local.sDay.Declare
V.Local.sDate.Declare
V.Local.lDLen.Declare
V.Local.lMLen.Declare
V.Local.lFill.Declare
V.Local.lExcused.Declare
V.Local.sExplanation.Declare
V.Local.lRet.Declare

V.Local.lRowCount.Set(V.DataTable.dtAppQueue.RowCount)
F.Intrinsic.Control.If(V.Local.lRowCount,"=",0)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf
F.Intrinsic.Math.Sub(V.Local.lRowCount,1,V.Local.lRowCount)

F.Intrinsic.Control.For(V.Local.lCount,0,V.Local.lRowCount,1)

	F.Intrinsic.String.Build("SELECT * FROM ZZ_PTO_EMPLOYEES WHERE EMPLOYEE = '{0}';",V.DataTable.dtAppQueue(V.Local.lCount).SUPERVSR!FieldVal,V.Local.sSQL)
	F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)
	F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
	
	F.Intrinsic.Date.Year(V.DataTable.dtAppQueue(V.Local.lCount).REQUEST_DATE!Fieldval,V.Local.sYear)
	F.Intrinsic.Date.Month(V.DataTable.dtAppQueue(V.Local.lCount).REQUEST_DATE!Fieldval,V.Local.sMonth)
	F.Intrinsic.Date.Day(V.DataTable.dtAppQueue(V.Local.lCount).REQUEST_DATE!Fieldval,V.Local.sDay)
	F.Intrinsic.String.Len(V.Local.sMonth,V.Local.lMLen)
	F.Intrinsic.String.Len(V.Local.sDay,V.Local.lDLen)
	F.Intrinsic.Control.If(V.Local.lMLen,"=",1)
		F.Intrinsic.String.Build("0{0}",V.Local.sMonth,V.Local.sMonth)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.If(V.Local.lDLen,"=",1)
		F.Intrinsic.String.Build("0{0}",V.Local.sDay,V.Local.sDay)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.String.Build("{0}-{1}-{2}",V.Local.sYear,V.Local.sMonth,V.Local.sDay,V.Local.sDate)
	
	F.Intrinsic.Control.If(V.DataTable.dtAppQueue(V.Local.lCount).FILL_TO_40!FieldVal)
		V.Local.lFill.Set(1)
	F.Intrinsic.Control.Else
		V.Local.lFill.Set(0)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.If(V.DataTable.dtAppQueue(V.Local.lCount).Excused!FieldVal)
		V.Local.lExcused.Set(1)
	F.Intrinsic.Control.Else
		V.Local.lExcused.Set(0)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.String.Split(V.Local.sRet(1),",",V.Local.sSupervsr)
	F.Intrinsic.String.Trim(V.Local.sSupervsr(1),V.Local.sSupervsr(1))
	F.Intrinsic.String.Build("{0} {1}",V.Local.sSupervsr(1),V.Local.sSupervsr(0),V.Local.sSupervsr)
	
	V.Local.sExplanation.Set(V.Screen.frmPTO!txtExplanation.Value)
	
	F.Intrinsic.String.Occurs(V.Local.sExplanation,"'",V.Local.lRet)
	F.Intrinsic.Control.If(V.Local.lRet,>,0)
		F.Intrinsic.String.Replace(V.Local.sExplanation,"'","''",V.Local.sExplanation)
	F.Intrinsic.Control.EndIf

	F.Intrinsic.String.Build("INSERT INTO ZZ_PTO_HR_APPROVED (UNIQID, EMPLOYEE, NAME, REQUEST_DATE, PTO_AMOUNT, REASON, FILL_TO_40, SUPERVSR, EXCUSED, AVAILABLE, EXPLANATION) VALUES ('{0}', '{1}', '{2}', '{3}', '{4}', '{5}', '{6}', '{7}', '{8}', '{9}', '{10}');",V.DataTable.dtAppQueue(V.Local.lCount).UNIQID!FieldVal,V.DataTable.dtAppQueue(V.Local.lCount).EMPLOYEE!FieldVal,V.DataTable.dtAppQueue(V.Local.lCount).NAME!FieldVal,V.Local.sDate,V.DataTable.dtAppQueue(V.Local.lCount).PTO_AMOUNT!FieldVal,V.DataTable.dtAppQueue(V.Local.lCount).REASON!FieldVal,V.Local.lFill,V.Local.sSupervsr,V.Local.lExcused,V.DataTable.dtAppQueue(V.Local.lCount).AVAILABLE!FieldVal,V.Local.sExplanation,V.Local.sSQL)
	
	F.ODBC.Connection!con.Execute(V.Local.sSQL)
	
	F.Intrinsic.String.Build("INSERT INTO ZZ_PTO_HISTORY (UNIQID, EMPLOYEE, NAME, REQUEST_DATE, PTO_AMOUNT, REASON, FILL_TO_40, SUPERVSR, EXCUSED, AVAILABLE, EXPLANATION) VALUES ('{0}', '{1}', '{2}', '{3}', '{4}', '{5}', '{6}', '{7}', '{8}', '{9}', '{10}');",V.DataTable.dtAppQueue(V.Local.lCount).UNIQID!FieldVal,V.DataTable.dtAppQueue(V.Local.lCount).EMPLOYEE!FieldVal,V.DataTable.dtAppQueue(V.Local.lCount).NAME!FieldVal,V.Local.sDate,V.DataTable.dtAppQueue(V.Local.lCount).PTO_AMOUNT!FieldVal,V.DataTable.dtAppQueue(V.Local.lCount).REASON!FieldVal,V.Local.lFill,V.Local.sSupervsr,V.Local.lExcused,V.DataTable.dtAppQueue(V.Local.lCount).AVAILABLE!FieldVal,V.Local.sExplanation,V.Local.sSQL)
	
	F.ODBC.Connection!con.Execute(V.Local.sSQL)
	
	F.Intrinsic.String.Build("DELETE FROM ZZ_PTO_APPROVAL WHERE UNIQID = '{0}';",V.DataTable.dtAppQueue(V.Local.lCount).UNIQID!FieldVal,V.Local.sSQL)
	
	F.ODBC.Connection!con.Execute(V.Local.sSQL)

F.Intrinsic.Control.Next(V.Local.lCount)

F.Intrinsic.UI.Msgbox("Changes Saved!")

Program.Sub.AppQueue.End

Program.Sub.DenQueue.Start
V.Local.lRowCount.Declare
V.Local.lCount.Declare
V.Local.sSupervsr.Declare
V.Local.sSQL.Declare
V.Local.sRet.Declare
V.Local.sYear.Declare
V.Local.sMonth.Declare
V.Local.sDay.Declare
V.Local.sDate.Declare
V.Local.lDLen.Declare
V.Local.lMLen.Declare
V.Local.lFill.Declare
V.Local.lExcused.Declare
V.Local.sExplanation.Declare
V.Local.lRet.Declare

V.Local.lRowCount.Set(V.DataTable.dtDenQueue.RowCount)
F.Intrinsic.Control.If(V.Local.lRowCount,"=",0)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf
F.Intrinsic.Math.Sub(V.Local.lRowCount,1,V.Local.lRowCount)

F.Intrinsic.Control.For(V.Local.lCount,0,V.Local.lRowCount,1)

	F.Intrinsic.String.Build("SELECT * FROM ZZ_PTO_EMPLOYEES WHERE EMPLOYEE = '{0}';",V.DataTable.dtDenQueue(V.Local.lCount).SUPERVSR!FieldVal,V.Local.sSQL)
	F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)
	F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
	
	F.Intrinsic.Date.Year(V.DataTable.dtDenQueue(V.Local.lCount).REQUEST_DATE!Fieldval,V.Local.sYear)
	F.Intrinsic.Date.Month(V.DataTable.dtDenQueue(V.Local.lCount).REQUEST_DATE!Fieldval,V.Local.sMonth)
	F.Intrinsic.Date.Day(V.DataTable.dtDenQueue(V.Local.lCount).REQUEST_DATE!Fieldval,V.Local.sDay)
	F.Intrinsic.String.Len(V.Local.sMonth,V.Local.lMLen)
	F.Intrinsic.String.Len(V.Local.sDay,V.Local.lDLen)
	F.Intrinsic.Control.If(V.Local.lMLen,"=",1)
		F.Intrinsic.String.Build("0{0}",V.Local.sMonth,V.Local.sMonth)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.If(V.Local.lDLen,"=",1)
		F.Intrinsic.String.Build("0{0}",V.Local.sDay,V.Local.sDay)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.String.Build("{0}-{1}-{2}",V.Local.sYear,V.Local.sMonth,V.Local.sDay,V.Local.sDate)
	
	F.Intrinsic.Control.If(V.DataTable.dtDenQueue(V.Local.lCount).FILL_TO_40!FieldVal)
		V.Local.lFill.Set(1)
	F.Intrinsic.Control.Else
		V.Local.lFill.Set(0)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.If(V.DataTable.dtDenQueue(V.Local.lCount).Excused!FieldVal)
		V.Local.lExcused.Set(1)
	F.Intrinsic.Control.Else
		V.Local.lExcused.Set(0)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.String.Split(V.Local.sRet(1),",",V.Local.sSupervsr)
	F.Intrinsic.String.Build("{0} {1}",V.Local.sSupervsr(1),V.Local.sSupervsr(0),V.Local.sSupervsr)
	

	V.Local.sExplanation.Set(V.Screen.frmPTO!txtExplanation.Value)
	
	F.Intrinsic.String.Occurs(V.Local.sExplanation,"'",V.Local.lRet)
	F.Intrinsic.Control.If(V.Local.lRet,>,0)
		F.Intrinsic.String.Replace(V.Local.sExplanation,"'","''",V.Local.sExplanation)
	F.Intrinsic.Control.EndIf

	F.Intrinsic.String.Build("INSERT INTO ZZ_PTO_HR_DENIED (UNIQID, EMPLOYEE, NAME, REQUEST_DATE, PTO_AMOUNT, REASON, FILL_TO_40, SUPERVSR, EXCUSED, AVAILABLE, DENIAL_REASON, EXPLANATION) VALUES ('{0}', '{1}', '{2}', '{3}', '{4}', '{5}', '{6}', '{7}', '{8}', '{9}', '{10}', '{11}');",V.DataTable.dtDenQueue(V.Local.lCount).UNIQID!FieldVal,V.DataTable.dtDenQueue(V.Local.lCount).EMPLOYEE!FieldVal,V.DataTable.dtDenQueue(V.Local.lCount).NAME!FieldVal,V.Local.sDate,V.DataTable.dtDenQueue(V.Local.lCount).PTO_AMOUNT!FieldVal,V.DataTable.dtDenQueue(V.Local.lCount).REASON!FieldVal,V.Local.lFill,V.Local.sSupervsr,V.Local.lExcused,V.DataTable.dtDenQueue(V.Local.lCount).AVAILABLE!FieldVal,V.DataTable.dtDenQueue(V.Local.lCount).Denial_Reason!FieldVal,V.Local.sExplanation,V.Local.sSQL)
	
	F.ODBC.Connection!con.Execute(V.Local.sSQL)
	
	F.Intrinsic.String.Build("DELETE FROM ZZ_PTO_APPROVAL WHERE UNIQID = '{0}';",V.DataTable.dtDenQueue(V.Local.lCount).UNIQID!FieldVal,V.Local.sSQL)
	
	F.ODBC.Connection!con.Execute(V.Local.sSQL)

F.Intrinsic.Control.Next(V.Local.lCount)

F.Intrinsic.UI.Msgbox("Changes Saved!")

Program.Sub.DenQueue.End

Program.Sub.loadAppQueueV.Start
F.Intrinsic.Control.If(V.Global.bApproval)
	gui.frmApproval.gsgcApproval.ClearGrouping("gsgvQueue")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataTable.dtQueue.Exists)
	F.Data.DataView.Close("dtQueue","dvQueue")
	F.Data.DataTable.Close("dtQueue")
F.Intrinsic.Control.EndIf

F.Data.DataTable.CreateFromSQL("dtQueue","con","SELECT QUEUE.UNIQID, QUEUE.EMPLOYEE, QUEUE.NAME, QUEUE.REQUEST_DATE, QUEUE.PTO_AMOUNT, QUEUE.REASON, QUEUE.FILL_TO_40, QUEUE.SUPERVSR, QUEUE.EXPLANATION, EMPLOYEES.AVAILABLE FROM ZZ_PTO_APPROVAL AS QUEUE LEFT JOIN ZZ_PTO_EMPLOYEES AS EMPLOYEES ON QUEUE.EMPLOYEE = EMPLOYEES.EMPLOYEE",True)

F.Data.DataTable.AddColumn("dtQueue","Approve","Boolean",False)
F.Data.DataTable.AddColumn("dtQueue","Deny","Boolean",False)
F.Data.DataTable.AddColumn("dtQueue","Excused","Boolean",False)
F.Data.DataTable.AddColumn("dtQueue","Denial_Reason","String","")

F.Data.DataView.Create("dtQueue","dvQueue")

gui.frmApproval.gsgcApproval.AddGridviewFromDataview("gsgvQueue","dtQueue","dvQueue")

Program.Sub.loadAppQueueV.End

Program.Sub.buildApprovalQueueV.Start
gui.frmApproval.gsgcApproval.SetGridviewProperty("gsgvQueue","Enableappearanceoddrow",True)
gui.frmApproval.gsgcAproval.SetGridviewProperty("gsgvQueue","ReadOnly",True)


gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","UNIQID","Visible",False)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","EMPLOYEE","Visible",False)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","SUPERVSR","Visible",False)

gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","NAME","HeaderFontBold",True)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","REQUEST_DATE","HeaderFontBold",True)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","PTO_AMOUNT","HeaderFontBold",True)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","REASON","HeaderFontBold",True)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","FILL_TO_40","HeaderFontBold",True)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","AVAILABLE","HeaderFontBold",True)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","Approve","HeaderFontBold",True)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","Deny","HeaderFontBold",True)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","Excused","HeaderFontBold",True)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","Denial_Reason","HeaderFontBold",True)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","EXPLANATION","HeaderFontBold",True)

gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","REQUEST_DATE","HeaderHAlignment","Center")
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","PTO_AMOUNT","HeaderHAlignment","Center")
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","FILL_TO_40","HeaderHAlignment","Center")
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","AVAILABLE","HeaderHAlignment","Center")
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","Approve","HeaderHAlignment","Center")
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","Deny","HeaderHAlignment","Center")
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","Excused","HeaderHAlignment","Center")
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","EXPLANATION","HeaderHAlignment","Center")

gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","REQUEST_DATE","CellHAlignment","Center")
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","PTO_AMOUNT","CellHAlignment","Center")
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","FILL_TO_40","CellHAlignment","Center")
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","AVAILABLE","CellHAlignment","Center")
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","Approve","CellHAlignment","Center")
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","Deny","CellHAlignment","Center")
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","Excused","CellHAlignment","Center")

gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","Denial_Reason","CellWordWrap","Wrap")
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","EXPLANATION","CellWordWrap","Wrap")

gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","NAME","Caption","Name")
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","REQUEST_DATE","Caption","Requested Date")
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","PTO_AMOUNT","Caption","PTO Amount")
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","REASON","Caption","Reason")
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","FILL_TO_40","Caption","Fill to 40")
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","AVAILABLE","Caption","Available PTO")
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","Denial_Reason","Caption","Denial Reason")
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","EXPLANATION","Caption","Explanation")

gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","NAME","ReadOnly",True)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","REQUEST_DATE","ReadOnly",True)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","PTO_AMOUNT","ReadOnly",True)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","REASON","ReadOnly",True)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","FILL_TO_40","ReadOnly",True)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","AVAILABLE","ReadOnly",True)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","Denial_Reason","ReadOnly",False)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","Approve","ReadOnly",False)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","Deny","ReadOnly",False)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","Excused","ReadOnly",False)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","EXPLANATION","ReadOnly",True)

gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","NAME","AllowEdit",False)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","REQUEST_DATE","AllowEdit",False)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","PTO_AMOUNT","AllowEdit",False)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","REASON","AllowEdit",False)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","FILL_TO_40","AllowEdit",False)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","AVAILABLE","AllowEdit",False)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","Denial_Reason","AllowEdit",True)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","Deny","AllowEdit",True)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","Approve","AllowEdit",True)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","Excused","AllowEdit",True)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","EXPLANATION","AllowEdit",False)

gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","NAME","Width",30)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","REQUEST_DATE","Width",25)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","PTO_AMOUNT","Width",3)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","REASON","Width",20)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","FILL_TO_40","Width",5)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","AVAILABLE","Width",15)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","Denial_Reason","Width",50)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","Deny","Width",3)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","Approve","Width",3)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","Excused","Width",3)
gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","EXPLANATION","Width",50)

gui.frmApproval.gsgcApproval.SetColumnProperty("gsgvQueue","REQUEST_DATE","DisplayCustomDatetime","d")

Program.Sub.buildApprovalQueueV.End

Program.Sub.cmdDeleteReq_Click.Start
V.Local.sTitles.Declare
V.Local.sSQL.Declare
V.Local.iWidths.Declare
V.Local.sReturn.Declare
V.Local.sTables.Declare
V.Local.lTCount.Declare
V.Local.sTRet.Declare
V.Local.sRow.Declare
V.Local.lRCount.Declare
V.Local.sTempRow.Declare
V.Local.sTableArray.Declare
V.Local.sSupRet.Declare
V.Local.sCols.Declare
V.Local.lCount.Declare
V.Local.sTempDate.Declare
V.Local.sMonth.Declare
V.Local.sDay.Declare
V.Local.sYear.Declare
V.Local.lDLen.Declare
V.Local.lMLen.Declare

F.Intrinsic.UI.SetBrowserHotTypeAhead(True)

F.Intrinsic.String.Split("ID*!*Name","*!*",V.Local.sTitles)
F.Intrinsic.String.Split("600*!*1600","*!*",V.Local.iWidths)

F.Intrinsic.UI.Browser("Select an Employee","con","SELECT EMPLOYEE, NAME FROM ZZ_PTO_EMPLOYEES;",V.Local.sTitles,V.Local.iWidths,6000,9000,V.Local.sReturn)

F.Intrinsic.Control.If(V.Local.sReturn,"=","***CANCEL***")
	F.Intrinsic.UI.Msgbox("No Employee was Selected!")
	F.Intrinsic.Control.ExitSub	
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Split(V.Local.sReturn,"*!*",V.Local.sReturn)

F.Intrinsic.String.Split("ZZ_PTO_APPROVAL*!*ZZ_PTO_HR_APPROVED*!*ZZ_PTO_CONFIRMED*!*ZZ_PTO_FILL","*!*",V.Local.sTables)

F.Intrinsic.Control.For(V.Local.lTCount,0,3,1)

	F.Intrinsic.Control.If(V.Local.sTables(V.Local.lTCount),=,"ZZ_PTO_FILL")
	
		F.Intrinsic.String.Build("SELECT UNIQID, EMPLOYEE, NAME, REQUEST_DATE, REASON, SUPERVSR FROM {0} WHERE EMPLOYEE = '{1}'",V.Local.sTables(V.Local.lTCount),V.Local.sReturn(0),V.Local.sSQL)
		F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sTRet)
		
		F.Intrinsic.Control.If(V.Local.sTRet,<>,"")
		
			F.Intrinsic.String.Split(V.Local.sTRet,"#$#",V.Local.sRow)
		
			V.Local.lRCount.Set(0)
			F.Intrinsic.Control.For(V.Local.lRCount,0,V.Local.sRow.UBound,1)
			
				F.Intrinsic.String.Split(V.Local.sRow(V.Local.lRCount),"*!*",V.Local.sCols)
				
				F.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}*!*{4}*!*{5}*!*{6}*!*{7}*!*{8}",V.Local.sCols(0),V.Local.sCols(1),V.Local.sCols(2),V.Local.sCols(3),0,V.Local.sCols(4),True,V.Local.sCols(5),"ZZ_PTO_FILL",V.Local.sTempRow)
				
				F.Intrinsic.Variable.AddToArray(V.Local.sTableArray,V.Local.sTempRow)
				
			F.Intrinsic.Control.Next(V.Local.lRCount)
		
		F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.ElseIf(V.Local.sTables(V.Local.lTCount),=,"ZZ_PTO_APPROVAL")
		
		F.Intrinsic.String.Build("SELECT UNIQID, EMPLOYEE, NAME, REQUEST_DATE, PTO_AMOUNT, REASON, FILL_TO_40, SUPERVSR FROM {0} WHERE EMPLOYEE = '{1}'",V.Local.sTables(V.Local.lTCount),V.Local.sReturn(0),V.Local.sSQL)
		F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sTRet)
		
		F.Intrinsic.Control.If(V.Local.sTRet,<>,"")
		
			F.Intrinsic.String.Split(V.Local.sTRet,"#$#",V.Local.sRow)
			V.Local.lRCount.Set(0)
			
			F.Intrinsic.Control.For(V.Local.lRCount,0,V.Local.sRow.UBound,1)
			
				F.Intrinsic.String.Split(V.Local.sRow(V.Local.lRCount),"*!*",V.Local.sCols)
				F.Intrinsic.String.Build("SELECT NAME FROM ZZ_PTO_EMPLOYEES WHERE EMPLOYEE = '{0}'",V.Local.sCols(7),V.Local.sSQL)
				F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sSupRet)
				
				F.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}*!*{4}*!*{5}*!*{6}*!*{7}*!*{8}",V.Local.sCols(0),V.Local.sCols(1),V.Local.sCols(2),V.Local.sCols(3),V.Local.sCols(4),V.Local.sCols(5),V.Local.sCols(6),V.Local.sSupRet,"ZZ_PTO_APPROVAL",V.Local.sTempRow)
				F.Intrinsic.Variable.AddToArray(V.Local.sTableArray,V.Local.sTempRow)
				
			F.Intrinsic.Control.Next(V.Local.lRCount)
		
		F.Intrinsic.Control.EndIf

	F.Intrinsic.Control.Else
	
		F.Intrinsic.String.Build("SELECT UNIQID, EMPLOYEE, NAME, REQUEST_DATE, PTO_AMOUNT, REASON, FILL_TO_40, SUPERVSR FROM {0} WHERE EMPLOYEE = '{1}'",V.Local.sTables(V.Local.lTCount),V.Local.sReturn(0),V.Local.sSQL)
		F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sTRet)
		
		F.Intrinsic.Control.If(V.Local.sTRet,<>,"")
		
			F.Intrinsic.String.Split(V.Local.sTRet,"#$#",V.Local.sRow)
		
			V.Local.lRCount.Set(0)
			F.Intrinsic.Control.For(V.Local.lRCount,0,V.Local.sRow.UBound,1)
			
				F.Intrinsic.String.Build("{0}*!*{1}",V.Local.sRow(V.Local.lRCount),V.Local.sTables(V.Local.lTCount),V.Local.sTempRow)
			
				F.Intrinsic.Variable.AddToArray(V.Local.sTableArray,V.Local.sTempRow)
			
			F.Intrinsic.Control.Next(V.Local.lRCount)
		
		F.Intrinsic.Control.EndIf
		
	F.Intrinsic.Control.EndIf
	
	
F.Intrinsic.Control.Next(V.Local.lTCount)

F.Intrinsic.Control.If(V.DataTable.dtDelete.Exists)
	F.Data.DataView.Close("dtDelete","dvDelete")
	F.Data.DataTable.Close("dtDelete")
F.Intrinsic.Control.EndIf

F.Data.DataTable.CreateFromString("dtDelete","","Uniqid*!*ID*!*Name*!*Request_Date*!*PTO_Amount*!*Reason*!*Fill*!*Supervisor*!*Table*!*Apply","String*!*String*!*String*!*Date*!*Float*!*String*!*Boolean*!*String*!*String*!*Boolean","*!*","!*!",True)

F.Intrinsic.Control.For(V.Local.lCount,1,V.Local.sTableArray.UBound,1)
	F.Intrinsic.String.Split(V.Local.sTableArray(V.Local.lCount),"*!*",V.Local.sTempRow)
	
	F.Intrinsic.Date.Year(V.Local.sTempRow(3),V.Local.sYear)
	F.Intrinsic.Date.Month(V.Local.sTempRow(3),V.Local.sMonth)
	F.Intrinsic.Date.Day(V.Local.sTempRow(3),V.Local.sDay)
	F.Intrinsic.String.Len(V.Local.sMonth,V.Local.lMLen)
	F.Intrinsic.String.Len(V.Local.sDay,V.Local.lDLen)
	F.Intrinsic.Control.If(V.Local.lMLen,"=",1)
		F.Intrinsic.String.Build("0{0}",V.Local.sMonth,V.Local.sMonth)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.If(V.Local.lDLen,"=",1)
		F.Intrinsic.String.Build("0{0}",V.Local.sDay,V.Local.sDay)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.String.Build("{0}-{1}-{2}",V.Local.sYear,V.Local.sMonth,V.Local.sDay,V.Local.sTempDate)
	
	
	F.Data.DataTable.AddRow("dtDelete","Uniqid",V.Local.sTempRow(0),"ID",V.Local.sTempRow(1),"Name",V.Local.sTempRow(2),"Request_Date",V.Local.sTempDate,"PTO_Amount",V.Local.sTempRow(4),"Reason",V.Local.sTempRow(5),"Fill",V.Local.sTempRow(6),"Supervisor",V.Local.sTempRow(7),"Table",V.Local.sTempRow(8),"Apply",False)
F.Intrinsic.Control.Next(V.Local.lCount)

F.Data.DataTable.DeleteRow("dtDelete",0)

F.Intrinsic.Control.CallSub("buildDelete")

Program.Sub.cmdDeleteReq_Click.End

Program.Sub.buildDelete.Start
F.Data.DataView.Create("dtDelete","dvDelete")
gui.frmDelReq.gsgcDelete.AddGridviewFromDataview("gsgvDelete","dtDelete","dvDelete")

gui.frmDelReq.gsgcDelete.SetGridviewProperty("gsgvDelete",Editable,True)
gui.frmDelReq.gsgcDelete.SetGridviewProperty("gsgvDelete","ReadOnly",False)
gui.frmDelReq.gsgcDelete.SetGridviewProperty("gsgvDelete","AllowSort",True)
gui.frmDelReq.gsgcDelete.SetGridviewProperty("gsgvDelete","AllowFilter",True)
gui.frmDelReq.gsgcDelete.SetGridviewProperty("gsgvDelete",OptionsViewColumnAutoWidth,False)

gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Uniqid","HeaderFontBold",True)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","ID","HeaderFontBold",True)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Name","HeaderFontBold",True)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Request_Date","HeaderFontBold",True)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","PTO_Amount","HeaderFontBold",True)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Reason","HeaderFontBold",True)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Fill","HeaderFontBold",True)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Supervisor","HeaderFontBold",True)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Table","HeaderFontBold",True)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Apply","HeaderFontBold",True)

gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Uniqid","HeaderHAlignment",Center)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","ID","HeaderHAlignment",Center)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Name","HeaderHAlignment",Center)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Request_Date","HeaderHAlignment",Center)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","PTO_Amount","HeaderHAlignment",Center)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Reason","HeaderHAlignment",Center)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Fill","HeaderHAlignment",Center)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Supervisor","HeaderHAlignment",Center)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Table","HeaderHAlignment",Center)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Apply","HeaderHAlignment",Center)

gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Uniqid","CellHAlignment",Center)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","ID","CellHAlignment",Center)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Request_Date","CellHAlignment",Center)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","PTO_Amount","CellHAlignment",Center)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Fill","CellHAlignment",Center)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Apply","CellHAlignment",Center)

gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Uniqid","ReadOnly",True)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","ID","ReadOnly",True)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Name","ReadOnly",True)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Request_Date","ReadOnly",True)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","PTO_Amount","ReadOnly",True)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Reason","ReadOnly",True)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Fill","ReadOnly",True)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Supervisor","ReadOnly",True)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Table","ReadOnly",True)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Apply","ReadOnly",False)

gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Uniqid","Width",100)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","ID","Width",50)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Name","Width",150)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Request_Date","Width",100)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","PTO_Amount","Width",100)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Reason","Width",75)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Fill","Width",50)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Supervisor","Width",150)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Table","Width",100)
gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Apply","Width",50)

gui.frmDelReq.gsgcDelete.SetColumnProperty("gsgvDelete","Apply","AllowEdit",True)

gui.frmDelReq.gsgcDelete.MainView("gsgvDelete")

F.Intrinsic.Control.If(V.Global.bDelReq)
	gui.frmApproved..Visible(False)
	gui.frmDenied..Visible(False)
	gui.frm40Queue..Visible(False)
	gui.frmDelReq..Visible(True)
F.Intrinsic.Control.Else
	V.Global.bDelReq.Set(True)
	gui.frmApproved..Visible(False)
	gui.frmDenied..Visible(False)
	gui.frm40Queue..Visible(False)
	gui.frmDelReq..Show()
F.Intrinsic.Control.EndIf

Program.Sub.buildDelete.End

Program.Sub.cmdApplyDelete_Click.Start
V.Local.lRowCount.Declare
V.Local.lCount.Declare
V.Local.sSQL.Declare
V.Local.sCriteria.Declare
V.Local.sRet.Declare
V.Local.sMRet.Declare
V.Local.sYear.Declare
V.Local.sMonth.Declare
V.Local.sDay.Declare
V.Local.lMLen.Declare
V.Local.lDLen.Declare
V.Local.sDate.Declare
V.Local.sMsg.Declare
V.Local.sTables.Declare
V.Local.lTCount.Declare
V.Local.fNewAvail.Declare
V.Local.lFloorHr.Declare
V.Local.fModMin.Declare
V.Local.fFloorMin.Declare
V.Local.fHours.Declare

'Closes the filtered datatable if it exists
F.Intrinsic.Control.If(V.DataTable.dtFiltered.Exists)
	F.Data.DataView.Close("dtFiltered","dvFiltered")
	F.Data.DataTable.Close("dtFiltered")
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Split("ZZ_PTO_APPROVAL*!*ZZ_PTO_HR_APPROVED*!*ZZ_PTO_CONFIRMED*!*ZZ_PTO_FILL","*!*",V.Local.sTables)

'Sets a filter on the dataview and then creates a new table from it.	
F.Data.DataView.SetFilter("dtDelete","dvDelete","Apply = TRUE")
F.Data.DataView.ToDataTable("dtDelete","dvDelete","dtFiltered",True)

F.Data.DataView.Create("dtFiltered","dvFiltered")

F.Intrinsic.Control.Try
	gui.frmDelReq.gsgcDelete.ClearGrouping("gsgvDelete")
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.ClearErrors
F.Intrinsic.Control.EndTry

gui.frmDelReq.gsgcDelete.AddGridviewFromDataview("gsgvDelete","dtFiltered","dvFiltered")

'For each row in the dtDelete datatable/gridview that is selected to apply changes
V.Local.lRowCount.Set(V.DataTable.dtFiltered.RowCount)
F.Intrinsic.Math.Sub(V.Local.lRowCount,1,V.Local.lRowCount)

F.Intrinsic.Control.If(V.Local.lRowCount,<=,-1)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.For(V.Local.lCount,0,V.Local.lRowCount,1)

	F.Intrinsic.String.Build("Are you sure you want to delete {0}'s PTO request for {1}?",V.DataTable.dtFiltered(V.Local.lCount).Name!FieldVal,V.DataTable.dtFiltered(V.Local.lCount).Request_Date!FieldVal,V.Local.sMsg)
	F.Intrinsic.UI.Msgbox(V.Local.sMsg,"Delete Request?",4,V.Local.sMRet)
	
	F.Intrinsic.Control.If(V.Local.sMRet,=,7)
		F.Intrinsic.UI.Msgbox("Skipping record!","Skipping")
		F.Intrinsic.Control.If(V.Local.lCount,=,V.Local.lRowCount)
			F.Intrinsic.Control.ExitFor(V.Local.lCount)
		F.Intrinsic.Control.Else
			F.Intrinsic.Control.Next(V.Local.lCount)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Else
	
		F.Intrinsic.String.Build("SELECT AVAILABLE FROM ZZ_PTO_EMPLOYEES WHERE EMPLOYEE = '{0}'",V.DataTable.dtFiltered(V.Local.lCount).ID!FieldVal,V.Local.sSQL)
		F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)
		F.Intrinsic.Math.Add(V.Local.sRet,V.DataTable.dtFiltered(V.Local.lCount).PTO_Amount!FieldVal,V.Local.fNewAvail)
		F.Intrinsic.String.Build("UPDATE ZZ_PTO_EMPLOYEES SET AVAILABLE = '{0}' WHERE EMPLOYEE = '{1}'",V.Local.fNewAvail,V.DataTable.dtFiltered(V.Local.lCount).ID!FieldVal,V.Local.sSQL)
		F.ODBC.Connection!con.Execute(V.Local.sSQL)
	
		F.Intrinsic.String.Build("UPDATE ZZ_PTO_HISTORY SET EXPLANATION = 'DELETED FROM {0}', PTO_AMOUNT = '0' WHERE UNIQID = '{1}';",V.DataTable.dtFiltered(V.Local.lCount).Table!FieldVal,V.DataTable.dtFiltered(V.Local.lCount).Uniqid!FieldVal,V.Local.sSQL)
		F.ODBC.Connection!con.Execute(V.Local.sSQL)
		
		F.Intrinsic.Control.For(V.Local.lTCount,0,3,1)
			F.Intrinsic.String.Build("DELETE FROM {0} WHERE UNIQID = '{1}';",V.Local.sTables(V.Local.lTCount),V.DataTable.dtFiltered(V.Local.lCount).Uniqid!FieldVal,V.Local.sSQL)
			F.ODBC.Connection!con.Execute(V.Local.sSQL)
		F.Intrinsic.Control.Next(V.Local.lTCount)
		
		'Formats the date for the database query
		F.Intrinsic.Date.Year(V.DataTable.dtFiltered(V.Local.lCount).Request_Date!FieldVal,V.Local.sYear)
		F.Intrinsic.Date.Month(V.DataTable.dtFiltered(V.Local.lCount).Request_Date!FieldVal,V.Local.sMonth)
		F.Intrinsic.Date.Day(V.DataTable.dtFiltered(V.Local.lCount).Request_Date!FieldVal,V.Local.sDay)
		F.Intrinsic.String.Len(V.Local.sMonth,V.Local.lMLen)
		F.Intrinsic.String.Len(V.Local.sDay,V.Local.lDLen)
		F.Intrinsic.Control.If(V.Local.lMLen,"=",1)
			F.Intrinsic.String.Build("0{0}",V.Local.sMonth,V.Local.sMonth)
		F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.If(V.Local.lDLen,"=",1)
			F.Intrinsic.String.Build("0{0}",V.Local.sDay,V.Local.sDay)
		F.Intrinsic.Control.EndIf
		F.Intrinsic.String.Build("{0}{1}{2}",V.Local.sYear,V.Local.sMonth,V.Local.sDay,V.Local.sDate)
		
		V.Local.fHours.Set(V.DataTable.dtFiltered(V.Local.lCount).PTO_Amount!FieldVal)
		F.Intrinsic.Math.Floor(V.Local.fHours,V.Local.lFloorHr)
		F.Intrinsic.Math.Mod(V.Local.fHours,1,V.Local.fModMin)
		F.Intrinsic.Math.Mult(V.Local.fModMin,60,V.Local.fModMin)
		F.Intrinsic.Math.Round(V.Local.fModMin,0,V.Local.fFloorMin)
		
		F.Intrinsic.String.Build("DELETE FROM TIME_ATTENDANCE WHERE EMPLOYEE LIKE '%{0}%' AND DATE_IN = '{1}' AND REC_TYPE = 'A' AND HOURS_HH = '{2}' AND HOURS_MM = '{3}';",V.DataTable.dtFiltered(V.Local.lCount).ID!FieldVal,V.Local.sDate,V.Local.lFloorHr,V.Local.fFloorMin,V.Local.sSQL)
		F.ODBC.Connection!con.Execute(V.Local.sSQL)
		
		F.Intrinsic.String.Build("DELETE FROM ZZ_PTO_TAQ WHERE EMPLOYEE LIKE '%{0}%' AND DATE_IN = '{1}' AND REC_TYPE = 'A' AND HOURS_HH = '{2}' AND HOURS_MM = '{3}';",V.DataTable.dtFiltered(V.Local.lCount).ID!FieldVal,V.Local.sDate,V.Local.lFloorHr,V.Local.fFloorMin,V.Local.sSQL)
		F.ODBC.Connection!con.Execute(V.Local.sSQL)
		
		F.Intrinsic.String.Build("{0}'s request for {1} has been deleted.",V.DataTable.dtFiltered(V.Local.lCount).Name!FieldVal,V.DataTable.dtFiltered(V.Local.lCount).Request_Date!FieldVal,V.Local.sMsg)
		F.Intrinsic.UI.Msgbox(V.Local.sMsg,"Request Deleted")
		
	F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Next(V.Local.lCount)

gui.frmDelReq..Visible(False)

F.Intrinsic.Control.CallSub("loadDT")

Program.Sub.cmdApplyDelete_Click.End

Program.Sub.frmDelReq_UnLoad.Start
gui.frmDelReq..Visible(False)
gui.frmApproved..Visible(True)

Program.Sub.frmDelReq_UnLoad.End

Program.Sub.Comments.Start
${$5$}$2.0.0.0$}$2
${$6$}$lukep$}$20211112091556102$}$se77YAxmQviVSBRx6Dva+7hHQnhldcS0pWtnTmm9I7+AV2WyGfbTHbsuZiE9vs4CM/w9zLC//TI=
Program.Sub.Comments.End
